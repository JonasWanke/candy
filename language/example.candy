use Firebase Basics
use Mathematics
use Money

public use ..Utils

public fun main() {
  print("Hello world!")
  main1()
  main2()
  main3()
}

@Remember(cacheSize = 30)
fun fibonacci(n: UInt): UInt {
  # Returns the [n]th fibonacci number.

  (n == 0 | n == 1)
    then { it }
    else { n -> fibonacci(n - 1) + fibonacci(n - 2) }
}

fun main1() {
  assert(fibonacci(10) == 55)
  print("The 100th fibonacci number is {fibonacci(100)}.")
}

public data class Fruit {
  let name: String = "Mysterious"
  let cost: Money
  let ripeness: Ripeness = Ripeness unripe
}

enum Ripeness { ripe, unripe }

let apple = Fruit("apple", 2 euro)
let banana = Fruit("banana", 5 euro)
let kiwi = Fruit("kiwi", apple cost + banana cost, ripeness = Ripeness ripe)
let smoothieIngredients = [apple, banana, kiwi, apple, kiwi]

fun main2() {
  let expensiveIngredients = smoothieIngredients where { it cost > 3 }
}

class Cart {
  # A shopping cart than can contain items.

  trait Item {
    let cost: Money
  }

  var items = <Item>[]
  # The items currently in the cart.

  let cost: Money -> items.cost

  fun buy() -> todo()
}

impl Iterable<Item>: Item {
  # Simplifies getting the cost of a list of items.

  let cost -> sumBy { it cost }
}

impl Fruit: Cart Item

data class Box<Item: Cart Item> {
  # A beautiful, handcrafted, wooden box.

  static let cost: Money = 30 euro
  # A box is very expensive.

  let content: List<Item>
}

impl<_> Box<Item>: Cart Item {
  let cost -> content cost + Box cost
}

let cart = Cart([
  kiwi,
  ...smoothieIngredients,
  Box([apple, banana, banana]),
])

fun main3() {
  print("The cart costs {cart cost}.")
}

impl Fruit {
  let yumminess: Int {
    # Computes a yumminess score for this [Fruit] using a secret formula.

    fibonacci(cost value as<UInt>())
      + name bytes sum()
      + (ripeness == Ripeness ripe) then { 0 } else { -20 }
  }
}

fun main4() {
  smoothieIngredients do { todo("Do something") }
}

public class Human {
  fun eat(fruits: List<Fruit>): Result<Burp, ThrowUp> {
    var fullness = 0
    fruits do { fruit ->
      (fullness < 10) then {
        fullness++
      } else {
        randomBool() then { return ThrowUp() }
      }
    }
    Burp()
  }
}

## - labels
## - break
## - continue
## - yield & yield each
## - modules
## - function types, tuple types
## - value constraints
## - implication operator
