use math
use money

public fun main() {
  print("Hello world!")
  main1()
  main2()
  main3()
}

@Remember(cacheSize = 30)
fun fibonacci(n: UInt): UInt {
  /// Returns the [n]th fibonacci number.
  return match n {
    0 | 1 => it
    n => fibonacci(n - 1) + fibonacci(n - 2)
  }
}

fun main1() {
  assert(fibonacci(10) == 55)
  print("The 100th fibonacci number is {fibonacci(100)}.")
}

data class Fruit {
  let name: String
  let cost: Money
  let ripeness: Ripeness = .unripe
}

enum Ripeness { ripe, unripe }

const apple = Fruit("apple", 2.euro)
const banana = Fruit("banana", 5.20.euro)
const kiwi = Fruit("kiwi", apple.cost + banana.cost, ripeness = .ripe)
const smoothieIngredients = [apple, banana, kiwi, apple, kiwi]

fun main2() {
  let expensiveIngredients = smoothieIngredients.where { it.cost > 3 }
}

class Cart {
  /// A shopping cart than can contain items.

  trait Item {
    let cost: Money
  }

  mut let items = <Item>[]
  /// The items currently in the cart.

  let cost: Money => items.cost

  fun buy() = TODO
}

impl Iterable<Item>: Item {
  /// Simplifies getting the cost of a list of items.

  let cost => sumBy { it.cost }
}

impl Fruit: Cart.Item

data class Box<Item: Cart.Item> {
  /// A beautiful, handcrafted, wooden box.

  static const cost: Money = 30.euro
  /// A box is very expensive.

  let content: List<Item>
}

impl<Item> Box<Item>: Cart.Item {
  let cost => content.cost + Box.cost
}

const cart = Cart([
  kiwi,
  ...smoothieIngredients,
  Box([apple, banana, banana]),
])

void main3() {
  print("The cart costs {cart.cost}.")
}

impl Fruit {
  let yumminess: Int {
    /// Computes a yumminess score for this [Fruit] using a secret formula.
    fun get() {
      return fibonacci(cost.value as UInt) + name.bytes.sum() + match ripeness {
        ripe => 0
        unripe => -20
      }
    }
  }
}

void main4() {
  for ingredient in smoothieIngredients {
    TODO("Do something")
  }
}

class Human {
  fun eat(fruits: List<Fruit>): Result<Burp, ThrowUp> {
    mut let fullness = 0
    for fruit in fruits {
      if fullness < 10 {
        fullness++
      } else if randomBool() {
        return ThrowUp()
      }
    }
    burp
  }
}

/*
- abstract classes
- labels
- try
- while
- break
- continue
- yield & yield each
- modules
- function types, tuple types
- value constraints
- implication operator
*/
