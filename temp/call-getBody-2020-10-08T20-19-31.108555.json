{
  "name": "getBody",
  "key": "this:main.candy:fun(main)",
  "innerCalls": [
    {
      "name": "lowerBodyAstToHir",
      "key": "this:main.candy:fun(main)",
      "innerCalls": [
        {
          "name": "getFunctionDeclarationAst",
          "key": "this:main.candy:fun(main)",
          "innerCalls": [
            {
              "name": "getDeclarationAst",
              "key": "this:main.candy:fun(main)",
              "innerCalls": [
                {
                  "name": "getAst",
                  "key": "this:main.candy",
                  "innerCalls": [
                    {
                      "name": "getSourceCode",
                      "key": "this:main.candy",
                      "innerCalls": [],
                      "result": "fun main() {\r\n  print(123)\r\n}\r\n\r\nexternal fun print(object: Any)\r\n"
                    }
                  ],
                  "result": "CandyFile(useLines: [], declaration: ModuleDeclaration(modifiers: [], moduleKeyword: KeywordToken.module(span: null), name: IdentifierToken(name: main, span: null), body: BlockDeclarationBody(leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: null), declarations: [FunctionDeclaration(modifiers: [], funKeyword: KeywordToken.fun(span: 0–3), name: IdentifierToken(name: main, span: 4–8), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 8–9), valueParameters: [], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 9–10), colon: null, returnType: null, body: Block(id: 3, leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: 11–12), statements: [CallExpression(id: 2, target: Identifier(id: 0, value: IdentifierToken(name: print, span: 16–21)), typeArguments: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 21–22), arguments: [Argument(name: null, equals: null, expression: Literal<int>(id: 1, value: IntLiteralToken(value: 123, span: 22–25)))], argumentCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 25–26))], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: 28–29))), FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: null))))"
                }
              ],
              "result": "FunctionDeclaration(modifiers: [], funKeyword: KeywordToken.fun(span: 0–3), name: IdentifierToken(name: main, span: 4–8), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 8–9), valueParameters: [], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 9–10), colon: null, returnType: null, body: Block(id: 3, leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: 11–12), statements: [CallExpression(id: 2, target: Identifier(id: 0, value: IdentifierToken(name: print, span: 16–21)), typeArguments: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 21–22), arguments: [Argument(name: null, equals: null, expression: Literal<int>(id: 1, value: IntLiteralToken(value: 123, span: 22–25)))], argumentCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 25–26))], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: 28–29)))"
            }
          ],
          "result": "FunctionDeclaration(modifiers: [], funKeyword: KeywordToken.fun(span: 0–3), name: IdentifierToken(name: main, span: 4–8), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 8–9), valueParameters: [], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 9–10), colon: null, returnType: null, body: Block(id: 3, leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: 11–12), statements: [CallExpression(id: 2, target: Identifier(id: 0, value: IdentifierToken(name: print, span: 16–21)), typeArguments: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 21–22), arguments: [Argument(name: null, equals: null, expression: Literal<int>(id: 1, value: IntLiteralToken(value: 123, span: 22–25)))], argumentCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 25–26))], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: 28–29)))"
        },
        {
          "name": "declarationIdToModuleId",
          "key": "this:main.candy:fun(main)",
          "innerCalls": [
            {
              "name": "resourceIdToModuleId",
              "key": "this:main.candy",
              "innerCalls": [],
              "result": "ModuleId(packageId: this, path: [main])"
            }
          ],
          "result": "ModuleId(packageId: this, path: [main])"
        },
        {
          "name": "getFunctionDeclarationHir",
          "key": "this:main.candy:fun(print)",
          "innerCalls": [
            {
              "name": "getFunctionDeclarationAst",
              "key": "this:main.candy:fun(print)",
              "innerCalls": [
                {
                  "name": "getDeclarationAst",
                  "key": "this:main.candy:fun(print)",
                  "innerCalls": [
                    {
                      "name": "getAst",
                      "key": "this:main.candy",
                      "innerCalls": [
                        {
                          "name": "getSourceCode",
                          "key": "this:main.candy",
                          "innerCalls": [],
                          "result": "fun main() {\r\n  print(123)\r\n}\r\n\r\nexternal fun print(object: Any)\r\n"
                        }
                      ],
                      "result": "CandyFile(useLines: [], declaration: ModuleDeclaration(modifiers: [], moduleKeyword: KeywordToken.module(span: null), name: IdentifierToken(name: main, span: null), body: BlockDeclarationBody(leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: null), declarations: [FunctionDeclaration(modifiers: [], funKeyword: KeywordToken.fun(span: 0–3), name: IdentifierToken(name: main, span: 4–8), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 8–9), valueParameters: [], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 9–10), colon: null, returnType: null, body: Block(id: 3, leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: 11–12), statements: [CallExpression(id: 2, target: Identifier(id: 0, value: IdentifierToken(name: print, span: 16–21)), typeArguments: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 21–22), arguments: [Argument(name: null, equals: null, expression: Literal<int>(id: 1, value: IntLiteralToken(value: 123, span: 22–25)))], argumentCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 25–26))], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: 28–29))), FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: null))))"
                    }
                  ],
                  "result": "FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)"
                }
              ],
              "result": "FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)"
            },
            {
              "name": "declarationIdToModuleId",
              "key": "this:main.candy:fun(print)",
              "innerCalls": [
                {
                  "name": "resourceIdToModuleId",
                  "key": "this:main.candy",
                  "innerCalls": [],
                  "result": "ModuleId(packageId: this, path: [main])"
                }
              ],
              "result": "ModuleId(packageId: this, path: [main])"
            },
            {
              "name": "astTypeToHirType",
              "key": "Tuple2<ModuleId, Type>(first: ModuleId(packageId: this, path: [main]), second: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null))",
              "innerCalls": [
                {
                  "name": "resolveAstUserType",
                  "key": "Tuple2<ModuleId, UserType>(first: ModuleId(packageId: this, path: [main]), second: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null))",
                  "innerCalls": [],
                  "result": "core:primitives.candy:trait(Any)"
                },
                {
                  "name": "declarationIdToModuleId",
                  "key": "core:primitives.candy:trait(Any)",
                  "innerCalls": [
                    {
                      "name": "resourceIdToModuleId",
                      "key": "core:primitives.candy",
                      "innerCalls": [],
                      "result": "ModuleId(packageId: core, path: [primitives])"
                    }
                  ],
                  "result": "ModuleId(packageId: core, path: [primitives])"
                }
              ],
              "result": "CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: [])"
            }
          ],
          "result": "Declaration.function(name: print, parameters: [ValueParameter(name: object, type: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: []))], returnType: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Unit, arguments: []))"
        },
        {
          "name": "isAssignableTo",
          "key": "Tuple2<CandyType, CandyType>(first: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Int, arguments: []), second: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: []))",
          "innerCalls": [],
          "result": true
        },
        {
          "name": "getFunctionDeclarationHir",
          "key": "this:main.candy:fun(print)",
          "innerCalls": [
            {
              "name": "getFunctionDeclarationAst",
              "key": "this:main.candy:fun(print)",
              "innerCalls": [
                {
                  "name": "getDeclarationAst",
                  "key": "this:main.candy:fun(print)",
                  "innerCalls": [
                    {
                      "name": "getAst",
                      "key": "this:main.candy",
                      "innerCalls": [
                        {
                          "name": "getSourceCode",
                          "key": "this:main.candy",
                          "innerCalls": [],
                          "result": "fun main() {\r\n  print(123)\r\n}\r\n\r\nexternal fun print(object: Any)\r\n"
                        }
                      ],
                      "result": "CandyFile(useLines: [], declaration: ModuleDeclaration(modifiers: [], moduleKeyword: KeywordToken.module(span: null), name: IdentifierToken(name: main, span: null), body: BlockDeclarationBody(leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: null), declarations: [FunctionDeclaration(modifiers: [], funKeyword: KeywordToken.fun(span: 0–3), name: IdentifierToken(name: main, span: 4–8), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 8–9), valueParameters: [], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 9–10), colon: null, returnType: null, body: Block(id: 3, leftBrace: OperatorToken(type: OperatorTokenType.lcurl, span: 11–12), statements: [CallExpression(id: 2, target: Identifier(id: 0, value: IdentifierToken(name: print, span: 16–21)), typeArguments: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 21–22), arguments: [Argument(name: null, equals: null, expression: Literal<int>(id: 1, value: IntLiteralToken(value: 123, span: 22–25)))], argumentCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 25–26))], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: 28–29))), FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)], rightBrace: OperatorToken(type: OperatorTokenType.rcurl, span: null))))"
                    }
                  ],
                  "result": "FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)"
                }
              ],
              "result": "FunctionDeclaration(modifiers: [ModifierToken.external(span: 33–41)], funKeyword: KeywordToken.fun(span: 42–45), name: IdentifierToken(name: print, span: 46–51), typeParameters: null, leftParenthesis: OperatorToken(type: OperatorTokenType.lparen, span: 51–52), valueParameters: [ValueParameter(name: IdentifierToken(name: object, span: 52–58), colon: OperatorToken(type: OperatorTokenType.colon, span: 58–59), type: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null), equals: null, defaultValue: null)], valueParameterCommata: [], rightParenthesis: OperatorToken(type: OperatorTokenType.rparen, span: 63–64), colon: null, returnType: null, body: null)"
            },
            {
              "name": "declarationIdToModuleId",
              "key": "this:main.candy:fun(print)",
              "innerCalls": [
                {
                  "name": "resourceIdToModuleId",
                  "key": "this:main.candy",
                  "innerCalls": [],
                  "result": "ModuleId(packageId: this, path: [main])"
                }
              ],
              "result": "ModuleId(packageId: this, path: [main])"
            },
            {
              "name": "astTypeToHirType",
              "key": "Tuple2<ModuleId, Type>(first: ModuleId(packageId: this, path: [main]), second: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null))",
              "innerCalls": [
                {
                  "name": "resolveAstUserType",
                  "key": "Tuple2<ModuleId, UserType>(first: ModuleId(packageId: this, path: [main]), second: UserType(simpleTypes: [SimpleUserType(name: IdentifierToken(name: Any, span: 60–63))], dots: [], arguments: null))",
                  "innerCalls": [],
                  "result": "core:primitives.candy:trait(Any)"
                },
                {
                  "name": "declarationIdToModuleId",
                  "key": "core:primitives.candy:trait(Any)",
                  "innerCalls": [
                    {
                      "name": "resourceIdToModuleId",
                      "key": "core:primitives.candy",
                      "innerCalls": [],
                      "result": "ModuleId(packageId: core, path: [primitives])"
                    }
                  ],
                  "result": "ModuleId(packageId: core, path: [primitives])"
                }
              ],
              "result": "CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: [])"
            }
          ],
          "result": "Declaration.function(name: print, parameters: [ValueParameter(name: object, type: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: []))], returnType: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Unit, arguments: []))"
        },
        {
          "name": "isAssignableTo",
          "key": "Tuple2<CandyType, CandyType>(first: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Int, arguments: []), second: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: []))",
          "innerCalls": [],
          "result": true
        }
      ],
      "result": "Tuple2<List<Statement>, BodyAstToHirIds>(first: [Statement.expression(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), expression: Expression.functionCall(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 1), target: Expression.identifier(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), identifier: Identifier.property(id: this:main.candy:fun(print), type: CandyType.function(receiverType: null, parameterTypes: [CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: [])], returnType: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Unit, arguments: [])))), valueArguments: {object: Expression.literal(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), literal: Literal.integer(value: 123))}))], second: BodyAstToHirIds(map: {2: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0)}))"
    }
  ],
  "result": [
    "Statement.expression(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), expression: Expression.functionCall(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 1), target: Expression.identifier(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), identifier: Identifier.property(id: this:main.candy:fun(print), type: CandyType.function(receiverType: null, parameterTypes: [CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Any, arguments: [])], returnType: CandyType.user(moduleId: ModuleId(packageId: core, path: [primitives]), name: Unit, arguments: [])))), valueArguments: {object: Expression.literal(id: DeclarationLocalId(declarationId: this:main.candy:fun(main), value: 0), literal: Literal.integer(value: 123))}))"
  ]
}