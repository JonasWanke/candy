use ...primitives
use ..collection
public use .array

public trait List<Item>: Collection<Item> {
  builtin static fun of1<Item>(first: Item): ArrayList<Item>
  builtin static fun of2<Item>(first: Item, second: Item): ArrayList<Item>
  builtin static fun of3<Item>(first: Item, second: Item, third: Item): ArrayList<Item>
  builtin static fun of4<Item>(first: Item, second: Item, third: Item, fourth: Item): ArrayList<Item>
  builtin static fun of5<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): ArrayList<Item>

  let isEmpty: Bool
  let size: Int /* UInt */

  fun indexOf(item: Item): Option<Int> /* Option<UInt> */
  fun lastIndexOf(item: Item): Option<Int> /* Option<UInt> */
  // TODO(JonasWanke): containsAll?
}

// impl<Item> List<Item>: GetOperator<Int, Item> /* GetOperator<UInt, Item> */
// TODO(JonasWanke): impl List<Item>: GetOperator<Range<UInt>, List<Item>>

public trait MutableList<Item>: List<Item> & MutableCollection<Item> {
  // fun add(item: Item)
  // TODO(JonasWanke): addAll?
  // fun clear()
}
