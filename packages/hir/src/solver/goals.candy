use compiler_utils

use ...declarations
use ...types
use ..values

class SolverGoal {
  /// The fact that a type implements a trait.
  ///
  /// In the context of the solver, this is displayed as `trait(type)`.
  ///
  /// Examples:
  ///
  /// * `Clone(List<Int>)`: the fact that `List<Int>` implements `Clone`
  /// * `Any(?T)`: the fact that `?T` implements `Any`
  /// * `Clone(?T)`: the fact that `?T` implements `Clone`
  /// * `Iterable(?T, ?L)`: the fact that `?L` implements `Iterable<?T>`

  let trait_: HirType | HirTrait
  let parameters: List<SolverType>

  fun toString_(): String {
    "{trait_}({(parameters as Iterable<SolverType>).map<String>({ it.toString_() }).join(", ")})"
  }
  fun unify(other: SolverGoal): Maybe<Map<SolverVariable, SolverType>> {
    if !(trait_ == other.trait_) { return None<Map<SolverVariable, SolverType>>() }
    SolverValue(canonicalVariable(0).declaration as HirType, parameters)
      .unify(SolverValue(canonicalVariable(0).declaration as HirType, other.parameters))
  }
  fun substituteAll(substitutions: Map<SolverVariable, SolverType>): SolverGoal {
    SolverGoal(
      trait_,
      (parameters as Iterable<SolverType>)
        .map<SolverType>({ it.substituteAll(substitutions) })
        .toList(),
    )
  }
  fun canonicalize(): SolverGoal {
    SolverGoal(
      trait_,
      (SolverValue(canonicalVariable(0).declaration as HirType, parameters)
        .canonicalize() as SolverValue).parameters,
    )
  }
}
impl SolverGoal: Equals & Hash {
  fun equals(other: This): Bool {
    (trait_ as Equals) == (other.trait_ as Equals)
      && (parameters as Equals) == (other.parameters as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (trait_ as Hash).hash<T>(hasher)
    for parameter in parameters {
      (parameter as Hash).hash<T>(hasher)
    }
  }
}

class SolverRule {
  /// An inference rule. Usually generated based on impls.
  ///
  /// In the context of the solver, these are displayed as `goal <- subgoals`.
  ///
  /// Examples:
  /// * `Clone(Tuple<?0, ?1>) <- Clone(?0), Clone(?1)`: the fact that `Tuple<?0, ?1>` implements
  ///   `Clone` if both `?0` and `?1` implement `Clone`
  /// * `Any(?T) <- <nothing>`: the fact that every `?T` implements `Any`

  let originalImpl: HirType | HirTrait | HirImpl
  let goal: SolverGoal
  let subgoals: List<SolverGoal>

  fun toString_(): String {
    "{goal.toString_()} <- {(subgoals as Iterable<SolverGoal>).map<String>({ it.toString_() }).join(", ")}"
  }
}
impl SolverRule: Equals & Hash {
  fun equals(other: This): Bool {
    (originalImpl as Equals) == (other.originalImpl as Equals)
      && (goal as Equals) == (other.goal as Equals)
      && (subgoals as Equals) == (other.subgoals as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (originalImpl as Hash).hash<T>(hasher)
    goal.hash<T>(hasher)
    for subgoal in subgoals {
      subgoal.hash<T>(hasher)
    }
  }
}

class Environment {
  let rules: List<SolverRule>

  // TODO(never, marcelgarus): Somehow support solving logic that has multiple results. Currently, rules
  // are of the form `consequence <- conditions` (with only one consequence), but we'd need multiple
  // consequences to express something like "Implement `Iterable[Equals]`". That's because there's
  // no single `SolverGoal` that the trait `Iterable[Equals]` can be lowered to – `Iterable(Equals)`
  // is not valid, because `Equals` is a trait, not a type. Essentially, we'd need something like
  // `Iterable(?0, ?1), Equals(?1)`, e.g. "Are there ?0 and ?1 so that these goals are true?"
  // I believe that Chalk, Rust's to-be type solver, manages this using something called
  // [Opaque Types](https://rust-lang.github.io/chalk/book/clauses/opaque_types.html), but I'm not
  // entirely sure. In Rust, this would correspond to an `impl Iterable<Box<dyn Equals>> for Foo`.
  // As we rely even more than Rust on dynamic dispatch and being able to implement traits like
  // `List[Equals]`, we'll definitely have to incorporate something like that into our solver
  // someday.
  fun solve(goal: SolverGoal, conditions: List<SolverGoal>): SolverSolution {
    /// Checks if the goals are true if the conditions are met.
    ///
    /// For example, to check if `Iterable[Equals]` implements `Equals`, you might try to achieve
    /// the goal `Equals(?0)` under the conditions `Iterable(?T, ?0), Equals(?T)`.

    // Create virtual types for the types in the rule and implement the right traits for them. In
    // the example above, we'd create virtual `$Virtual0` and `$Virtual1` types and implement the
    // given traits for them, e.g. by adding the rules `Iterable($Virtual1, $Virtual0) <- ∅` and
    // `Equals($Virtual0) <- ∅`. Then, we can ask a `Solver` whether `Equals($Virtual0)` holds.
    let canonicalMapping = MutableMap.empty<SolverVariable, SolverVariable>()
    // Canonicalized rules like `Iterable(?1, ?0)` and `Equals(?0)` (without `?T`).
    let canonicalConditions = (conditions as Iterable<SolverGoal>).map<SolverGoal>({
      SolverGoal(
        it.trait_,
        (SolverValue(canonicalVariable(0).declaration as HirType, it.parameters)
          .canonicalizeInternal(canonicalMapping) as SolverValue).parameters,
      )
    })
    // Create a mapping from canonical variables like `?0` to virtual types like `$Virtual0`.
    let canonicalToVirtual = MutableMap.empty<SolverVariable, SolverType>()
    let virtualModule = HirTopLevelModule(Package(Path.parse("/virtual")))
    for entry in (canonicalMapping as Map<SolverVariable, SolverType>).entries() {
      canonicalToVirtual.set(
        entry.first,
        SolverValue(
          HirType(virtualModule, "$Virtual{(entry.second as SolverValue).type.name}"),
          List.empty<SolverType>(),
        ),
      )
    }
    let virtualRules = canonicalConditions
      .map<SolverGoal>({ it.substituteAll(canonicalToVirtual) })
      .map<SolverRule>({ SolverRule(HirImpl(virtualModule, 0), it, List.empty<SolverGoal>()) })

    let newRules = (rules as Iterable<SolverRule>).followedBy(virtualRules).toList()
    Solver(newRules, MutableMap.empty<SolverGoal, SolverTree>())
      .solve(goal.substituteAll(canonicalToVirtual))
  }

  fun toString_(): String {
    mut let s = "Environment("
    for rule in rules {
      s = "{s}\n  {rule.toString_()}"
    }
    s = "{s}\n)"
    s
  }
}


trait /* enum */ SolverSolution {
  fun toString_(): String
}

class SolverSolutionUnique {
  /// Indicates that there is exactly one type that can fulfill the goal.

  let refinedGoal: SolverGoal
  let usedRule: SolverRule

  fun toString_(): String { "Unique({refinedGoal.toString_()})" }
}
impl SolverSolutionUnique: SolverSolution

class SolverSolutionAmbiguous {
  /// Indicates that there may be multiple types that can fulfill the goal.

  fun toString_(): String { "Ambiguous" }
}
impl SolverSolutionAmbiguous: SolverSolution

class SolverSolutionImpossible {
  /// Indicates that it's impossible to fulfill the goal.

  fun toString_(): String { "Impossible" }
}
impl SolverSolutionImpossible: SolverSolution


class Solver {
  let rules: List<SolverRule>

  let cache: MutableMap<SolverGoal, SolverTree>
  /// Map that allows us to detect cycles and resolve them.
  ///
  /// It's also good for performance. For example, when checking whether `Clone(Tuple<Int, Int>)`,
  /// it doesn't make sense to prove `Clone(Int)` twice.

  fun solve(goal: SolverGoal): SolverSolution {
    let goal = goal.canonicalize()
    cache
      .putIfAbsent(goal, {
        SolverTree(goal, None<SolverSolution>(), false, MutableList.empty<SolverStrand>())
      })
      .solve(this)
  }
}

class SolverTree {
  let goal: SolverGoal
  mut let solution: Maybe<SolverSolution>
  mut let isCurrentlyBeingSolved: Bool
  let strands: MutableList<SolverStrand>

  fun solve(context: Solver): SolverSolution {
    if solution is Some { return solution.unwrap() }
    if isCurrentlyBeingSolved {
      solution = Some<SolverSolution>(SolverSolutionAmbiguous())
      isCurrentlyBeingSolved = false
      return solution.unwrap()
    }
    isCurrentlyBeingSolved = true
    strands.appendAll(
      (context.rules as Iterable<SolverRule>)
        .where({ it.goal.unify(goal) is Some })
        .map<SolverStrand>({
          let result = it.goal.unify(goal).unwrap()
          SolverStrand(
            it,
            it.goal.substituteAll(result),
            result.toMutable(),
            (it.subgoals as Iterable<SolverGoal>)
              .map<SolverGoal>({ it.substituteAll(result) })
              .toMutableList(),
          )
        })
    )
    let strandsAndSolutions = (strands as Iterable<SolverStrand>)
      .map<(SolverStrand, SolverSolution)>({ Tuple(it, it.solve(context)) })
      .where({ !(it.second is SolverSolutionImpossible) })
      .toList()
    if (strandsAndSolutions as Iterable).length() > 1 {
      return SolverSolutionAmbiguous()
    }
    if (strandsAndSolutions as Iterable).isEmpty() {
      return SolverSolutionImpossible()
    }
    let strandAndSolution = (strandsAndSolutions as Iterable<(SolverStrand, SolverSolution)>)
      .single()
      .unwrap()
    let strand = strandAndSolution.first
    let solution = strandAndSolution.second
    if solution is SolverSolutionAmbiguous {
      return SolverSolutionAmbiguous()
    }
    let solution = (solution as SolverSolutionUnique)
    let substitutions = strand.goal.unify(solution.refinedGoal).unwrap()
    let refinedGoal = goal.substituteAll(substitutions)
    SolverSolutionUnique(refinedGoal, solution.usedRule)
  }
}

class SolverStrand {
  /// A thread exploring possible solutions.

  let usedRule: SolverRule
  let goal: SolverGoal
  let solutionSpace: MutableMap<SolverVariable, SolverType>
  let subgoals: MutableList<SolverGoal>

  fun solve(context: Solver): SolverSolution {
    while (subgoals as Iterable<SolverGoal>).isNotEmpty() {
      let subgoal = subgoals.removeFirst().canonicalize()
      let solution = context.solve(subgoal)
      if solution is SolverSolutionImpossible { return SolverSolutionImpossible() }
      if solution is SolverSolutionUnique {
        // Integrate the solution into the solution space.
        let refinedGoal = (solution as SolverSolutionUnique).refinedGoal
        let substitutions = subgoal.unify(refinedGoal).unwrap()
        for substitution in substitutions.entries() {
          let variable = substitution.first
          let type = substitution.second
          let sub = (solutionSpace as Map<SolverVariable, SolverType>).get(variable)
          if sub is None {
            solutionSpace.set(variable, type)
          } else {
            let newSubstitutions = sub.unwrap().unify(type)
            if newSubstitutions is None {
              return SolverSolutionImpossible()
            }
            solutionSpace.updateAll({ it.substituteAll(newSubstitutions.unwrap()) })
          }
        }
      }
    }
    SolverSolutionUnique(goal.substituteAll(solutionSpace), usedRule)
  }
}
