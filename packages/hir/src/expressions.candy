use ..declarations
use ..types

public class HirValueExpressionUri {
  public let declaration: HirFunction
  public let index: Int
}
impl HirValueExpressionUri: Equals & Hash {
  fun equals(other: This): Bool {
    (declaration as Equals) == (other.declaration as Equals)
      && (index as Equals) == (other.index as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    declaration.hash<T>(hasher)
    index.hash<T>(hasher)
  }
}
public trait HirValueExpression {}
impl HirValueExpression: Equals & Hash

/// A placeholder for an expression that couldn't be lowered.
public class HirErrorValueExpression {}
impl HirErrorValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { true }
  fun hash<T>(hasher: Hasher<T>) {}
}

/// An `Int` literal.
///
/// Examples:
///
/// * `12`
/// * `42`
public class HirIntValueExpression {
  public let value: Int
}
impl HirIntValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { (value as Equals) == (other.value as Equals) }
  fun hash<T>(hasher: Hasher<T>) { value.hash<T>(hasher) }
}

/// A simple `String` literal. Interpolated `String`s are already split up into more complex
/// expressions in the HIR.
///
/// Example: `"Hello, world!"`
public class HirStringValueExpression {
  public let value: String
}
impl HirStringValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { (value as Equals) == (other.value as Equals) }
  fun hash<T>(hasher: Hasher<T>) { value.hash<T>(hasher) }
}

/// A lambda expression.
///
/// Examples:
///
/// * `{ print("Hi!") }`
/// * `{ a, b -> a + b }`
public class HirLambdaValueExpression {
  public let parameters: List<HirLambdaParameter>
  public let expressions: List<HirValueExpressionUri>
}
impl HirLambdaValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (parameters as Iterable<HirLambdaParameter>).unsafeEquals(other.parameters)
      && (expressions as Iterable<HirValueExpressionUri>).unsafeEquals(other.expressions)
  }
  fun hash<T>(hasher: Hasher<T>) {
    parameters.unsafeHash<T>(hasher)
    expressions.unsafeHash<T>(hasher)
  }
}
public class HirLambdaParameter {
  public let name: String
  public let type: HirInlineType
}
impl HirLambdaParameter: Equals & Hash {
  fun equals(other: This): Bool {
    (name as Equals) == (other.name as Equals) && (type as Equals) == (other.type as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    name.hash<T>(hasher)
    (type as Hash).hash<T>(hasher)
  }
}

/// A this expression.
///
/// Example: `This` (and this is the only example)
public class HirThisValueExpression {
  public let type: HirInlineType
}
impl HirThisExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { (type as Equals) == (other.type as Equals) }
  fun hash<T>(hasher: Hasher<T>) { (type as Hash).hash<T>(hasher) }
}

/// An expression that references a local property.
///
/// This already abstracts from the name of the property and only has its uri â€“ basically, it's a
/// direct pointer to the right side of a `let foo = ...` expression.
///
/// Example:
///
/// ```
/// let a = 5
/// a + 8 # The `a` becomes a HirLocalPropertyReferenceValueExpression
/// ```
public class HirLocalPropertyReferenceValueExpression {
  public let value: HirValueExpressionUri
}
impl HirLocalPropertyReferenceExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { (target as Equals) == (other.target as Equals) }
  fun hash<T>(hasher: Hasher<T>) { target.hash<T>(hasher) }
}

/// An expression that references a parameter.
///
/// Example:
///
/// ```
/// fun foo {
///   a # The `a` becomes a HirParameterReferenceValueExpression
/// }
/// ```
public class HirParameterReferenceValueExpression {
  public let name: String
}
impl HirParameterReferenceValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { (name as Equals) == (other.name as Equals) }
  fun hash<T>(hasher: Hasher<T>) { name.hash<T>(hasher) }
}

/// A function call expression.
///
/// Examples:
///
/// * `foo()`
/// * `foo.bar()` (the whole `.bar()` is one expression with `foo` as the receiver)
public class HirFunctionCallValueExpression {
  public let receiver: Maybe<HirValueExpressionUri | HirTypeExpression>
  public let function: HirFunction
  public let typeArguments: Map<String, HirInlineType>
  public let valueArguments: Map<String, HirValueExpressionUri>
}
impl HirFunctionCallExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (receiver as Equals) == (other.receiver as Equals)
      && (function as Equals) == (other.function as Equals)
      && (typeArguments as Iterable<HirInlineType>).unsafeEquals(other.typeArguments)
      && (valueArguments as Iterable<HirValueExpressionUri>).unsafeEquals(other.valueArguments)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (receiver as Hash).hash<T>(hasher)
    (function as Hash).hash<T>(hasher)
    (typeArguments as Hash).hash<T>(hasher)
    (valueArguments as Hash).hash<T>(hasher)
  }
}

/// An expression call expression.
///
/// Example:
///
/// * `{ print("Hello!") }()`
/// * ```
///   let a = { ... }
///   a()
///   ```
public class HirValueExpressionCallValueExpression {
  public let receiver: HirValueExpressionUri
  public let typeArguments: List<HirInlineType>
  public let valueArguments: List<HirValueExpressionUri>
}
impl HirValueExpressionCallValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (receiver as Equals) == (other.receiver as Equals)
      && (typeArguments as Iterable<HirInlineType>).unsafeEquals(other.typeArguments)
      && (valueArguments as Iterable<HirValueExpressionUri<HirValueExpression>>).unsafeEquals(other.valueArguments)
  }
  fun hash<T>(hasher: Hasher<T>) {
    receiver.hash<T>(hasher)
    typeArguments.unsafeHash<T>(hasher)
    valueArguments.unsafeHash<T>(hasher)
  }
}

/// A type instantiation expression.
///
/// Examples:
///
/// * `Foo()`
/// * `Bar[Blub](foo, something)`
public class HirTypeInstantiationValueExpression {
  public let receiver: HirInlineType
  public let typeArguments: Map<String, HirType>
  public let valueArgument: HirValueExpressionUri
}
impl HirTypeInstantiationValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (receiver as Equals) == (other.receiver as Equals)
      && typeArguments.unsafeEquals(other.typeArguments)
      && (valueArgument as Equals) == (other.valueArgument as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    receiver.hash<T>(hasher)
    typeArguments.unsafeHash<T>(hasher)
    valueArgument.hash<T>(hasher)
  }
}

/// A named tuple expression.
/// Non-named tuples like `("Bar", 42)` automatically get lowered to named tuples like
/// `(first: "Bar", second: 42)`.
///
/// Example: `(foo: "Bar", baz: 42)`
public class HirNamedTupleValueExpression {
  public let valueArguments: Map<String, HirValueExpressionUri>
}
impl HirNamedTupleValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool { valueArguments.unsafeEquals(other.valueArguments) }
  fun hash<T>(hasher: Hasher<T>) { valueArguments.unsafeHash<T>(hasher) }
}

/// An access of a named tuple's field.
///
/// Examples:
///
/// * `foo.bar`
/// * `foo.baz`
public class HirNamedTupleFieldAccessValueExpression {
  public let receiver: HirValueExpressionUri
  public let name: String
}
impl HirNamedTupleFieldAccessValueExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (uri as Equals) == (other.uri as Equals)
      && (receiver as Equals) == (other.receiver as Equals)
      && (name as Equals) == (other.name as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    uri.hash<T>(hasher)
    receiver.hash<T>(hasher)
    name.hash<T>(hasher)
  }
}

/// A return expression.
///
/// Example:
///
/// * `return "Foo"`
/// * `return@blub 5`
/// * `return`
// TODO: For now, returns always return to the surrounding function.
public class HirReturnValueExpression {
  public let scope: HirFunction
  public let expression: HirValueExpressionUri
}
impl HirReturnExpression: HirValueExpression & Equals & Hash {
  fun equals(other: This): Bool {
    (scope as Equals) == (other.scope as Equals)
      && (expression as Equals) == (other.expression as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (scope as Hash).hash<T>(hasher)
    expression.hash<T>(hasher)
  }
}

// Non-value expressions:

/// An expression that references a type.
///
/// Examples:
///
/// * `Foo`
/// * `List[Int]`
public trait HirTypeExpression {
  public let type: HirInlineType
}
impl HirTypeExpression: Equals & Hash {
  fun equals(other: This): Bool { (type as Equals) == (other.type as Equals) }
  fun hash<T>(hasher: Hasher<T>) { type.hash<T>(hasher) }
}

/// An expression that references a module.
///
/// Examples:
///
/// * `Core`
/// * `GitHub`
public trait HirModuleExpression {
  public let moduleHir: HirModule
}
impl HirModuleExpression: Equals & Hash {
  fun equals(other: This): Bool { (moduleHir as Equals) == (other.moduleHir as Equals) }
  fun hash<T>(hasher: Hasher<T>) { moduleHir.hash<T>(hasher) }
}
