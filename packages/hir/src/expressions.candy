use ..declarations
use ..types

public data class HirExpressionUri<E: HirExpression> {
  public let declaration: HirConstructor | HirFunction
  public let index: Int
}


public trait HirExpression {
  public let uri: HirExpressionUri<HirExpression>
}


public class HirIntExpression {
  public let uri: HirExpressionUri<HirIntExpression>
  public let value: Int
}
impl HirIntExpression: HirExpression


public class HirStringExpression {
  public let uri: HirExpressionUri<HirStringExpression>
  public let parts: List<HirStringPart>
}
impl HirStringExpression: HirExpression

trait /* enum */ HirStringPart

public class HirLiteralStringPart {
  public let value: String
}
impl HirLiteralStringPart: HirStringPart

public class HirInterpolatedStringPart {
  public let value: HirExpressionUri<HirExpression>
}
impl HirInterpolatedStringPart: HirStringPart


public class HirLambdaExpression {
  public let uri: HirExpressionUri<HirLambdaExpression>
  public let parameters: List<HirLambdaParameter>
  public let expressions: List<HirExpressionUri<HirExpression>>
  public let returnType: HirType
  public let receiverType: Maybe<HirType>
}
impl HirLambdaExpression: HirExpression

public class HirLambdaParameter {
  public let name: String
  public let type: HirType
}


public class HirThisExpression {
  public let uri: HirExpressionUri<HirThisExpression>
  public let type: HirType
}
impl HirThisExpression: HirExpression

public class HirSuperExpression {
  public let uri: HirExpressionUri<HirSuperExpression>
  public let type: HirNamedType
}
impl HirSuperExpression: HirExpression


public class HirReflectionExpression<
  Target: HirModule | HirTrait | HirType | HirFunction | HirParameterType
> {
  public let uri: HirExpressionUri<HirReflectionExpression<Target>>
  public let target: Target
}
impl HirReflectionExpression: HirExpression

public class HirParameterReferenceExpression {
  public let uri: HirExpressionUri<HirParameterReferenceExpression>
  public let scope: HirFunction | HirExpressionUri<HirLambdaExpression>
  public let name: String
}
impl HirParameterReferenceExpression: HirExpression

public class HirFunctionReferenceExpression {
  public let uri: HirExpressionUri<HirFunctionReferenceExpression>
  public let target: HirFunction
}
impl HirFunctionReferenceExpression: HirExpression


public class HirLocalPropertyExpression {
  public let uri: HirExpressionUri<HirLocalPropertyExpression>
  public let name: String
  public let type: HirType
  public let initializer: HirExpressionUri<HirExpression>
  public let isMutable: Bool
}
impl HirLocalPropertyExpression: HirExpression

public class HirLocalPropertyReferenceExpression {
  public let uri: HirExpressionUri<HirLocalPropertyReferenceExpression>
  public let target: HirExpressionUri<HirLocalPropertyExpression>
}
impl HirLocalPropertyReferenceExpression: HirExpression


public class HirNavigationExpression {
  public let uri: HirExpressionUri<HirNavigationExpression>
  public let receiver: HirExpressionUri<HirExpression>
  public let target: HirFunction
}
impl HirNavigationExpression: HirExpression


public class HirFunctionCallExpression {
  public let uri: HirExpressionUri<HirFunctionCallExpression>
  public let receiver: HirExpressionUri<
    HirFunctionReferenceExpression | HirReflectionExpression<HirFunction>
  >
  public let typeArguments: Map<String, HirType>
  public let valueArguments: Map<String, HirExpressionUri<HirExpression>>
}
impl HirFunctionCallExpression: HirExpression

public class HirExpressionCallExpression {
  public let uri: HirExpressionUri<HirExpressionCallExpression>
  public let receiver: HirExpressionUri<HirExpression>
  public let valueArguments: List<HirExpressionUri<HirExpression>>
}
impl HirExpressionCallExpression: HirExpression

public class HirConstructorCallExpression {
  public let uri: HirExpressionUri<HirConstructorCallExpression>
  public let receiver: HirExpressionUri<HirReflectionExpression<HirType>>
  public let constructor: HirConstructor
  public let typeArguments: Map<String, HirType>
  public let valueArguments: Map<String, HirExpressionUri<HirExpression>>
}
impl HirConstructorCallExpression: HirExpression

public class HirTupleExpression {
  public let uri: HirExpressionUri<HirTupleExpression>
  public let valueArguments: List<HirExpressionUri<HirExpression>>
}
impl HirTupleExpression: HirExpression

public class HirReturnExpression {
  public let uri: HirExpressionUri<HirReturnExpression>
  public let scope: HirFunction | HirExpressionUri<HirLambdaExpression>
  public let expression: HirExpressionUri<HirExpression>
}
impl HirReturnExpression: HirExpression


public class HirAssignmentExpression {
  public let uri: HirExpressionUri<HirAssignmentExpression>
  public let target: HirExpressionUri<HirLocalPropertyReferenceExpression>
  public let value: HirExpressionUri<HirExpression>
}
impl HirAssignmentExpression: HirExpression
