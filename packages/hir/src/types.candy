use compiler_utils
use incremental

use ..declarations

public trait HirInlineType: Equals & Hash


public class HirErrorType {}
impl HirErrorType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool { true }
  fun hash<T>(hasher: Hasher<T>) {}
}


public class HirNamedType {
  public let declaration: HirTrait | HirType
  public let parameterTypes: List<HirInlineType>

  static fun coreInt(context: QueryContext<List<CompilerError>>): HirNamedType {
    HirNamedType(HirType.coreInt(context), List.empty<HirInlineType>())
  }
  static fun coreNever(context: QueryContext<List<CompilerError>>): HirNamedType {
    HirNamedType(HirType.coreNever(context), List.empty<HirInlineType>())
  }
  static fun coreNothing(context: QueryContext<List<CompilerError>>): HirNamedType {
    HirNamedType(HirType.coreNothing(context), List.empty<HirInlineType>())
  }
  static fun coreString(context: QueryContext<List<CompilerError>>): HirNamedType {
    HirNamedType(HirType.coreString(context), List.empty<HirInlineType>())
  }
}
impl HirNamedType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    declaration == other.declaration
      && (parameterTypes as Iterable<HirInlineType>)
        .unsafeEquals(other.parameterTypes as Iterable<HirInlineType>)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (declaration as Hash).hash<T>(hasher)
    parameterTypes.unsafeHash<T>(hasher)
  }
}


public class HirFunctionType {
  public let receiverType: Maybe<HirInlineType>
  public let parameterTypes: List<HirInlineType>
  public let returnType: HirInlineType
}
impl HirFunctionType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (receiverType as Equals) == (other.receiverType as Equals)
      && (parameterTypes as Iterable<HirInlineType>)
        .unsafeEquals(other.parameterTypes as Iterable<HirInlineType>)
      && (returnType as Equals) == (other.returnType as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (receiverType as Hash).hash<T>(hasher)
    parameterTypes.unsafeHash<T>(hasher)
    (returnType as Hash).hash<T>(hasher)
  }
}


public class HirTupleType {
  public let types: List<HirInlineType>

  public static let fieldNames = List.of10<String>(
    "first",
    "second",
    "third",
    "fourth",
    "fifth",
    "sixth",
    "seventh",
    "eight",
    "nineth",
    "tenth",
  )
}
impl HirTupleType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (types as Iterable<HirInlineType>).unsafeEquals(other.types as Iterable<HirInlineType>)
  }
  fun hash<T>(hasher: Hasher<T>) { types.unsafeHash<T>(hasher) }
}


public class HirNamedTupleType {
  public let types: List<(String, HirInlineType)>
}
impl HirNamedTupleType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (types as Iterable<(String, HirInlineType)>)
      .unsafeEquals(other.types as Iterable<(String, HirInlineType)>)
  }
  fun hash<T>(hasher: Hasher<T>) { types.unsafeHash<T>(hasher) }
}


public class HirEnumType {
  public let variants: Map<String, Maybe<HirInlineType>>
}
impl HirEnumType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool { variants.unsafeEquals(other.variants) }
  fun hash<T>(hasher: Hasher<T>) { variants.unsafeHash<T>(hasher) }
}


public class HirIntersectionType {
  public let types: List<HirInlineType>
  // TODO(JonasWanke): Use a `Set<HirInlineType>` when we have sets that keep insertion order.
}
impl HirIntersectionType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (types as Iterable<HirInlineType>).unsafeEquals(other.types as Iterable<HirInlineType>)
  }
  fun hash<T>(hasher: Hasher<T>) { types.unsafeHash<T>(hasher) }
}


public class HirThisType
impl HirThisType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool { true }
  fun hash<T>(hasher: Hasher<T>) {}
}


public class HirParameterType {
  public let declaration: HirTrait | HirImpl | HirType | HirFunction
  public let name: String
}
impl HirParameterType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (declaration as Equals) == other.declaration && name == other.name
  }
  fun hash<T>(hasher: Hasher<T>) {
    (declaration as Hash).hash<T>(hasher)
    name.hash<T>(hasher)
  }
}


public class HirReflectionType {
  public let target: HirModule | HirTrait | HirType | HirFunction | HirParameterType
}
impl HirReflectionType: HirInlineType & Equals & Hash {
  fun equals(other: This): Bool { (target as Equals) == (other.target as Equals) }
  fun hash<T>(hasher: Hasher<T>) { (target as Hash).hash<T>(hasher) }
}
