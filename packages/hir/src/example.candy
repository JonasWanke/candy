use ast
use compiler_utils
use incremental

use ..declarations
use ..file
use ..lowering

fun main() {
  let context = QueryContext.create<List<CompilerError>>()
  print("Core package path is {getCorePath(context)}.")

  declarationsExample(context)
  useLinesExample(context)
}

fun declarationsExample(context: QueryContext<List<CompilerError>>) {
  print("Declarations Example")
  let file = FancyFile(Package.core(context), Path.parse("src/module.candy"))

  let moduleHir = fileToHirModule(context, file)
  print("Module is {moduleHir}")

  let declarations = (moduleHir as HasDeclarations).declarations(context)
  print("Declarations are {declarations}")

  let primitives = HirInnerModule(moduleHir, "Primitives").declarations(context)
  print("Primitives are {primitives}")
}

fun useLinesExample(context: QueryContext<List<CompilerError>>) {
  print("Use-Lines Example")
  let file = FancyFile(Package.playground(context), Path.parse("src/UseLines/module.candy"))
  let moduleHir = fileToHirModule(context, file)
  for useLine in moduleHir.useLines(context) {
    print("Use line {useLine}: targetModule = {useLine.targetModule(context)}")
  }
}
