use ast
use compiler_utils
use cst
use incremental

use ..declarations
use ..file
use ..lowering
use ..types

fun main() {
  let context = QueryContext.create<List<CompilerError>>()
  print("Core package path is {getCorePath(context)}.")

  //declarationsExample(context)
  //useLinesExample(context)
  //resolvingExample(context)
  solverExample(context)
}

fun declarationsExample(context: QueryContext<List<CompilerError>>) {
  print("Declarations Example")
  let file = FancyFile(Package.core(context), Path.parse("src/.candy"))

  let moduleHir = fileToHirModule(context, file)
  print("Module is {moduleHir}")

  let declarations = (moduleHir as HasDeclarations).declarations(context)
  print("Declarations are {declarations}")

  let primitives = HirInnerModule(moduleHir, "Primitives").declarations(context)
  print("Primitives are {primitives}")
}

fun useLinesExample(context: QueryContext<List<CompilerError>>) {
  print("Use-Lines Example")
  let file = FancyFile(Package.playground(context), Path.parse("src/UseLines/.candy"))
  let moduleHir = fileToHirModule(context, file)
  for useLine in moduleHir.useLines(context) {
    print("Use line {useLine}: targetModule = {useLine.targetModule(context)}")
  }
}

fun resolvingExample(context: QueryContext<List<CompilerError>>) {
  print("Resolving Example")
  let file = FancyFile(Package.core(context), Path.parse("src/.candy"))
  let ast = fileToHirModule(context, file).innerModule("Primitives").astDeclarations(context)
  print("AST primitives: {ast}")
  let primitives = fileToHirModule(context, file).innerModule("Primitives").declarations(context)
  let any = (primitives as Iterable<HirDeclaration>).first().unwrap()
  let never = resolveIdentifier(context, "Never", any)
  print("Candidates for Never: {never}")
}

fun solverExample(context: QueryContext<List<CompilerError>>) {
  let playground = Package.playground(context)
  let file = FancyFile(playground, Path.parse("src/Types.candy"))
  let declarations = ((fileToHirModule(context, file) as HirInnerModule).declarations(context) as Iterable<HirDeclaration>)
  print("Declarations are {declarations}.")
  print("")
  let anImpl = (declarations.get(5).unwrap() as HirImpl)
  let rule = hirImplToSolverRule(context, anImpl)
  if (rule is None) {
    print("Couldn't lower impl to rule.")
  } else {
    print("The rule is {rule.unwrap().toString_()}.")
  }

  print("Declarations: {declarations}")

  let foo = HirNamedType(declarations.get(0).unwrap() as HirTrait | HirType, List.empty<HirInlineType>())
  let a = HirNamedType(declarations.get(1).unwrap() as HirTrait | HirType, List.empty<HirInlineType>())
  let mapAA = HirNamedType(declarations.get(3).unwrap() as HirTrait | HirType, List.of2<HirInlineType>(a, a))

  let theImpl = implFor(context, foo as HirInlineType, mapAA as HirInlineType, playground)
  print("The impl: {theImpl}")

  print("")
  print("Environment:")
  print(getSolverEnvironmentOfScope(context, playground).toString_())
  // print("Does {type.toString_()} implement Equals? {environment.solve(equalsImpl(type)).toString_()}")
  print("")
  print("Outputs:")
  for queryOutputs in context.outputs().entries() {
    let queryName = queryOutputs.first
    let inputsToErrors = queryOutputs.second
    for entry in inputsToErrors.entries() {
      let input = entry.first
      let errors = entry.second
      for error in errors {
        print("{queryName}({input}): {error}")
      }
    }
  }
}
