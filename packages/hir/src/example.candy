use ast
use compiler_utils
use incremental

use ..declarations
use ..file
use ..lowering

fun main() {
  let context = QueryContext.create<List<CompilerError>>()
  print("Core package path is {getCorePath(context)}.")

  declarationsExample(context)
  useLinesExample(context)
  resolvingExample(context)
}

fun declarationsExample(context: QueryContext<List<CompilerError>>) {
  print("Declarations Example")
  let file = FancyFile(Package.core(context), Path.parse("src/.candy"))

  let moduleHir = fileToHirModule(context, file)
  print("Module is {moduleHir}")

  let declarations = (moduleHir as HasDeclarations).declarations(context)
  print("Declarations are {declarations}")

  let primitives = HirInnerModule(moduleHir, "Primitives").declarations(context)
  print("Primitives are {primitives}")
}

fun useLinesExample(context: QueryContext<List<CompilerError>>) {
  print("Use-Lines Example")
  let file = FancyFile(Package.playground(context), Path.parse("src/UseLines/.candy"))
  let moduleHir = fileToHirModule(context, file)
  for useLine in moduleHir.useLines(context) {
    print("Use line {useLine}: targetModule = {useLine.targetModule(context)}")
  }
}

fun resolvingExample(context: QueryContext<List<CompilerError>>) {
  print("Resolving Example")
  let file = FancyFile(Package.core(context), Path.parse("src/.candy"))
  let ast = fileToHirModule(context, file).innerModule("Primitives").astDeclarations(context)
  print("AST primitives: {ast}")
  let primitives = fileToHirModule(context, file).innerModule("Primitives").declarations(context)
  let any = (primitives as Iterable<HirDeclaration>).first().unwrap()
  let never = "Never".resolveIdentifier(context, any)
  print("Candidates for Never: {never}")
}
