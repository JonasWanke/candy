use ast
use compiler_utils
use incremental

use ..types
use ...declarations
use ...types

// These impls make declarative information from the AST available in the HIR.

trait MightNotExist {
  fun doesExist(context: QueryContext<List<CompilerError>>): Bool
}
trait HasAst<Ast> {
  fun ast(context: QueryContext<List<CompilerError>>): Ast
}
trait CanBeStatic {
  fun isStatic(context: QueryContext<List<CompilerError>>): Bool
}

fun fileToHirModule(context: QueryContext<List<CompilerError>>, file: FancyFile): HirModule {
  // TODO(marcelgarus): Implement this as a static function on `HirModule` (`HirModule fromFile`) as
  // soon as adding static functions through impls works.

  query<HirModule, List<CompilerError>>(context, "HirModule.fromFile", (file as Equals & Hash), {
    mut let path = file.path
    if path.baseNameWithoutExtension() == ".candy" {
      path = path.parent().unwrap()
    }
    let module = ((if path.parent() is None {
      HirTopLevelModule(file.package)
    } else {
      fileToHirModule(context, FancyFile(file.package, path.parent().unwrap()))
        .innerModule(path.baseNameWithoutExtension())
    }) as HirModule)
    Tuple(module, List.empty<CompilerError>())
  })
}

trait HasPackageAndPath {
  fun package(): Package
  fun path(): List<String>
}
impl HirModule: HasPackageAndPath {
  fun package(): Package
  fun path(): List<String>
}
impl HirTopLevelModule: HasPackageAndPath {
  fun package(): Package { parent }
  fun path(): List<String> { List.empty<String>() }
}
impl HirInnerModule: HasPackageAndPath {
  fun package(): Package { parent.package() }
  fun path(): List<String> {
    (parent.path() as Iterable<String>).followedBy(List.of1<String>(name())).toList()
  }
}

public trait HasDeclarations {
  fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration>
  /// Returns the child declarations of this declaration.
  ///
  /// Note that some declarations can never have any child declarations (for example, functions or
  /// properties). These always return empty lists.

  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any>
  /// Getter for ast declarations, but type unsafe. Still useful if it's immediately followed by
  /// `whereType()`.
}
impl HirDeclaration: HasDeclarations

public trait HasTypeParameters {
  fun typeParameters(context: QueryContext<List<CompilerError>>): List<HirParameterType>
}
fun hirParameterTypesFromAstTypeParameters(
  declaration: HirTrait | HirImpl | HirType | HirFunction,
  typeParameters: List<AstTypeParameter>,
): List<HirParameterType> {
  (typeParameters as Iterable<AstTypeParameter>)
    .map<HirParameterType>({ HirParameterType(declaration, it.name.value) })
    .toList()
}

public trait HasVisibility {
  fun isPublic(context: QueryContext<List<CompilerError>>): Bool
}
public fun isPublicFromModifiers(modifiers: List<AstIdentifier>): Bool {
  // TODO(JonasWanke): This should resolve modifier names when we support custom annotations.
  (modifiers as Iterable<AstIdentifier>).any({ it.value == "public" })
}

// TODO(marcelgarus): `HirModule`s implement the `HasDeclarations` trait. Because the Dart lowering
// is weird, we can't just add impls to traits (they will be mixed in, but the subclasses only
// implement the trait, losing the specific implementation).
// So, we put the code of the impl into the following few functions, which are used by the concrete
// types `HirTopLevelModule` and `HirInnerModule`, passing themselves as parameters.

fun astOfModule(context: QueryContext<List<CompilerError>>, moduleHir: HirModule): Maybe<AstFile | AstModule> {
  /// Returns the ast of the given `moduleHir`, or `None` if it doesn't exist.
  
  query<Maybe<AstFile | AstModule>, List<CompilerError>>(context, "HirModule.ast", (moduleHir as Equals & Hash), {
    // These are all the ways that modules can be declared with decreasing priority:
    //
    // 1. By creating directories.
    // 2. By creating files.
    // 3. By creating inline modules.
    //
    // First, go into directories with correct names as long as possible. Then, look for a file with
    // the name of the next submodule, defaulting to module.candy if it doesn't exist. Finally, read
    // that file and find a inline module nested.

    let package = moduleHir.package()
    mut let segments = moduleHir.path() as Iterable<String>
    mut let path = Path.parse("src")

    // Follow the directory structure down as much as possible.
    while segments.isNotEmpty() {
      // TODO(marcelgarus): Move this into the while condition once the && is lazy.
      let newPath = path.child(segments.first().unwrap())
      let resolvedPath = FancyFile(package, newPath).getResolvedPath(context)
      if !Directory(resolvedPath).doesExist() { break unit }

      path = newPath
      segments = segments.skip(1)
    }

    // Choose the correct file, default to ".candy".
    //
    // TODO(marcelgarus): Inline the condition into the `if` once the && is lazy.
    mut let condition = segments.isNotEmpty()
    if condition {
      condition = FancyFile(package, path.child("{segments.first().unwrap()}.candy"))
        .doesExist(context)
    }
    if condition {
      path = path.child("{segments.first().unwrap()}.candy")
      segments = segments.skip(1)
    } else {
      path = path.child(".candy")
    }
    if !FancyFile(package, path).doesExist(context) {
      print("File at {path} doesn't exist.")
      return Tuple(None<AstFile | AstModule>(), List.empty<CompilerError>())
    }

    // TODO(marcelgarus): Navigate through the AST to find the inline `AstModule`.
    let ast = parseAstOfFile(context, FancyFile(package, path)).first
    if segments.isNotEmpty() {
      todo("Support getting the AST of inline modules.")
    }

    return Tuple(Some<AstFile | AstModule>(ast), List.empty<CompilerError>())
  })
}
fun astDeclarationsOfModule(
  context: QueryContext<List<CompilerError>>,
  module: HirModule,
): List<AstModule | AstTrait | AstImpl | AstType | AstFunction> {
  query<
    List<AstModule | AstTrait | AstImpl | AstType | AstFunction>,
    List<CompilerError>,
  >(context, "HirModule.astDeclarations", (module as Equals & Hash), {
    let ast = astOfModule(context, module)
    if ast is None<AstFile | AstModule> {
      return Tuple(
        List.empty<AstModule | AstTrait | AstImpl | AstType | AstFunction>(),
        List.empty<CompilerError>(),
      )
    }
    let ast = ast.unwrap()
    if (ast is AstFile) {
      return Tuple((ast as AstFile).declarations, List.empty<CompilerError>())
    }
    if (ast is AstModule) {
      return Tuple((ast as AstModule).innerDeclarations, List.empty<CompilerError>())
    }
    throw "Shouldn't reach this."
  })
}
fun declarationsOfModule(
  context: QueryContext<List<CompilerError>>,
  module: HirModule,
): List<HirDeclaration> {
  query<List<HirDeclaration>, List<CompilerError>>(
    context,
    "HirModule.declarations",
    module as Equals & Hash,
    {
      mut let implDisambiguator = 0
      mut let functionDisambiguator = 0
      let declarations = (astDeclarationsOfModule(context, module) as Iterable<AstModule | AstTrait | AstImpl | AstType | AstFunction>)
        .map<HirDeclaration>({
          if (it is AstModule) { return HirInnerModule(module, (it as AstModule).name.value) as HirDeclaration }
          if (it is AstTrait) {
            return HirTrait(module, (it as AstTrait).name.value) as HirDeclaration
          }
          if (it is AstImpl) {
            let impl_ = HirImpl(module, implDisambiguator)
            implDisambiguator = implDisambiguator + 1
            return impl_ as HirDeclaration
          }
          if (it is AstType) { return HirType(module, (it as AstType).name.value) as HirDeclaration }
          if (it is AstFunction) {
            let function = HirFunction(module, (it as AstFunction).name.value, functionDisambiguator)
            functionDisambiguator = functionDisambiguator + 1
            return function as HirDeclaration
          }
          throw "Shouldn't reach this."
        })
        .toList()
      Tuple(declarations, List.empty<CompilerError>())
    }
  )
}
impl HirModule: MightNotExist & HasAst<AstFile | AstModule> & HasDeclarations {
  fun doesExist(context: QueryContext<List<CompilerError>>): Bool
  fun ast(context: QueryContext<List<CompilerError>>): AstFile | AstModule
  fun astDeclarations(
    context: QueryContext<List<CompilerError>>,
  ): List<AstModule | AstTrait | AstImpl | AstType | AstFunction>
}
impl HirTopLevelModule: MightNotExist & HasAst<AstFile | AstModule> & HasDeclarations {
  fun doesExist(context: QueryContext<List<CompilerError>>): Bool {
    astOfModule(context, this) is Some<AstFile | AstModule>
  }
  fun ast(context: QueryContext<List<CompilerError>>): AstFile | AstModule {
    astOfModule(context, this).unwrap()
  }
  fun astDeclarations(
    context: QueryContext<List<CompilerError>>,
  ): List<AstModule | AstTrait | AstImpl | AstType | AstFunction> {
    astDeclarationsOfModule(context, this)
  }
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    astDeclarations(context) as List<Any>
  }
  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    declarationsOfModule(context, this)
  }
}
impl HirInnerModule: MightNotExist & HasAst<AstFile | AstModule> & HasDeclarations {
  fun doesExist(context: QueryContext<List<CompilerError>>): Bool {
    astOfModule(context, this) is Some<AstFile | AstModule>
  }
  fun ast(context: QueryContext<List<CompilerError>>): AstFile | AstModule {
    astOfModule(context, this).unwrap()
  }
  fun astDeclarations(
    context: QueryContext<List<CompilerError>>,
  ): List<AstModule | AstTrait | AstImpl | AstType | AstFunction> {
    astDeclarationsOfModule(context, this)
  }
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    astDeclarations(context) as List<Any>
  }
  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    declarationsOfModule(context, this)
  }
}

impl HirTrait: HasAst<AstTrait> & HasDeclarations & HasTypeParameters & HasVisibility {
  fun ast(context: QueryContext<List<CompilerError>>): AstTrait {
    query<AstTrait, List<CompilerError>>(context, "HirTrait.ast", this, {
      let ast = ((parent as HasDeclarations).typeUnsafeAstDeclarations(context) as Iterable<Any>)
        .whereType<AstTrait>()
        .where({ it.name.value == name_ })
        .single()
        .unwrap()
      Tuple(ast, List.empty<CompilerError>())
    })
  }

  fun astDeclarations(
    context: QueryContext<List<CompilerError>>
  ): List<AstTrait | AstType | AstFunction> {
    query<List<AstTrait | AstType | AstFunction>, List<CompilerError>>(
      context,
      "HirTrait.astDeclarations",
      this,
      { Tuple(ast(context).innerDeclarations, List.empty<CompilerError>()) },
    )
  }
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    astDeclarations(context) as List<Any>
  }

  public fun declarations(
    context: QueryContext<List<CompilerError>>,
  ): List<HirDeclaration> {
    query<List<HirDeclaration>, List<CompilerError>>(
      context,
      "HirTrait.declarations",
      this,
      {
      mut let functionDisambiguator = 0
      let declarations = (astDeclarations(context) as Iterable<AstTrait | AstType | AstFunction>)
        .map<HirDeclaration>({
          if (it is AstFunction) {
            let function = HirFunction(this, (it as AstFunction).name.value, functionDisambiguator)
            functionDisambiguator = functionDisambiguator + 1
            return (function as HirDeclaration)
          }
          throw "Shouldn't reach this."
        })
        .toList()
      Tuple(declarations, List.empty<CompilerError>())
      }
    )
  }

  fun typeParameters(context: QueryContext<List<CompilerError>>): List<HirParameterType> {
    query<List<HirParameterType>, List<CompilerError>>(context, "HirTrait.typeParameters", this, {
      Tuple(
        hirParameterTypesFromAstTypeParameters(this, ast(context).typeParameters),
        List.empty<CompilerError>(),
      )
    })
  }

  fun isPublic(context: QueryContext<List<CompilerError>>): Bool {
    query<Bool, List<CompilerError>>(context, "HirTrait.isPublic", this, {
      Tuple(isPublicFromModifiers(ast(context).modifiers), List.empty<CompilerError>())
    })
  }
}

impl HirImpl: HasAst<AstImpl> & HasDeclarations & HasTypeParameters {
  fun ast(context: QueryContext<List<CompilerError>>): AstImpl {
    query<AstImpl, List<CompilerError>>(context, "HirImpl.ast", this, {
      let ast = ((parent as HasDeclarations).typeUnsafeAstDeclarations(context) as Iterable<Any>)
        .whereType<AstImpl>()
        .get(disambiguator)
        .unwrap()
      Tuple(ast, List.empty<CompilerError>())
    })
  }

  fun astDeclarations(context: QueryContext<List<CompilerError>>): List<AstFunction> {
    query<List<AstFunction>, List<CompilerError>>(context, "HirImpl.astDeclarations", this, {
      Tuple(ast(context).innerDeclarations, List.empty<CompilerError>())
    })
  }
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    astDeclarations(context) as List<Any>
  }

  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    query<List<HirDeclaration>, List<CompilerError>>(context, "HirImpl.declarations", this, {
      mut let functionDisambiguator = 0
      let declarations = (ast(context).innerDeclarations as Iterable<AstFunction>)
        .map<HirDeclaration>({
          if (it is AstFunction) {
            let function = HirFunction(this, (it as AstFunction).name.value, functionDisambiguator)
            functionDisambiguator = functionDisambiguator + 1
            return (function as HirDeclaration)
          }
          throw "Shouldn't reach this."
        })
        .toList()
      Tuple(declarations, List.empty<CompilerError>())
    })
  }

  fun typeParameters(context: QueryContext<List<CompilerError>>): List<HirParameterType> {
    query<List<HirParameterType>, List<CompilerError>>(context, "HirImpl.typeParameters", this, {
      Tuple(
        hirParameterTypesFromAstTypeParameters(this, ast(context).typeParameters),
        List.empty<CompilerError>(),
      )
    })
  }

  fun isPublic(context: QueryContext<List<CompilerError>>): Bool {
    query<Bool, List<CompilerError>>(context, "HirImpl.isPublic", this, {
      Tuple(isPublicFromModifiers(ast(context).modifiers), List.empty<CompilerError>())
    })
  }
}

impl HirType: HasAst<AstType> & HasDeclarations & HasTypeParameters {
  fun ast(context: QueryContext<List<CompilerError>>): AstType {
    query<AstType, List<CompilerError>>(context, "HirType.ast", this, {
      let ast = ((parent as HasDeclarations).typeUnsafeAstDeclarations(context) as Iterable<Any>)
        .whereType<AstType>()
        .where({ it.name.value == name_ })
        .single()
        .unwrap()
      Tuple(ast, List.empty<CompilerError>())
    })
  }

  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    List.empty<Any>()
  }

  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    query<List<HirDeclaration>, List<CompilerError>>(
      context,
      "HirType.declarations",
      this,
      { Tuple(List.empty<HirDeclaration>(), List.empty<CompilerError>()) },
    )
  }

  fun typeParameters(context: QueryContext<List<CompilerError>>): List<HirParameterType> {
    query<List<HirParameterType>, List<CompilerError>>(context, "HirType.typeParameters", this, {
      Tuple(
        hirParameterTypesFromAstTypeParameters(this, ast(context).typeParameters),
        List.empty<CompilerError>(),
      )
    })
  }

  fun isPublic(context: QueryContext<List<CompilerError>>): Bool {
    query<Bool, List<CompilerError>>(context, "HirType.isPublic", this, {
      Tuple(isPublicFromModifiers(ast(context).modifiers), List.empty<CompilerError>())
    })
  }
}

impl HirFunction: HasAst<AstFunction> & HasDeclarations & CanBeStatic & HasTypeParameters {
  fun ast(context: QueryContext<List<CompilerError>>): AstFunction {
    query<AstFunction, List<CompilerError>>(context, "HirFunction.ast", this, {
      let ast = ((parent as HasDeclarations).declarations(context) as Iterable<Any>)
        .whereType<AstFunction>()
        .get(disambiguator)
        .unwrap()
      Tuple(ast, List.empty<CompilerError>())
    })
  }
  
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    List.empty<Any>()
  }
  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    List.empty<HirDeclaration>()
  }

  fun isStatic(context: QueryContext<List<CompilerError>>): Bool {
    query<Bool, List<CompilerError>>(context, "HirFunction.isStatic", this, {
      // TODO(JonasWanke): This should resolve modifier names when we support custom annotations.
      let modifiers = (ast(context).modifiers as Iterable<AstIdentifier>)
      Tuple(modifiers.any({ it.value == "static" }), List.empty<CompilerError>())
    })
  }

  fun typeParameters(context: QueryContext<List<CompilerError>>): List<HirParameterType> {
    query<List<HirParameterType>, List<CompilerError>>(context, "HirFunction.typeParameters", this, {
      Tuple(
        hirParameterTypesFromAstTypeParameters(this, ast(context).typeParameters),
        List.empty<CompilerError>(),
      )
    })
  }

  fun isPublic(context: QueryContext<List<CompilerError>>): Bool {
    query<Bool, List<CompilerError>>(context, "HirFunction.isPublic", this, {
      Tuple(isPublicFromModifiers(ast(context).modifiers), List.empty<CompilerError>())
    })
  }
}

impl HirConstructor: HasDeclarations {
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    List.empty<Any>()
  }
  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    List.empty<HirDeclaration>()
  }
}
