use ast
use compiler_utils
use incremental

use ...declarations
use ...types
use ...solver
use ..declarations
use ..resolving

/// These impls make type system information available.

impl HirReflectionType: HasDeclarations {
  fun typeUnsafeAstDeclarations(context: QueryContext<List<CompilerError>>): List<Any> {
    List.empty<Any>()
  }
  public fun declarations(context: QueryContext<List<CompilerError>>): List<HirDeclaration> {
    List.empty<HirDeclaration>()
  }
}

// TODO(marcelgarus): Convert this into extension methods on Ast as soon as impls for types from
// other packages work.
fun astInlineTypeToHirInlineType(
  context: QueryContext<List<CompilerError>>,
  astType: AstInlineType,
  scope: HirDeclaration,
): HirInlineType {
  query<HirInlineType, List<CompilerError>>(
    context,
    "astInlineTypeToHirInlineType",
    DataTuple2<AstInlineType, HirDeclaration>(astType, scope) as Equals & Hash,
    {
      if (astType is AstNamedType) {
        let nameParts = ((astType as AstNamedType).nameParts as Iterable<AstIdentifier>)
          .map<String>({ it.value })

        if ((nameParts as Iterable).length() == 1) {
          if (nameParts as Iterable<String>).first().unwrap() == "This" {
            if (scope is HirTrait || scope is HirImpl) {
              return Tuple(
                HirThisType(scope as HirTrait | HirImpl) as HirInlineType,
                List.empty<CompilerError>()
              )
            } else {
              return Tuple(
                HirErrorType() as HirInlineType,
                List.of1<CompilerError>(
                  ThisTypeCanOnlyBeUsedInImplOrTraitCompilerError((astType as AstNamedType), scope),
                ),
              )
            }
          }
        }

        // Try to find the first part of the `nameParts`. Then, find children inside its
        // declarations.
        // TODO(marcelgarus): When resolving `Foo Bar`, we currently accept a `Bar` next to `Foo` if
        // `Foo` itself doesn't contain a `Bar`, as the resolver traverses parent scopes.
        mut let candidates = resolveIdentifier(context, nameParts.first().unwrap(), scope)
        for namePart in nameParts.skip(1) {
          candidates = (candidates as Iterable<HirDeclaration>)
            .expand<HirModule | HirType | HirTrait | HirFunction | HirParameterType>({
              if (it is HirDeclaration) {
                resolveIdentifier(context, namePart, it).items()
              } else {
                List.empty<HirModule | HirType | HirTrait | HirFunction | HirParameterType>()
              }
            })
            .toSet()
        }
        let candidates = candidates.items()
          .where({ !(it is HirModule) })
          // This cast from `HirType | HirTrait | HirFunction | HirParameterType` to
          // `HirType | HirTrait | HirParameterType` succeeds because the name is uppercase, so no
          // functions get resolved.
          .cast<HirType | HirTrait | HirParameterType>()
          .toSet()

        // There should be exactly one candidate left.
        if (candidates.items() as Iterable).isEmpty() {
          return Tuple(
            HirErrorType() as HirInlineType,
            List.of1<CompilerError>(UnknownTypeCompilerError(astType as AstNamedType)),
          )
        }
        if (candidates.items() as Iterable).length() > 1 {
          return Tuple(
            HirErrorType() as HirInlineType,
            List.of1<CompilerError>(
              AmbiguousTypeCompilerError(
                candidates as Set<HirModule | HirType | HirTrait | HirParameterType>,
              ),
            ),
          )
        }
        let candidate = (candidates.items() as Iterable<HirType | HirTrait | HirParameterType>).single().unwrap()
        if (candidate is HirParameterType) {
          return Tuple(candidate as HirParameterType, List.empty<CompilerError>())
        }
        let declaration = (candidate as HirTrait | HirType)

        let types = ((astType as AstNamedType).typeArguments as Iterable<AstTypeArgument>)
          .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it.type, scope) })
          .toList()
        return Tuple(HirNamedType(declaration, types) as HirInlineType, List.empty<CompilerError>())
      }

      if (astType is AstFunctionType) {
        return Tuple(
          HirFunctionType(
            (astType as AstFunctionType).receiverType
              .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it, scope) }),
            ((astType as AstFunctionType).parameterTypes as Iterable<AstInlineType>)
              .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it, scope) })
              .toList(),
            astInlineTypeToHirInlineType(context, (astType as AstFunctionType).returnType, scope),
          ) as HirInlineType,
          List.empty<CompilerError>()
        )
      }

      if (astType is AstTupleType) {
        return Tuple(
          HirTupleType(
            ((astType as AstTupleType).types as Iterable<AstInlineType>)
              .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it, scope) })
              .toList(),
          ) as HirInlineType,
          List.empty<CompilerError>(),
        )
      }

      if (astType is AstNamedTupleType) {
        return Tuple(
          HirNamedTupleType(
            ((astType as AstNamedTupleType).types as Iterable<AstNamedTupleTypeField>)
              .map<(String, HirInlineType)>({
                Tuple(it.name.value, astInlineTypeToHirInlineType(context, it.type, scope))
              })
              .toList(),
          ) as HirInlineType,
          List.empty<CompilerError>(),
        )
      }

      if (astType is AstEnumType) {
        let loweredVariants = ((astType as AstEnumType).variants as Iterable<AstEnumTypeVariant>)
          .map<(String, Maybe<HirInlineType>)>({
            let valueType = it.valueType.map<HirInlineType>({ valueType =>
              astInlineTypeToHirInlineType(context, valueType, scope)
            })
            Tuple(it.name.value, valueType)
          })
          .toList()
        return Tuple(
          HirEnumType(
            (loweredVariants as Iterable<(String, Maybe<HirInlineType>)>)
              .unsafeToMap<String, Maybe<HirInlineType>>(),
          ) as HirInlineType,
          List.empty<CompilerError>(),
        )
      }

      if (astType is AstIntersectionType) {
        return Tuple(
          HirIntersectionType(
            ((astType as AstIntersectionType).types as Iterable<AstInlineType>)
              .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it, scope) })
              .toList(),
          ) as HirInlineType,
          List.empty<CompilerError>(),
        )
      }

      todo("Implement astInlineTypeToHirInlineType for {astType}")
    }
  )
}

impl HirParameterType {
  fun upperBound(context: QueryContext<List<CompilerError>>): Maybe<HirInlineType> {
    query<Maybe<HirInlineType>, List<CompilerError>>(
      context, "HirParameterType.upperBound", this as Equals & Hash, {
      Tuple(
        (((this.declaration as HasAst).ast(context) as AstWithTypeParameters)
          .typeParameters as Iterable<AstTypeParameter>)
          .singleWhere({ it.name.value == this.name })
          .flatMap<AstInlineType>({ it.upperBound })
          .map<HirInlineType>({ astInlineTypeToHirInlineType(context, it, this.declaration) }),
        List.empty<CompilerError>(),
      )
    })
  }
}

impl HirImpl {
  fun constraints(context: QueryContext<List<CompilerError>>): Map<HirParameterType, HirInlineType> {
    // The type constraints of an impl. For example, `impl[T: Equals] Foo[T]: Equals` has the
    // constraints `T: Equals`.

    query<Map<HirParameterType, HirInlineType>, List<CompilerError>>(
      context, "HirImpl.constraints", this as Equals & Hash, {
      Tuple(
        (this.typeParameters(context) as Iterable<HirParameterType>)
          .maybeMap<(HirParameterType, HirInlineType)>({
            it.upperBound(context).map<(HirParameterType, HirInlineType)>({
              upperBound => Tuple(it, upperBound)
            })
          })
          .unsafeToMap<HirParameterType, HirInlineType>(),
        List.empty<CompilerError>(),
      )
    })
  }

  fun baseType(context: QueryContext<List<CompilerError>>): HirInlineType {
    // The base type of an impl. For example, `impl Foo[Int]` has the base type `Foo[Int]`.

    query<HirInlineType, List<CompilerError>>(context, "HirImpl.baseType", this as Equals & Hash, {
      Tuple(
        astInlineTypeToHirInlineType(context, this.ast(context).type, this),
        List.empty<CompilerError>(),
      )
    })
  }

  fun implementedTrait(context: QueryContext<List<CompilerError>>): Maybe<HirInlineType> {
    // The implemented trait of this impl. For example, `impl Foo: Equals` implements trait
    // `Equals`, whereas `impl Foo { ... }` implements none.

    query<Maybe<HirInlineType>, List<CompilerError>>(context, "HirImpl.implementedTrait", this as Equals & Hash, {
      let traits = this.ast(context).traits
      if !((traits as Iterable).length() == 1) {
        // TODO(marcelgarus): Support impls for more than one trait.
        return Tuple(
          None<HirInlineType>(),
          List.empty<CompilerError>(
            // UnsupportedFeatureCompilerError(
            //   Location(, Span(0, 1)),
            //   "This impl is for more than one trait: {this}",
            // ),
          ),
        )
      }
      Tuple(
        Some<HirInlineType>(
          astInlineTypeToHirInlineType(
            context,
            (traits as Iterable).cast<AstInlineType>().single().unwrap(),
            // TODO(marcelgarus): Directly cast this into a `Iterable<AstInlineType>` when the Dart
            // type system gets good enough.
            this,
          ),
        ),
        List.empty<CompilerError>(),
      )
    })
  }
}

fun getAllImplsInScope(context: QueryContext<List<CompilerError>>, scope: Package): Set<HirImpl> {
  query<Set<HirImpl>, List<CompilerError>>(context, "getAllImplsInScope", scope as Equals & Hash, {
    let impls = (scope.getAllPackagesInCompilationOrder(context) as Iterable<Package>)
      .map<Set<HirImpl>>({ package => getAllImplsOfModule(context, HirTopLevelModule(package)) })
      .foldLeft<Set<HirImpl>>(Set.empty<HirImpl>(), { a, b => a.union(b) })
    Tuple(impls, List.empty<CompilerError>())
  })
}
fun getAllImplsOfModule(context: QueryContext<List<CompilerError>>, module: HirModule): Set<HirImpl> {
  query<Set<HirImpl>, List<CompilerError>>(context, "getAllImplsOfModule", module as Equals & Hash, {

    let declarations = (declarationsOfModule(context, module) as Iterable<HirDeclaration>)
    let impls = declarations
      .whereType<HirModule>()
      .expand<HirImpl>({ (getAllImplsOfModule(context, it) as Iterable<HirImpl>) })
      .followedBy(declarations.whereType<HirImpl>())
      .toSet()
    Tuple(impls, List.empty<CompilerError>())
  })
}

fun hirImplToSolverRule(
  context: QueryContext<List<CompilerError>>,
  hirImpl: HirImpl,
): Maybe<SolverRule> {
  query<Maybe<SolverRule>, List<CompilerError>>(
    context,
    "hirImplToSolverRule",
    hirImpl as Equals & Hash, {
    // Lower the constraints. For example, in the impl `impl[T: Equals] Foo[T]: Equals`, the
    // `solverConstraints` are a list containing `Equals(?T)`.
    let solverConstraints = MutableList.empty<SolverGoal>()
    for constraint in hirImpl.constraints(context).entries() {
      let result = hirInlineTypeToSolverTypeAndGoals(context, constraint.second)
      if (result is None) { return Tuple(None<SolverRule>(), List.empty<CompilerError>()) }
      solverConstraints.appendAll(
        (result.unwrap().second as Iterable<SolverGoal>)
          .map<SolverGoal>({
            it.substituteAll(
              Map.of1<SolverVariable, SolverType>(
                Tuple(
                  result.unwrap().first as SolverVariable,
                  // `constraints.first` is a `HirParameterType` and turning that into a
                  // `SolverType` always succeeds with an empty list of goals.
                  hirInlineTypeToSolverTypeAndGoals(context, constraint.first).unwrap().first,
                ),
              ),
            )
          })
          .toList()
      )
    }

    // Lower the base type. For example, in the impl `impl Iterable[Int]: Foo`, the base type
    // `Iterable[Int]` gets lowered to `?0` with the goal `Iterable(Int, ?0)`.
    let baseType = hirImpl.baseType(context)
    let solverBaseAndGoals = hirInlineTypeToSolverTypeAndGoals(context, baseType)
    if (solverBaseAndGoals is None) { return Tuple(None<SolverRule>(), List.empty<CompilerError>()) }
    let solverBaseAndGoals: (SolverType, List<SolverGoal>) = solverBaseAndGoals.unwrap()

    // Lower the trait. For example, in the impl `impl Foo: Iterable[Int]`, the implemented trait
    // `Iterable[Int]` gets lowered to `?0` with the goals `Iterable(Int, ?0)`. Impls that don't
    // implement a trait – like `impl Foo { ... }` – don't correspond to a `SolverRule` and cause
    // this function to return `None`.
    let traitType = hirImpl.implementedTrait(context)
    if (traitType is None) { return Tuple(None<SolverRule>(), List.empty<CompilerError>()) }
    if (traitType.unwrap() is HirErrorType) {
      return Tuple(None<SolverRule>(), List.empty<CompilerError>())
    }
    let traitType = (traitType.unwrap() as HirNamedType)
    let solverTraitAndGoals = hirInlineTypeToSolverTypeAndGoals(context, traitType)
    if (solverTraitAndGoals is None) { return Tuple(None<SolverRule>(), List.empty<CompilerError>()) }
    let solverTraitAndGoals: (SolverType, List<SolverGoal>) = solverTraitAndGoals.unwrap()
    if ((solverTraitAndGoals.second as Iterable).length() > 1) {
      // TODO(marcelgarus): We can't implement a trait that contains another trait yet, like
      // `Iterable<Equals>`. This does work in Rust (with boxing and explicit dynamism), so we'll
      // probably have to look at how to put general-purpose logic implications in our solver (like
      // `A B -> C D` instead of only having one implicative result like `A B -> C` in the solver).
      // Or we need to somehow reduce this to multiple simple rules.
      // For now, we're probably fine with only implementing "simple" traits like `Iterable<Int>`.
      // (As "primitive" types like `List` etc. are also traits, resolving this todo is somewhat of
      // a priority.)
      return Tuple(
        None<SolverRule>(),
        List.of1<CompilerError>(CannotImplementTraitOfTraitCompilerError(hirImpl)),
      )
    }
    assert((solverTraitAndGoals.second as Iterable).length() == 1, "Should never happen.")

    // Let's play this through for the impl `impl[T: Equals] Iterable[T]: Equals`.
    //
    // These would be the values calculated above:
    //
    // * `constraints`: list with goal `Equals(?T)`
    // * `solverBase`: type `?0` and goal `Iterable(?T, ?0)`
    // * `solverTrait`: type `?1` and goal `Equals(?1)`
    //
    // The goal that this impl wants to achieve can be calculated by taking the `solverTrait`, which
    // is guaranteed to have only one goal `Equals(?1)`, and replacing the `solverTrait`'s type `?1`
    // with the `solverBase` type `?0` – which results in `Equals(?0)`.
    // To achieve that goal, we have to satisfy the goals of the `solverBase` and the `constraints`.
    // So, our total `SolverRule` would look like this: `Equals(?0) <- Iterable(?T, ?0), Equals(?T)`
    Tuple(
      Some<SolverRule>(
        SolverRule(
          (solverTraitAndGoals.second as Iterable<SolverGoal>)
            .single()
            .unwrap() // We checked the length above.
            .substituteAll(
              Map.of1<SolverVariable, SolverType>(
                // We are sure that the solver trait got lowered to a `SolverVariable`.
                Tuple(solverTraitAndGoals.first as SolverVariable, solverBaseAndGoals.first),
              ),
            ),
          (solverBaseAndGoals.second as Iterable<SolverGoal>).followedBy(solverConstraints).toList(),
        ),
      ),
      List.empty<CompilerError>(),
    )
  })
}

fun hirInlineTypeToSolverTypeAndGoals(
  context: QueryContext<List<CompilerError>>,
  hirType: HirInlineType,
): Maybe<(SolverType, List<SolverGoal>)> {
  // Turns a `HirInlineType` into a `SolverType` and a list of `SolverGoal`s.
  //
  // Examples:
  //
  // * `Foo[Bar]` -> `Foo[Bar]` (but as a `SolverValue`)
  // * `T` -> `?T`
  // * `Equals` -> `?0` and goals `Equals(?0)`
  // * `Iterable[Equals]` -> `?0` and goals `Iterable(?1, ?0)`, `Equals(?1)`

  query<
    Maybe<(SolverType, List<SolverGoal>)>,
    List<CompilerError>,
  >(context, "hirInlineTypeToSolverTypeAndGoals", hirType as Equals & Hash, {
    if (hirType is HirErrorType) {
      return Tuple(None<(SolverType, List<SolverGoal>)>(), List.empty<CompilerError>())
    }
    if (hirType is HirNamedType) {
      let declaration = (hirType as HirNamedType).declaration
      let parameters = ((hirType as HirNamedType).parameterTypes as Iterable<HirInlineType>)
      if (declaration is HirTrait) {
        // We'll return a substitution that will have to satisfy the trait. For example, given the
        // trait `Equals`, we'll return `?0` with the goal `Equals(?0)`. The `?0` is this
        // substitution.
        // TODO(marcelgarus): In the long term, choose a more elegant substitution than just the
        // 1000th.
        let substitution = SolverVariable(canonicalVariable(1000))
        let goals = MutableList.empty<SolverGoal>()
        let solverParameters = MutableList.empty<SolverType>()
        for parameter in parameters {
          let result = hirInlineTypeToSolverTypeAndGoals(context, parameter)
          if (result is None) {
            return Tuple(None<(SolverType, List<SolverGoal>)>(), List.empty<CompilerError>())
          }
          goals.appendAll(result.unwrap().second)
          solverParameters.append(result.unwrap().first)
        }
        goals.append(
          SolverGoal(
            declaration as HirTrait,
            (solverParameters as Iterable<SolverType>).followedBy(List.of1<SolverType>(substitution)).toList(),
          )
        )
        return Tuple(
          Some<(SolverType, List<SolverGoal>)>(Tuple(substitution, goals)),
          List.empty<CompilerError>(),
        )
      }
      if (declaration is HirType) {
        let goals = MutableList.empty<SolverGoal>()
        let solverParameters = MutableList.empty<SolverType>()
        for parameter in parameters {
          let result = hirInlineTypeToSolverTypeAndGoals(context, parameter)
          if (result is None) {
            return Tuple(None<(SolverType, List<SolverGoal>)>(), List.empty<CompilerError>())
          }
          goals.appendAll(result.unwrap().second)
          solverParameters.append(result.unwrap().first)
        }
        return Tuple(
          Some<(SolverType, List<SolverGoal>)>(
            Tuple(SolverValue(declaration as HirType, solverParameters), goals),
          ),
          List.empty<CompilerError>(),
        )
      }
      todo("We should handle a {hirType} referring to {declaration}")
    }
    // TODO(marcelgarus): For now, we only support impls for nominal types. If we want to support
    // `impl A | B: Equals` or `impl (name: String, age: UInt): Clone`, we'll need to add support
    // for other `HirInlineTypes` as well.
    // TODO(marcelgarus): Handle HirFunctionType
    // TODO(marcelgarus): Handle HirTupleType
    // TODO(marcelgarus): Handle HirNamedTupleType
    // TODO(marcelgarus): Handle HirEnumType
    // TODO(marcelgarus): Handle HirIntersectionType
    if (hirType is HirThisType) {
      let declaration = (hirType as HirThisType).declaration
      if (declaration is HirTrait) {
        // We don't need to lower `This` types in traits to solver types because we only use impls
        // for logical type solving.
        todo("Don't call hirTypeToSolverType for a This type in a trait")
      }
      if (declaration is HirImpl) {
        // If a `This` type is used inside an impl, it just assumes the solver type of the base
        // type.
        //
        // Whether that solver type is a `SolverVariable` or `SolverValue` depends on whether the
        // impl is for a trait or type:
        //
        // * `impl Int: InfixAmpersand[This, Int]` has the lowered base type `Int`, so the `This`
        //   gets replaced with `Int`, resulting in `InfixAmpersand(Int, Bool)`.
        // * `impl And: InfixAmpersand[This, Bool]` has the lowered base type `?0` with the
        //   additional goal `And(?0)`, so the `This` gets replaced with `?0`, resulting in
        //   `InfixAmpersand(?0, Bool) <- And(?0)`.
        let loweredBaseType = hirInlineTypeToSolverTypeAndGoals(
          context,
          (declaration as HirImpl).baseType(context),
        )
        if (loweredBaseType is None) {
          // The failed lowering already produced errors.
          return Tuple(None<(SolverType, List<SolverGoal>)>(), List.empty<CompilerError>())
        }
        let baseSolverType = loweredBaseType.unwrap().first
        return Tuple(
          Some<(SolverType, List<SolverGoal>)>(Tuple(baseSolverType, List.empty<SolverGoal>())),
          List.empty<CompilerError>(),
        )
      }
    }
    if (hirType is HirParameterType) {
      return Tuple(
        Some<(SolverType, List<SolverGoal>)>(
          Tuple(SolverVariable(hirType as HirParameterType), List.empty<SolverGoal>()),
        ),
        List.empty<CompilerError>(),
      )
    }
    // TODO(marcelgarus): Handle HirReflectionType
    todo("Implement hirTypeToSolverType for {hirType}")
  })
}

fun getSolverEnvironmentOfScope(context: QueryContext<List<CompilerError>>, scope: Package): Environment {
  query<Environment, List<CompilerError>>(
    context, "getSolverEnvironmentOfScope", scope as Equals & Hash, {
    let rules = getAllImplsInScope(context, scope).items()
      .maybeMap<SolverRule>({ hirImplToSolverRule(context, it) })
      .toList()
    Tuple(Environment(rules), List.empty<CompilerError>())
  })
}

fun makeSureImplsAreNotConflicting(context: QueryContext<List<CompilerError>>, scope: Package) {
  query<Unit, List<CompilerError>>(context, "makeSureImplsAreNotConflicting", scope as Equals & Hash, {
    for implsForSameTrait in (getAllImplsInScope(context, scope) as Iterable<HirImpl>)
      .where({ it.implementedTrait(context) is Some })
      .groupBy<HirInlineType>({ it.implementedTrait(context).unwrap() })
      .values() {
      let solverTypesOfImpls = (implsForSameTrait as Iterable<HirImpl>)
        .maybeMap<SolverType>({
          hirInlineTypeToSolverTypeAndGoals(context, it.baseType(context))
            .map<SolverType>({ it.first })
        })
        .toList()
      for base1 in solverTypesOfImpls {
        for base2 in solverTypesOfImpls {
          let unified = base1.unify(base2)
          if unified is Some {
            // Unifying the impl types succeeded. This means there's a type to which both impls
            // apply. That's bad.
            let conflicting = base1.substituteAll(unified.unwrap())
            return Tuple(
              unit,
              List.of1<CompilerError>(ConflictingImplsCompilerError(base1, base2, conflicting)),
            )
          }
        }
      }
    }
    return Tuple(unit, List.empty<CompilerError>())
  })
}

impl HirType {
  fun implFor(context: QueryContext<List<CompilerError>>, trait_: HirTrait): Maybe<HirImpl> {
    query<Maybe<HirImpl>, List<CompilerError>>( context, "HirType.implements", this as Equals & Hash, {
      todo("Implement HirType.implFor")
      // let impls = (getAllImpls(context) as Iterable<HirImpl>).where({ it.trait_ == trait_ }).where({
      //   it.type_.unify(this) is Some
      // })
    })
  }
}

public class ThisTypeCanOnlyBeUsedInImplOrTraitCompilerError {
  public let thisType: AstNamedType
  public let scope: HirDeclaration
}
impl ThisTypeCanOnlyBeUsedInImplOrTraitCompilerError: CompilerError {
  public fun id(): String { "this-type-can-only-be-used-in-impl-or-trait" }

  public fun location(): Location {
    todo("Implement ThisTypeCanOnlyBeUsedInImplOrTraitCompilerError.location") // TODO(marcelgarus)
  }
  public fun title(): String { "The This type can only be used in impls or traits." }
  public fun description(): String { "You can't use the This type in modules or type definitions" }
}

public class CannotImplementTraitOfTraitCompilerError {
  public let theImpl: HirImpl
}
impl CannotImplementTraitOfTraitCompilerError: CompilerError {
  public fun id(): String { "cannot-implement-trait-of-trait" }

  public fun location(): Location {
    todo("Implement CannotImplementTraitOfTraitCompilerError.location") // TODO(marcelgarus)
  }
  public fun title(): String {
    "You cannot implement a trait containing another trait as a generic parameter yet."
  }
  public fun description(): String { "The offending impl: {theImpl}" }
}

public class ConflictingImplsCompilerError {
  public let base1: SolverType
  public let base2: SolverType
  public let conflictingType: SolverType
}
impl ConflictingImplsCompilerError: CompilerError {
  public fun id(): String { "conflicting-impls" }

  public fun location(): Location {
    todo("Implement ConflictingImplsCompilerError.location") // TODO(marcelgarus)
  }
  public fun title(): String { "Conflicting impls." }
  public fun description(): String {
    "Impl {impl1} conflicts with {impl2}, because both bases {base1} and {base2} apply to the same type {conflictingType}."
  }
}

public class AmbiguousTypeCompilerError {
  public let candidates: Set<HirModule | HirType | HirTrait | HirParameterType>
}
impl AmbiguousTypeCompilerError: CompilerError {
  public fun id(): String { "ambiguous-type" }

  public fun location(): Location {
    todo("Implement AmbiguousTypeCompilerError.location") // TODO(marcelgarus)
  }
  public fun title(): String { "Ambiguous type. Candidates are {candidates}." }
  public fun description(): String {
    /// TODO(marcelgarus): add a description for this error
    ""
  }
}

public class UnknownTypeCompilerError {
  public let astType: AstNamedType
}
impl UnknownTypeCompilerError: CompilerError {
  public fun id(): String { "could-not-resolve-type" }

  public fun location(): Location {
    todo("Implement UnknownTypeCompilerError.location") // TODO(marcelgarus)
  }
  public fun title(): String { "Couldn't resolve type {astType.nameParts}." }
  public fun description(): String {
    /// TODO(marcelgarus): add a description for this error
    ""
  }
}
