use dart_code
use hir

use ..compile

let valueType = DartNamedType(
  DartIdentifier("Value", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let inlineTypeType = DartNamedType(
  DartIdentifier("InlineType", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)

// Type declarations
let typeNamedValueType = DartNamedType(
  DartIdentifier("Value$Named$Type", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let typeNamedInlineTypeType = DartNamedType(
  DartIdentifier("InlineType$Named$Type", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)

// Trait declarations
let traitNamedValueType = DartNamedType(
  DartIdentifier("Value$Named$Trait", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let traitNamedInlineTypeType = DartNamedType(
  DartIdentifier("InlineType$Named$Trait", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)

// Functions
let functionValueType = DartNamedType(
  DartIdentifier("Value$Function", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let functionInlineTypeType = DartNamedType(
  DartIdentifier("InlineType$Function", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)

// Structs
let structValueType = DartNamedType(
  DartIdentifier("Value$Struct", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let structInlineTypeType = DartNamedType(
  DartIdentifier("InlineType$Struct", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)

// Enums
let enumValueType = DartNamedType(
  DartIdentifier("Value$Enum", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
let enumInlineTypeType = DartNamedType(
  DartIdentifier("InlineType$Enum", Some<String>(candyDartUtilsImportUrl)),
  List.empty<DartType>(),
)
