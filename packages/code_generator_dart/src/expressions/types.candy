use compiler_utils
use dart_code
use hir
use incremental

use ...expressions
use ...types
use ..utils

public fun compileTypeInstantiationValueExpression(
  context: QueryContext<List<CompilerError>>,
  expression: HirTypeInstantiationValueExpression,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileTypeInstantiationValueExpression",
    expression, {
    let statements = MutableList.empty<DartStatement>()
    statements.appendAll(
      compileValueExpression(
        context,
        resolveHirValueExpressionUri(context, expression.valueArgument),
      ),
    )

    // TODO(soon, JonasWanke): use `compileNamedType` and supply type arguments when we can get the type of this expression
    let compiledType = DartNamedType(DartIdentifier("SomeType", None<String>()), List.empty<DartType>())
    statements.append(saveValueExpression(
      context,
      expression,
      (compiledType as DartValueExpression)
        .call1(getValueExpressionResultIdentifier(context, expression.valueArgument)),
    ))
    Tuple(statements, List.empty<CompilerError>())
  })
}

public fun compileNamedTupleValueExpression(
  context: QueryContext<List<CompilerError>>,
  expression: HirNamedTupleValueExpression,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileNamedTupleValueExpression",
    expression, {
    let statements = MutableList.empty<DartStatement>()
    statements.appendAll(
      (expression.valueArguments as Iterable<HirValueExpressionUri<HirValueExpression>>)
        .expand<DartStatement>({
          compileValueExpression(context, resolveHirValueExpressionUri(context, it))
        })
    )

    // TODO(soon, JonasWanke): use `compileNamedTupleType` when we can get the named tuple type of this expression
    let compiledType = DartNamedType(DartIdentifier("NamedTuple", None<String>()), List.empty<DartType>())
    statements.append(saveValueExpression(
      context,
      expression,
      (compiledType as DartValueExpression).call(
        positionalArguments = (expression.valueArguments.entries().toList()
          .sortedBy<String>({ it.first }) as Iterable<(String, HirValueExpressionUri<HirValueExpression>)>)
          .map<DartValueExpression>({ getValueExpressionResultIdentifier(context, it.second) })
          .toList(),
        namedArguments = Map.empty<String, DartValueExpression>(),
        typeArguments = List.empty<DartType>(),
      ),
    ))
    Tuple(statements, List.empty<CompilerError>())
  })
}
