use compiler_utils
use dart_code
use hir
use incremental

use ...expressions
use ...types
use ..utils

public fun compileLocalPropertyExpression(
  context: QueryContext<List<CompilerError>>,
  expression: HirLocalPropertyExpression,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileLocalPropertyExpression",
    expression, {
    let statements = MutableList.empty<DartStatement>()
    statements.appendAll(compileExpression(context, getExpression<HirExpression>(expression.value)))

    statements.append(DartFieldStatement(DartField(
      name = getLocalPropertyName(context, expression),
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(compileInlineType(context, expression.type)),
      initialValue = Some<DartExpression>(getExpressionResultIdentifier(context, expression.value)),
    )))
    statements.append(saveNothing(context, expression))
    Tuple(statements, List.empty<CompilerError>())
  })
}

public fun compileLocalPropertyReferenceExpression(
  context: QueryContext<List<CompilerError>>,
  expression: HirLocalPropertyReferenceExpression,
): DartStatement {
  query<DartStatement, List<CompilerError>>(
    context,
    "code_generator_dart.compileLocalPropertyReferenceExpression",
    expression, {
    let target = getExpression<HirLocalPropertyExpression>(expression.target)
    let identifier = DartIdentifier(getLocalPropertyName(context, target), None<String>())
    Tuple(saveExpression(context, expression, identifier), List.empty<CompilerError>())
  })
}

fun getLocalPropertyName(
  context: QueryContext<List<CompilerError>>,
  localProperty: HirLocalPropertyExpression,
): String {
  query<String, List<CompilerError>>(
    context,
    "code_generator_dart.getLocalPropertyName",
    localProperty, {
    Tuple("_{localProperty.name}_{localProperty.uri.index}", List.empty<CompilerError>())
  })
}
