use compiler_utils
use dart_code
use hir
use incremental

use ...compile
use ...expressions
use ...types
use ..utils

public fun compileValueExpressionsToBody(
  context: QueryContext<List<CompilerError>>,
  scope: HirFunction | HirValueExpressionUri,
  // TODO(later, JonasWanke): Get expressions from the scope directly.
  expressionUris: List<HirValueExpressionUri>,
): DartBlock {
  query<DartBlock, List<CompilerError>>(
    context,
    "code_generator_dart.compileValueExpressionsToBody",
    DataTuple2<Equals & Hash, ListOfHirValueExpressionUri>(
      scope as Equals & Hash,
      ListOfHirValueExpressionUri(expressionUris),
    ), {
    let statements = MutableList.empty<DartStatement | DartComment>()

    let scopeObjectName = getScopeObjectName(context, scope)
    statements.append(DartFieldStatement(DartField(
      name = scopeObjectName,
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(dartObject),
      initialValue = Some<DartExpression>((dartObject as DartExpression).call0()),
    )))

    let bodyStatements = (expressionUris as Iterable<HirValueExpressionUri>)
      .expand<DartStatement | DartComment>({
        let comment = DartComment("{it}")
        let statements = compileValueExpression(context, it)
        (List.of1<DartStatement | DartComment>(comment) as Iterable<DartStatement | DartComment>)
          .followedBy((statements as Iterable<DartStatement>).cast<DartStatement | DartComment>())
      })
      .toList()
    let exceptionParameterName = "exception"
    let exceptionParameter = DartIdentifier("exception", None<String>())
    statements.append(DartTry(
      body = DartBlock(bodyStatements),
      catchClauses = List.of1<DartCatch>(DartCatch(
        exceptionType = Some<DartIdentifier>(nonLocalReturnExceptionIdentifier),
        exceptionParameterName = Some<String>(exceptionParameterName),
        stackTraceParameterName = None<String>(),
        body = DartBlock(List.of1<DartStatement | DartComment>(
          DartIf(
            condition = (exceptionParameter as DartExpression).is_(nonLocalReturnExceptionType)
              .and(
                exceptionParameter.dot("scope")
                  .equals(DartIdentifier(scopeObjectName, None<String>())),
              ),
            then = DartBlock(List.of1<DartStatement | DartComment>(
              DartReturn(Some<DartExpression>(exceptionParameter.dot("value"))),
            )),
            else_ = Some<DartStatement>(DartRethrow()),
          ),
        )),
      )),
    ))
    Tuple(DartBlock(statements), List.empty<CompilerError>())
  })
}

public fun compileReturnValueExpression(
  context: QueryContext<List<CompilerError>>,
  uri: HirValueExpressionUri,
  expression: HirReturnValueExpression,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileReturnValueExpression",
    DataTuple2<HirValueExpressionUri, HirReturnValueExpression>(uri, expression), {
    let statements = compileValueExpression(context, expression.expression).toMutable()

    statements.append(DartExpressionStatement(DartThrow(
      (nonLocalReturnExceptionType as DartExpression).call(
        positionalArguments = List.of2<DartExpression>(
          (getScopeObjectName(context, expression.scope) as DartExpression).call0(),
          getValueExpressionResultIdentifier(context, expression.expression),
        ),
        namedArguments = Map.empty<String, DartExpression>(),
        typeArguments = List.empty<DartType>(),
      ),
    )))
    statements.append(saveNothing(context, uri))
    Tuple(statements, List.empty<CompilerError>())
  })
}


fun getScopeObjectName(
  context: QueryContext<List<CompilerError>>,
  scope: HirFunction | HirValueExpressionUri,
): String {
  query<String, List<CompilerError>>(
    context,
    "code_generator_dart.getScopeObjectName",
    scope as Equals & Hash, {
    let name = if (scope is HirFunction) {
      // As function declarations can't be nested, a function is always the outermost scope, of
      // which there can only be one. Hence, we don't have to disambiguate it.
      "$scope$function"
    } else {
      // As function declarations can't be nested, all expressions have the same function as their
      // parent and the index is sufficient to disambiguate them.
      "$scope$expression${(scope as HirValueExpressionUri).index}"
    }
    Tuple(name, List.empty<CompilerError>())
  })
}


let nonLocalReturnExceptionName = "NonLocalReturnException"
let nonLocalReturnExceptionIdentifier = DartIdentifier(
  nonLocalReturnExceptionName,
  Some<String>(candyDartUtilsImportUrl),
)
let nonLocalReturnExceptionType = DartNamedType(
  nonLocalReturnExceptionIdentifier,
  List.empty<DartType>(),
)


class ListOfHirValueExpressionUri {
  // TODO(never, JonasWanke): remove this when we no longer need `unsafeEquals` and `unsafeHash`
  public let value: List<HirValueExpressionUri>
}
impl ListOfHirValueExpressionUri: Equals & Hash {
  fun equals(other: This): Bool {
    (value as Iterable<HirValueExpressionUri>).unsafeEquals(other.value)
  }
  fun hash<T>(hasher: Hasher<T>) { value.unsafeHash<T>(hasher) }
}
