use compiler_utils
use dart_code
use hir
use incremental

use ...expressions
use ...types
use ..utils

public fun compileExpressionsToBody(
  context: QueryContext<List<CompilerError>>,
  expressions: List<HirExpression>,
): DartBlock {
  query<DartBlock, List<CompilerError>>(
    context,
    "code_generator_dart.compileExpressionsToBody",
    ListOfHirExpression(expressions), {
    let statements = (expressions as Iterable<HirExpression>)
      .expand<DartStatement | DartComment>({
        let comment = DartComment("{it}")
        let statements = compileExpression(context, it)
        (List.of1<DartStatement | DartComment>(comment) as Iterable<DartStatement | DartComment>)
          .followedBy((statements as Iterable<DartStatement>).cast<DartStatement | DartComment>())
      })
      .toList()
    Tuple(DartBlock(statements), List.empty<CompilerError>())
  })
}

class ListOfHirExpression {
  // TODO(JonasWanke): remove this when we no longer need `unsafeEquals` and `unsafeHash`
  public let value: List<HirExpression>
}
impl ListOfHirExpression: Equals & Hash {
  fun equals(other: This): Bool { (value as Iterable<HirExpression>).unsafeEquals(other.value) }
  fun hash<T>(hasher: Hasher<T>) { value.unsafeHash<T>(hasher) }
}
