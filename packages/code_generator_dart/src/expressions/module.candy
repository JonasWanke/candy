use compiler_utils
use dart_code
use hir
use incremental

public use .body
public use .function_call
public use .lambda
public use .literals
public use .references
public use .types

public fun compileValueExpression(
  context: QueryContext<List<CompilerError>>,
  uri: HirValueExpressionUri,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileValueExpression",
    uri as Equals & Hash, {
    Tuple(compileValueExpressionHelper(context, uri), List.empty<CompilerError>())
  })
}
fun compileValueExpressionHelper(
  context: QueryContext<List<CompilerError>>,
  uri: HirValueExpressionUri,
): List<DartStatement> {
  let expression = resolveHirValueExpressionUri(context, uri)
  if (expression is HirIntValueExpression) {
    return List.of1<DartStatement>(
      compileIntValueExpression(context, uri, expression as HirIntValueExpression),
    )
  }
  if (expression is HirStringValueExpression) {
    return List.of1<DartStatement>(
      compileStringValueExpression(context, uri, expression as HirStringValueExpression),
    )
  }

  if (expression is HirLambdaValueExpression) {
    return List.of1<DartStatement>(
      compileLambdaValueExpression(context, uri, expression as HirLambdaValueExpression),
    )
  }

  // if (expression is HirThisValueExpression) {
  //   return compileThisValueExpression(context, uri, expression as HirThisValueExpression)
  // }

  // if (expression is HirParameterReferenceExpression) {
  //   return List.of1<DartStatement>(
  //     compileParameterReferenceExpression(
  //       context,
  //       uri,
  //       expression as HirParameterReferenceExpression,
  //     ),
  //   )
  // }

  if (expression is HirFunctionCallValueExpression) {
    return compileFunctionCallValueExpression(context, uri, expression as HirFunctionCallValueExpression)
  }

  // if (expression is HirPropertyNavigationValueExpression) {
  //   return compilePropertyNavigationValueExpression(
  //     context,
  //     uri,
  //     expression as HirPropertyNavigationValueExpression,
  //   )
  // }

  if (expression is HirTypeInstantiationValueExpression) {
    return compileTypeInstantiationValueExpression(
      context,
      uri,
      expression as HirTypeInstantiationValueExpression,
    )
  }
  if (expression is HirStructValueExpression) {
    return compileStructValueExpression(context, uri, expression as HirStructValueExpression)
  }

  if (expression is HirReturnValueExpression) {
    return compileReturnValueExpression(context, uri, expression as HirReturnValueExpression)
  }

  throw "Unknown expression: {expression}"
}
