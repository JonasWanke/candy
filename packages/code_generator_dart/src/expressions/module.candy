use compiler_utils
use dart_code
use hir
use incremental

public use .body
public use .lambda
public use .literals
public use .references
public use .types

public fun compileValueExpression(
  context: QueryContext<List<CompilerError>>,
  expression: HirValueExpression,
): List<DartStatement> {
  query<List<DartStatement>, List<CompilerError>>(
    context,
    "code_generator_dart.compileValueExpression",
    expression as Equals & Hash, {
    Tuple(compileValueExpressionHelper(context, expression), List.empty<CompilerError>())
  })
}
fun compileValueExpressionHelper(
  context: QueryContext<List<CompilerError>>,
  expression: HirValueExpression,
): List<DartStatement> {
  if (expression is HirIntValueExpression) {
    return List.of1<DartStatement>(
      compileIntValueExpression(context, expression as HirIntValueExpression),
    )
  }
  if (expression is HirStringValueExpression) {
    return List.of1<DartStatement>(
      compileStringValueExpression(context, expression as HirStringValueExpression),
    )
  }

  if (expression is HirLambdaValueExpression) {
    return List.of1<DartStatement>(
      compileLambdaValueExpression(context, expression as HirLambdaValueExpression),
    )
  }

  // if (expression is HirThisValueExpression) {
  //   return compileThisValueExpression(context, expression as HirThisValueExpression)
  // }

  // if (expression is HirParameterReferenceExpression) {
  //   return List.of1<DartStatement>(
  //     compileParameterReferenceExpression(
  //       context,
  //       expression as HirParameterReferenceExpression,
  //     ),
  //   )
  // }
  if (expression is HirLocalPropertyReferenceValueExpression) {
    return List.of1<DartStatement>(
      compileLocalPropertyReferenceValueExpression(
        context,
        expression as HirLocalPropertyReferenceValueExpression,
      ),
    )
  }

  // if (expression is HirFunctionCallValueExpression) {
  //   return compileFunctionCallValueExpression(context, expression as HirFunctionCallValueExpression)
  // }
  // if (expression is HirValueExpressionCallValueExpression) {
  //   return compileValueExpressionCallValueExpression(
  //     context,
  //     expression as HirValueExpressionCallValueExpression,
  //   )
  // }

  // if (expression is HirPropertyNavigationValueExpression) {
  //   return compilePropertyNavigationValueExpression(
  //     context,
  //     expression as HirPropertyNavigationValueExpression,
  //   )
  // }

  if (expression is HirTypeInstantiationValueExpression) {
    return compileTypeInstantiationValueExpression(
      context,
      expression as HirTypeInstantiationValueExpression,
    )
  }
  if (expression is HirTupleValueExpression) {
    return compileTupleValueExpression(context, expression as HirTupleValueExpression)
  }
  if (expression is HirNamedTupleValueExpression) {
    return compileNamedTupleValueExpression(context, expression as HirNamedTupleValueExpression)
  }

  if (expression is HirReturnValueExpression) {
    return compileReturnValueExpression(context, expression as HirReturnValueExpression)
  }

  throw "Unknown expression: {expression}"
}
