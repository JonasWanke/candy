use compiler_utils
use dart_code
use hir
use incremental

use ...types

public fun getValueExpression(uri: HirValueExpressionUri): HirValueExpression {
  todo("Replace this with the actual HIR functionality of getting expressions.")
}

public fun getValueExpressionResultIdentifier(
  context: QueryContext<List<CompilerError>>,
  expressionUri: HirValueExpressionUri,
): DartIdentifier {
  query<DartIdentifier, List<CompilerError>>(
    context,
    "code_generator_dart.getValueExpressionResultIdentifier",
    expressionUri, {
    let name = getValueExpressionResultName(context, expressionUri)
    Tuple(DartIdentifier(name, None<String>()), List.empty<CompilerError>())
  })
}
public fun getValueExpressionResultName(
  context: QueryContext<List<CompilerError>>,
  expressionUri: HirValueExpressionUri,
): String {
  query<String, List<CompilerError>>(
    context,
    "code_generator_dart.getValueExpressionResultName",
    expressionUri, {
    Tuple("_{expressionUri.index}", List.empty<CompilerError>())
  })
}

// public fun saveSingleExpression(
//   context: QueryContext<List<CompilerError>>,
//   hirExpression: HirValueExpression,
//   dartExpression: DartExpression,
// ): List<DartStatement> {
//   query<List<DartStatement>, List<CompilerError>>(
//     context,
//     "code_generator_dart.saveSingleExpression",
//     DataTuple2<HirValueExpression, DartExpression>(hirExpression, dartExpression), {
//     let statement = saveValueExpression(context, hirExpression, dartExpression)
//     Tuple(List.of1<DartStatement>(statement), List.empty<CompilerError>())
//   })
// }
public fun saveNothing(
  context: QueryContext<List<CompilerError>>,
  hirExpression: HirValueExpression,
): DartStatement {
  query<DartStatement, List<CompilerError>>(
    context,
    "code_generator_dart.saveNothing",
    hirExpression as Equals & Hash, {
    let nothingType = compileInlineType(context, HirNamedType.coreNothing(context))
    let field = DartField(
      name = getExpressionResultName(context, hirExpression.uri),
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(nothingType),
      initialValue = Some<DartExpression>((nothingType as DartExpression).call0()),
    )
    Tuple(DartFieldStatement(field), List.empty<CompilerError>())
  })
}

public fun saveValueExpression(
  context: QueryContext<List<CompilerError>>,
  hirExpression: HirValueExpression,
  dartExpression: DartExpression,
): DartStatement {
  query<DartStatement, List<CompilerError>>(
    context,
    "code_generator_dart.saveValueExpression",
    DataTuple2<HirValueExpression, DartExpression>(hirExpression, dartExpression), {
    let field = DartField(
      name = getExpressionResultName(context, hirExpression.uri),
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = None<DartType>(),
      // type = Some<DartType>(compileInlineType(context, hirExpression.type)),
      // TODO(JonasWanke): add type information when we generate it
      initialValue = Some<DartExpression>(dartExpression),
    )
    Tuple(DartFieldStatement(field), List.empty<CompilerError>())
  })
}
