use compiler_utils
use dart_code
use hir
use incremental

use ...types
use ..utils

public fun compileIntValueExpression(
  context: QueryContext<List<CompilerError>>,
  uri: HirValueExpressionUri,
  expression: HirIntValueExpression,
): DartStatement {
  query<DartStatement, List<CompilerError>>(
    context,
    "code_generator_dart.compileIntValueExpression",
    DataTuple2<HirValueExpressionUri, HirIntValueExpression>(uri, expression), {
    let dartExpression = (compileNamedType(context, HirNamedType.coreInt(context)) as DartExpression)
      .call1(DartIntLiteral(expression.value))
    let statement = saveValueExpression(context, uri, expression, dartExpression)
    Tuple(statement, List.empty<CompilerError>())
  })
}


public fun compileStringValueExpression(
  context: QueryContext<List<CompilerError>>,
  uri: HirValueExpressionUri,
  expression: HirStringValueExpression,
): DartStatement {
  query<DartStatement, List<CompilerError>>(
    context,
    "code_generator_dart.compileStringValueExpression",
    DataTuple2<HirValueExpressionUri, HirStringValueExpression>(uri, expression), {
    let dartExpression = (compileNamedType(context, HirNamedType.coreString(context)) as DartExpression)
      .call1(DartStringLiteral(expression.value))
    let statement = saveValueExpression(context, uri, expression, dartExpression)
    Tuple(statement, List.empty<CompilerError>())
  })
}
