use compiler_utils
use dart_code
use hir
use incremental

use ...types

public fun compileTupleType(
  context: QueryContext<List<CompilerError>>,
  tupleType: HirTupleType,
): DartType {
  query<DartType, List<CompilerError>>(
    context,
    "code_generator_dart.compileTupleType",
    tupleType, {
    let types = tupleType.types as Iterable<HirInlineType>
    let size = types.length()
    assert(
      size <= (HirTupleType.fieldNames as Iterable<String>).length(),
      "Tuple is too long: {size}.",
    )

    let name = getCompiledTupleTypeName(context, size)
    let name = DartIdentifier(name, None<String>())
    // TODO(JonasWanke): correct package URL

    let types = types.map<DartType>({ compileInlineType(context, it) }).toList()

    Tuple(DartNamedType(name, types), List.empty<CompilerError>())
  })
}

public fun compileTupleTypeDeclaration(
  context: QueryContext<List<CompilerError>>,
  size: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileTupleTypeDeclaration",
    size, {
    assert(
      size <= (HirTupleType.fieldNames as Iterable<String>).length(),
      "Tuple is too long: {size}.",
    )

    let name = getCompiledTupleTypeName(context, size)

    let fields = (HirTupleType.fieldNames as Iterable<String>)
      .take(size)
      .mapIndexed<(String, String)>({ name, index => Tuple(name, "T{index}") })

    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    let constructor = DartConstructor(
      className = name,
      name = None<String>(),
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      isConst = true,
      requiredParameters = fields
        .map<DartParameter | DartInitializingFormal>({
          DartInitializingFormal(it.first, defaultValue = None<DartExpression>())
        })
        .toList(),
      positionalParameters = List.empty<DartParameter | DartInitializingFormal>(),
      namedParameters = List.empty<DartParameter | DartInitializingFormal>(),
      body = None<DartBody>(),
    )
    body.append(constructor)

    let dartFields = fields
      .map<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>({
        DartField(
          it.first,
          docComment = None<String>(),
          isStatic = false,
          mutability = DartFinal(),
          type = Some<DartType>(
            DartNamedType(DartIdentifier(it.second, None<String>()), List.empty<DartType>()),
          ),
          initialValue = None<DartExpression>(),
        )
      })
    body.appendAll(dartFields)

    let dartDeclaration = DartClass(
      name = name,
      docComment = None<String>(),
      // TODO(JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.of1<DartAnnotation>(dartMetaSealedAnnotation),
      isAbstract = false,
      typeParameters = fields
        .map<DartTypeParameter>({ DartTypeParameter(it.second, None<DartType>()) })
        .toList(),
      extends_ = None<DartType>(),
      implements_ = List.empty<DartType>(),
      with_ = List.empty<DartType>(),
      body = body,
    )

    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}

fun getCompiledTupleTypeName(
  context: QueryContext<List<CompilerError>>,
  size: Int,
): String {
  query<String, List<CompilerError>>(
    context,
    "code_generator_dart.getCompiledTupleTypeName",
    size, {
    assert(
      size <= (HirTupleType.fieldNames as Iterable<String>).length(),
      "Tuple is too long: {size}.",
    )

    Tuple("Tuple{size}", List.empty<CompilerError>())
  })
}
