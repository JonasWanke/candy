use compiler_utils
use dart_code
use hir
use incremental

public use .enum_type
public use .function_type
public use .named_type
public use .struct_type

public fun compileInlineTypeValue(
  context: QueryContext<List<CompilerError>>,
  inlineType: HirInlineType,
): DartIdentifier {
  query<DartIdentifier, List<CompilerError>>(
    context,
    "code_generator_dart.compileInlineTypeValue",
    inlineType, {
    Tuple(compileInlineType(context, inlineType, "Value"), List.empty<CompilerError>())
  })
}
public fun compileInlineTypeInlineType(
  context: QueryContext<List<CompilerError>>,
  inlineType: HirInlineType,
): DartIdentifier {
  query<DartIdentifier, List<CompilerError>>(
    context,
    "code_generator_dart.compileInlineTypeInlineType",
    inlineType, {
    Tuple(compileInlineType(context, inlineType, "InlineType"), List.empty<CompilerError>())
  })
}
fun compileInlineType(
  context: QueryContext<List<CompilerError>>,
  inlineType: HirInlineType,
  prefix: String,
): DartIdentifier {
  if (inlineType is HirErrorType) { throw "Tried to compile an error type to Dart." }
  if (inlineType is HirNamedType) {
    return compileNamedType(context, inlineType as HirNamedType, prefix)
  }
  if (inlineType is HirFunctionType) {
    return compileFunctionType(context, inlineType as HirFunctionType, prefix)
  }
  if (inlineType is HirStructType) {
    return compileStructType(context, inlineType as HirStructType, prefix)
  }
  if (inlineType is HirEnumType) {
    return compileEnumType(context, inlineType as HirEnumType, prefix)
  }
  // TODO(soon): Can intersection and this types stay like this?
  if (inlineType is HirIntersectionType) { return dartDynamic }
  if (inlineType is HirThisType) { return dartDynamic }
  if (inlineType is HirParameterType) {
    assert(prefix == "InlineType", "Parameter types can't be compiled to value types.")
    let parameterType = (inlineType as HirParameterType)
    if (parameterType.declaration is HirImpl || parameterType.declaration is HirFunction) {
      return DartIdentifier("typeArgument${parameterType.name}", None<String>())
    }
    return DartIdentifier("inlineType", None<String>()).dot("typeArgument${parameterType.name}")
  }
  if (inlineType is HirReflectionType) {
    todo("soon, Compile HirReflectionType to Dart")
  }
  throw "Unknown inline type: {inlineType}"
}
