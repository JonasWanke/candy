use compiler_utils
use dart_code
use hir
use incremental

use ...declarations
use ...types

public fun compileNamedType(
  context: QueryContext<List<CompilerError>>,
  namedType: HirNamedType,
): DartType {
  query<DartType, List<CompilerError>>(
    context,
    "code_generator_dart.compileNamedType",
    namedType, {
    let declaration = (namedType.declaration as HirDeclaration)
    let importUrl = moduleHirToImportUrl(context, declaration.parent as HirModule)
    let name = DartIdentifier(declaration.name(), Some<String>(importUrl))

    let types = (namedType.parameterTypes as Iterable<HirInlineType>)
      .map<DartType>({ compileInlineType(context, it) })
      .toList()

    Tuple(DartNamedType(name, types), List.empty<CompilerError>())
  })
}
