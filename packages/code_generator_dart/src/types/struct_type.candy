use compiler_utils
use dart_code
use hir
use incremental

use ...declarations
use ...types
use ...utils
use ..type_collection

public fun compileStructType(
  context: QueryContext<List<CompilerError>>,
  structType: HirStructType,
  prefix: String,
): DartIdentifier {
  /// Example: `(first: Foo, second: Bar)` -> `Struct$2`

  compileRawStructType(
    context,
    (structType.types as Iterable<(String, HirInlineType)>).length(),
    prefix,
  )
}
fun compileRawStructType(
  context: QueryContext<List<CompilerError>>,
  fieldCount: Int,
  prefix: String,
): DartIdentifier {
  DartIdentifier(
    "{prefix}$Struct${fieldCount}",
    Some<String>(moduleHirToImportUrl(context, HirModule.syntheticStructTypes(context))),
  )
}

// TODO(soon): generate impl functions and impl for Any

public fun compileStructTypeDeclarations(
  context: QueryContext<List<CompilerError>>,
  package: Package,
): (HirModule, List<DartDeclaration>) {
  /// Visits all used struct types and generates their Dart code.

  query<(HirModule, List<DartDeclaration>), List<CompilerError>>(
    context,
    "code_generator_dart.compileStructTypeDeclarations",
    package, {
    let fieldCounts = getAllInlineTypes(context, package).items()
      .whereType<HirStructType>()
      .map<Int>({ (it.types as Iterable<(String, HirInlineType)>).length() })
      .toSet()
    let classes = fieldCounts.items()
      .expand<DartDeclaration>({
        (compileStructTypeDeclaration(context, it) as Iterable<DartClass>).cast<DartDeclaration>()
      })
      .toList()
    Tuple(Tuple(HirModule.syntheticStructTypes(context), classes), List.empty<CompilerError>())
  })
}
fun compileStructTypeDeclaration(
  context: QueryContext<List<CompilerError>>,
  fieldCount: Int,
): List<DartClass> {
  query<List<DartClass>, List<CompilerError>>(
    context,
    "code_generator_dart.compileStructTypeDeclaration",
    fieldCount, {
    let classes = List.of2<DartClass>(
      compileStructTypeValue(context, fieldCount),
      compileStructTypeInlineType(context, fieldCount),
    )
    Tuple(classes, List.empty<CompilerError>())
  })
}

fun compileStructTypeValue(
  context: QueryContext<List<CompilerError>>,
  fieldCount: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileStructTypeValue",
    fieldCount, {
    let name = compileRawStructType(context, fieldCount, "Value")
    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    body.append(DartConstructor(
      className = name,
      name = Some<String>("_"),
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      isConst = true,
      requiredParameters = List
        .of1<DartParameter | DartInitializingFormal>(
          DartInitializingFormal("inlineType", None<DartExpression>()),
        )
        .followedByList(
          0.until(fieldCount)
            .map<DartParameter | DartInitializingFormal>({
              DartInitializingFormal("value${it}", defaultValue = None<DartExpression>())
            })
            .toList(),
        ),
      positionalParameters = List.empty<DartParameter | DartInitializingFormal>(),
      namedParameters = List.empty<DartParameter | DartInitializingFormal>(),
      body = None<DartBody>(),
    ))

    // TODO(never, JonasWanke): add `@override`
    body.append(DartField(
      "inlineType",
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(inlineTypeType),
      initialValue = None<DartExpression>(),
    ))

    body.appendAll(
      0.until(fieldCount)
        .map<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>({
          DartField(
            "value${it}",
            docComment = None<String>(),
            // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
            isStatic = false,
            mutability = DartFinal(),
            type = Some<DartType>(valueType),
            initialValue = None<DartExpression>(),
          )
        }),
    )

    let dartDeclaration = DartClass(
      name = name,
      docComment = None<String>(),
      // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.of1<DartAnnotation>(dartMetaSealedAnnotation),
      isAbstract = false,
      typeParameters = List.empty<DartTypeParameter>(),
      extends_ = None<DartType>(),
      implements_ = List.of1<DartType>(structValueType),
      with_ = List.empty<DartType>(),
      body = body,
    )
    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}

fun compileStructTypeInlineType(
  context: QueryContext<List<CompilerError>>,
  fieldCount: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileStructTypeInlineType",
    fieldCount, {
    let name = compileRawStructType(context, fieldCount, "InlineType")
    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    body.append(DartConstructor(
      className = name,
      name = None<String>(),
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      isConst = true,
      requiredParameters = 0.until(fieldCount)
        .map<DartParameter | DartInitializingFormal>({
          DartInitializingFormal("typeArgument${it}", None<DartExpression>())
        })
        .toList(),
      positionalParameters = List.empty<DartParameter | DartInitializingFormal>(),
      namedParameters = List.empty<DartParameter | DartInitializingFormal>(),
      body = None<DartBody>(),
    ))

    body.append(DartFunction(
      isStatic = false,
      name = "create",
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      _returns = Some<DartType>(valueType),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = 0.until(fieldCount)
        .map<DartParameter>({
          DartParameter(
            "value${it}",
            isRequired = true,
            type = Some<DartType>(valueType),
            defaultValue = None<DartExpression>(),
          )
        })
        .toList(),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        (compileRawStructType(context, fieldCount, "Value") as DartExpression)
          .dot("_")
          .callPositional(
            List
              .of1<DartExpression>(dartThis)
              .followedByList(
                0.until(fieldCount)
                  .map<DartExpression>({ DartIdentifier("value${it}", None<String>()) })
                  .toList(),
              ),
          ),
      )),
    ))

    body.append(DartFunction(
      isStatic = false,
      name = "equals",
      docComment = None<String>(),
      annotations = List.of1<DartAnnotation>(dartOverrideAnnotation),
      _returns = Some<DartType>(dartBool),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = List.of1<DartParameter>(DartParameter(
        "other",
        isRequired = true,
        type = Some<DartType>(inlineTypeType),
        defaultValue = None<DartExpression>(),
      )),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        (DartIdentifier("isOfThisType", None<String>()) as DartExpression)
          .callPositional(
            0.until(fieldCount)
              .map<DartExpression>({ DartIdentifier("typeArgument${it}", None<String>()) })
              .toList()
              .followedByList(List.of1<DartExpression>(DartIdentifier("other", None<String>()))),
          ),
      )),
    ))
    body.append(DartFunction(
      isStatic = true,
      name = "isOfThisType",
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      _returns = Some<DartType>(dartBool),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = 0.until(fieldCount)
        .map<DartParameter>({
          DartParameter(
            "typeArgument${it}",
            isRequired = true,
            type = Some<DartType>(inlineTypeType),
            defaultValue = None<DartExpression>(),
          )
        })
        .toList()
        .followedByList(List.of1<DartParameter>(DartParameter(
          "inlineType",
          isRequired = true,
          type = Some<DartType>(inlineTypeType),
          defaultValue = None<DartExpression>(),
        ))),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        0.until(fieldCount)
          .map<DartExpression>({
            (DartIdentifier("typeArgument${it}", None<String>()) as DartExpression)
              .dot("equals")
              .call1(
                (DartIdentifier("inlineType", None<String>()) as DartExpression)
                  .dot("typeArgument${it}"),
              )
          })
          .foldLeft<DartExpression>(
            (DartIdentifier("inlineType", None<String>()) as DartExpression).is_(name),
            { result, item => result.and(item) },
          ),
      )),
    ))

    body.appendAll(
      0.until(fieldCount)
        .map<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>({
          DartField(
            "typeArgument${it}",
            docComment = None<String>(),
            isStatic = false,
            mutability = DartFinal(),
            type = Some<DartType>(inlineTypeType),
            initialValue = None<DartExpression>(),
          )
        }),
    )

    let dartDeclaration = DartClass(
      name = name.name,
      docComment = None<String>(),
      // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.of1<DartAnnotation>(dartMetaSealedAnnotation),
      isAbstract = false,
      typeParameters = List.empty<DartTypeParameter>(),
      extends_ = None<DartType>(),
      implements_ = List.of1<DartType>(structInlineTypeType),
      with_ = List.empty<DartType>(),
      body = body,
    )
    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}
