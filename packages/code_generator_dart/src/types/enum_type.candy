use compiler_utils
use dart_code
use hir
use incremental

use ...declarations
use ...types
use ...utils
use ..type_collection

public fun compileEnumType(
  context: QueryContext<List<CompilerError>>,
  enumType: HirEnumType,
  prefix: String,
): DartIdentifier {
  /// Example: `True | False Int` -> `Enum$2`

  compileRawEnumType(context, enumType.variants.length(), prefix)
}
fun compileRawEnumType(
  context: QueryContext<List<CompilerError>>,
  variantCount: Int,
  prefix: String,
): DartIdentifier {
  DartIdentifier(
    "{prefix}$Enum${variantCount}",
    Some<String>(moduleHirToImportUrl(context, HirModule.syntheticEnumTypes(context))),
  )
}
fun compileEnumVariantType(variantCount: Int, variantIndex: Int): String {
  /// Example: `True` in `True | False Int` -> `Value$Enum$2$0`

  "Value$Enum${variantCount}${variantIndex}"
}

// TODO(soon): generate impl functions and impl for Any

public fun compileEnumTypeDeclarations(
  context: QueryContext<List<CompilerError>>,
  package: Package,
): (HirModule, List<DartDeclaration>) {
  /// Visits all used enum types and generates their Dart code.

  query<(HirModule, List<DartDeclaration>), List<CompilerError>>(
    context,
    "code_generator_dart.compileEnumTypeDeclarations",
    package, {
    let variantCounts = getAllInlineTypes(context, package).items()
      .whereType<HirEnumType>()
      .map<Int>({ it.variants.length() })
      .toSet()
    let classes = variantCounts.items()
      .expand<DartDeclaration>({
        (compileEnumTypeDeclaration(context, it) as Iterable<DartDeclaration>)
      })
      .toList()
    Tuple(Tuple(HirModule.syntheticEnumTypes(context), classes), List.empty<CompilerError>())
  })
}
fun compileEnumTypeDeclaration(
  context: QueryContext<List<CompilerError>>,
  variantCount: Int,
): List<DartClass> {
  query<List<DartClass>, List<CompilerError>>(
    context,
    "code_generator_dart.compileEnumTypeDeclaration",
    variantCount, {
    let classes = MutableList.empty<DartClass>()
    classes.append(compileEnumTypeValue(context, variantCount))
    classes.appendAll(
      0.until(variantCount)
        .map<DartClass>({ compileEnumTypeVariantValue(context, variantCount, it) }),
    )
    classes.append(compileEnumTypeInlineType(context, variantCount))
    Tuple(classes, List.empty<CompilerError>())
  })
}

fun compileEnumTypeValue(
  context: QueryContext<List<CompilerError>>,
  variantCount: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileEnumTypeValue",
    variantCount, {
    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    body.append(DartFunction(
      isStatic = false,
      name = "match",
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      _returns = Some<DartType>(valueType),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = generateMatchValueParameters(variantCount),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = None<DartBody>(),
    ))

    let dartDeclaration = DartClass(
      name = compileRawEnumType(context, variantCount, "Value").name,
      docComment = None<String>(),
      // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.empty<DartAnnotation>(),
      isAbstract = true,
      typeParameters = List.empty<DartTypeParameter>(),
      extends_ = None<DartType>(),
      implements_ = List.of1<DartType>(enumValueType),
      with_ = List.empty<DartType>(),
      body = body,
    )
    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}
fun compileEnumTypeVariantValue(
  context: QueryContext<List<CompilerError>>,
  variantCount: Int,
  variantIndex: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileEnumTypeVariantValue",
    DataTuple2<Int, Int>(variantCount, variantIndex), {
    let name = compileEnumVariantType(variantCount, variantIndex)
    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    body.append(DartConstructor(
      className = name,
      name = Some<String>("_"),
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      isConst = true,
      requiredParameters = List.of2<DartParameter | DartInitializingFormal>(
        DartInitializingFormal("inlineType", None<DartExpression>()),
        DartInitializingFormal("value", None<DartExpression>()),
      ),
      positionalParameters = List.empty<DartParameter | DartInitializingFormal>(),
      namedParameters = List.empty<DartParameter | DartInitializingFormal>(),
      body = None<DartBody>(),
    ))

    // TODO(never, JonasWanke): add `@override`
    body.append(DartField(
      "inlineType",
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(inlineTypeType),
      initialValue = None<DartExpression>(),
    ))
    body.append(DartField(
      "value",
      docComment = None<String>(),
      isStatic = false,
      mutability = DartFinal(),
      type = Some<DartType>(valueType),
      initialValue = None<DartExpression>(),
    ))

    body.append(DartFunction(
      isStatic = false,
      name = "match",
      docComment = None<String>(),
      annotations = List.of1<DartAnnotation>(dartOverrideAnnotation),
      _returns = Some<DartType>(valueType),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = generateMatchValueParameters(variantCount),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        (DartIdentifier("value${variantIndex}", None<String>()) as DartExpression)
          .call1(DartIdentifier("value", None<String>())),
      )),
    ))

    let dartDeclaration = DartClass(
      name = name,
      docComment = None<String>(),
      // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.of1<DartAnnotation>(dartMetaSealedAnnotation),
      isAbstract = false,
      typeParameters = List.empty<DartTypeParameter>(),
      extends_ = None<DartType>(),
      implements_ = List.of1<DartType>(
        DartType(compileEnumType(context, variantCount, "Value"), List.empty<DartType>()),
      ),
      with_ = List.empty<DartType>(),
      body = body,
    )
    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}
fun generateMatchValueParameters(variantCount: Int): List<DartParameter> {
  0.until(variantCount)
    .map<DartParameter>({
      DartParameter(
        name = DartIdentifier("value${it}", None<String>()),
        isRequired = true,
        type = Some<DartType>(DartFunctionType(
          parameters = List.of1<DartType | DartParameter>(valueType),
          positionalParameters = List.empty<DartType | DartParameter>(),
          namedParameters = List.empty<DartParameter>(),
          _returns = Some<DartType>(valueType),
        )),
        defaultValue = None<DartExpression>(),
      )
    })
    .toList()
}

fun compileEnumTypeInlineType(
  context: QueryContext<List<CompilerError>>,
  variantCount: Int,
): DartClass {
  query<DartClass, List<CompilerError>>(
    context,
    "code_generator_dart.compileEnumTypeInlineType",
    variantCount, {
    let name = compileRawEnumType(context, variantCount, "InlineType")
    let body = MutableList.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()

    body.append(DartConstructor(
      className = name,
      name = None<String>(),
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      isConst = true,
      requiredParameters = 0.until(variantCount)
        .map<DartParameter | DartInitializingFormal>({
          DartInitializingFormal("typeArgument${it}", None<DartExpression>())
        })
        .toList(),
      positionalParameters = List.empty<DartParameter | DartInitializingFormal>(),
      namedParameters = List.empty<DartParameter | DartInitializingFormal>(),
      body = None<DartBody>(),
    ))

    body.appendAll(
      0.until(variantCount)
        .map<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>({
          DartFunction(
            isStatic = false,
            name = "create${it}",
            docComment = None<String>(),
            annotations = List.empty<DartAnnotation>(),
            _returns = Some<DartType>(valueType),
            typeParameters = List.empty<DartTypeParameter>(),
            requiredParameters = List.of1<DartParameter>(DartParameter(
              "value",
              isRequired = true,
              type = Some<DartType>(valueType),
              defaultValue = None<DartExpression>(),
            )),
            positionalParameters = List.empty<DartParameter>(),
            namedParameters = List.empty<DartParameter>(),
            body = Some<DartBody>(DartInlineBody(
              (DartIdentifier(compileEnumVariantType(variantCount, it), None<String>()) as DartExpression)
                .dot("_")
                .call2(dartThis, DartIdentifier("value", None<String>())),
            )),
          )
        }),
    )

    body.append(DartFunction(
      isStatic = false,
      name = "equals",
      docComment = None<String>(),
      annotations = List.of1<DartAnnotation>(dartOverrideAnnotation),
      _returns = Some<DartType>(dartBool),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = List.of1<DartParameter>(DartParameter(
        "other",
        isRequired = true,
        type = Some<DartType>(inlineTypeType),
        defaultValue = None<DartExpression>(),
      )),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        (DartIdentifier("isOfThisType", None<String>()) as DartExpression)
          .callPositional(
            0.until(variantCount)
              .map<DartExpression>({ DartIdentifier("typeArgument${it}", None<String>()) })
              .toList()
              .followedByList(List.of1<DartExpression>(DartIdentifier("other", None<String>()))),
          ),
      )),
    ))
    body.append(DartFunction(
      isStatic = true,
      name = "isOfThisType",
      docComment = None<String>(),
      annotations = List.empty<DartAnnotation>(),
      _returns = Some<DartType>(dartBool),
      typeParameters = List.empty<DartTypeParameter>(),
      requiredParameters = 0.until(variantCount)
        .map<DartParameter>({
          DartParameter(
            "typeArgument${it}",
            isRequired = true,
            type = Some<DartType>(inlineTypeType),
            defaultValue = None<DartExpression>(),
          )
        })
        .toList()
        .followedByList(List.of1<DartParameter>(DartParameter(
          "inlineType",
          isRequired = true,
          type = Some<DartType>(inlineTypeType),
          defaultValue = None<DartExpression>(),
        ))),
      positionalParameters = List.empty<DartParameter>(),
      namedParameters = List.empty<DartParameter>(),
      body = Some<DartBody>(DartInlineBody(
        0.until(variantCount)
          .map<DartExpression>({
            (DartIdentifier("typeArgument${it}", None<String>()) as DartExpression)
              .dot("equals")
              .call1(
                (DartIdentifier("inlineType", None<String>()) as DartExpression)
                  .dot("typeArgument${it}"),
              )
          })
          .foldLeft<DartExpression>(
            (DartIdentifier("inlineType", None<String>()) as DartExpression).is_(name),
            { result, item => result.and(item) },
          ),
      )),
    ))

    body.appendAll(
      0.until(variantCount)
        .map<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>({
          DartField(
            "typeArgument${it}",
            docComment = None<String>(),
            isStatic = false,
            mutability = DartFinal(),
            type = Some<DartType>(inlineTypeType),
            initialValue = None<DartExpression>(),
          )
        }),
    )

    let dartDeclaration = DartClass(
      name = name.name,
      docComment = None<String>(),
      // TODO(never, JonasWanke): Add the corresponding Candy code as the doc comment.
      annotations = List.of1<DartAnnotation>(dartMetaSealedAnnotation),
      isAbstract = false,
      typeParameters = List.empty<DartTypeParameter>(),
      extends_ = None<DartType>(),
      implements_ = List.of1<DartType>(enumInlineTypeType),
      with_ = List.empty<DartType>(),
      body = body,
    )
    Tuple(dartDeclaration, List.empty<CompilerError>())
  })
}
