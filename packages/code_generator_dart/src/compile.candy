use compiler_utils
use dart_code
use hir
use incremental

use ..declarations
use ..types

public fun compile(context: QueryContext<List<CompilerError>>, package: Package): Unit {
  impureQuery<Unit, List<CompilerError>>(context, "code_generator_dart.compile", package, {
    let outputPath = package.getOutputPath(context, "Dart")
    let outputDirectory = Directory(outputPath)
    if outputDirectory.doesExist() {
      outputDirectory.delete(recursive = true)
      outputDirectory.create(recursive = true)
    }

    let files = compile_(context, package)
    for entry in files.entries() {
      let path = outputPath.append(entry.first)
      let content = entry.second

      let file = File(path)
      file.create(recursive = true)
      file.write(content)
    }

    let pubGetResult = Process.run(Path.parse("dart"), List.of2<String>("pub", "get"), outputPath)
    if !(pubGetResult.exitCode == 0) {
      throw "Error running `pub get`: Exit Code {pubGetResult.exitCode}\n{pubGetResult.standardOutput}\n{pubGetResult.standardError}"
    }

    Tuple(unit, List.empty<CompilerError>())
  })
}

fun compile_(context: QueryContext<List<CompilerError>>, package: Package): Map<Path, String> {
  query<Map<Path, String>, List<CompilerError>>(context, "code_generator_dart.compile_", package, {
    let output = MutableMap.empty<Path, String>()

    let pubspec = generatePubspec(context)
    output.set(pubspec.first, pubspec.second)

    let utils = generateUtils(context)
    output.set(utils.first, utils.second)

    output.setAll(generateSyntheticPackage(context, package))

    for dependency in package.getAllPackagesInCompilationOrder(context) {
      output.setAll(compileModuleAndDescendants(context, package, HirTopLevelModule(dependency)))
    }

    Tuple(output, List.empty<CompilerError>())
  })
}

public let outputPackageName = "diabetes"
// The result of having lots of üç≠¬†Candy.

fun generatePubspec(context: QueryContext<List<CompilerError>>): (Path, String) {
  query<(Path, String), List<CompilerError>>(context, "code_generator_dart.generatePubspec", unit, {
    let content = "name: {outputPackageName}
environment:
  sdk: '>=2.12.0 <3.0.0'
dependencies:
  characters: ^1.1.0
  collection: ^1.15.0
  meta: ^1.3.0
dev_dependencies:
  test: ^1.16.3"

    Tuple(Tuple(Path.parse(dartPubspecFileName), content), List.empty<CompilerError>())
  })
}

let candyDartUtilsFileName = "candy_dart_utils.dart"
public let candyDartUtilsImportUrl = "package:{outputPackageName}/{candyDartUtilsFileName}"
fun generateUtils(context: QueryContext<List<CompilerError>>): (Path, String) {
  query<(Path, String), List<CompilerError>>(context, "code_generator_dart.generatePubspec", unit, {
    let sourcePath = getCorePath(context)
      .append(Path.parse("../../packages/code_generator_dart/candy_dart_utils.dart"))
      .normalized()
    let content = File(sourcePath).read()
    Tuple(Tuple(Path.parse("lib/{candyDartUtilsFileName}"), content), List.empty<CompilerError>())
  })
}

fun generateSyntheticPackage(context: QueryContext<List<CompilerError>>, package: Package): Map<Path, String> {
  query<Map<Path, String>, List<CompilerError>>(context, "code_generator_dart.generateSyntheticPackage", package, {
    let declarations = (List.of3<(HirModule, List<DartDeclaration>)>(
      compileEnumTypeDeclarations(context, package),
      compileNamedTupleTypeDeclarations(context, package),
      compileTupleTypeDeclarations(context, package),
    ) as Iterable<(HirModule, List<DartDeclaration>)>)
    assert(
      declarations.all({ (it.first as HasPackageAndPath).package() == Package.synthetic(context) }),
      "Generated synthetic declarations specify a non-synthetic target module.",
    )

    let result = MutableMap.empty<Path, String>()
    declarations.do({
      let content = DartCompilationUnit(
        directives = List.empty<DartDirective>(),
        declarations = it.second,
      )
      let importAllocator = DartSimplePrefixingImportAllocator(MutableMap.empty<String, String>())
      let content = (content as DartToCode).toCode(importAllocator)
      result.set(moduleHirToOutputPath(context, it.first), content)
      unit
    })

    Tuple(result, List.empty<CompilerError>())
  })
}
