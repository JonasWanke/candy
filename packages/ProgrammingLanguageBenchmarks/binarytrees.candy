# https://programming-language-benchmarks.vercel.app/problem/binarytrees

[channel, equals, if, ifElse, int, iterator, recursive, result, struct, text] = use "Core"

createTree n :=
  needs (int.is n)
  needs (int.isNonNegative n)

  recursive n { recurse n ->
    ifElse (n | equals 0) { [] } {
      nextSize = n | int.subtract 1
      [Left: recurse nextSize, Right: recurse nextSize]
    }
  }
checkTree tree :=
  needs (struct.is tree)

  recursive tree { recurse tree ->
    left = tree | struct.get Left | result.mapOr { it -> recurse it } 0
    right = tree | struct.get Right | result.mapOr { it -> recurse it } 0
    1 | int.add left | int.add right
  }

main := { environment ->
  print message =
    needs (text.is message)
    environment.stdout | channel.send message

  n = 7
  minDepth = 4

  maxDepth = n | int.coerceAtLeast (minDepth | int.add 2)
  _ =
    depth = maxDepth | int.add 1
    tree = createTree depth
    print "stretch tree of depth {depth}\t check: {tree | checkTree}"

  longLivedTree = createTree maxDepth

  recursive minDepth { recurse depth ->
    if (depth | int.isLessThanOrEqualTo maxDepth) {
      iterations = 1 | int.shiftLeft (maxDepth | int.subtract depth | int.add minDepth)
      check = iterator.generate iterations { _ -> createTree depth | checkTree } | iterator.sum
      print "{iterations}\t trees of depth {depth}\t check: {check}"
      recurse (depth | int.add 2)
    }
  }

  print "long lived tree of depth {maxDepth}\t check: {longLivedTree | checkTree}"
}
