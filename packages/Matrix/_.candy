[print] = use "Builtins"
[bool, equals, if, ifElse, int, iterable, recursive, list, range, result, text, struct] = use "Core"

is a := list.is a | bool.lazyAnd { list.length a | int.isPositive }
  | bool.lazyAnd { a | iterable.fromList | iterable.all { row -> list.is row } }
  | bool.lazyAnd {
  w = a | list.get 0 | list.length
  a | iterable.fromList | iterable.all { row -> row | list.length | equals w }
}
  | bool.lazyAnd {
  a | iterable.fromList
  | iterable.all { row -> row | iterable.fromList | iterable.all { item -> int.is item } }
}

height a :=
  needs (is a)
  list.length a
width a :=
  needs (is a)
  a | list.get 0 | list.length
get a i j :=
  needs (is a)
  needs (int.is i)
  needs (int.is j)
  needs (int.isNonNegative i)
  needs (int.isNonNegative j)
  needs (i | int.isLessThan (a | height))
  needs (j | int.isLessThan (a | width))
  a | list.get i | list.get j

multiply a b :=
  needs (is a)
  needs (is b)
  needs
    width a | equals (height b)
    "The width of the first matrix ({width a}) must be the height of the second one ({height b})."
  w = width b
  h = height a
  common = width a
  list.generate h { i ->
    list.generate w { j ->
      0 | range.to common | range.toIterable
      | iterable.map { k -> int.multiply (a | get i k) (b | get k j) }
      | iterable.sum
      | result.unwrap
    }
  }
