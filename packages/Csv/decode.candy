[bool, checkEquals, equals, ifElse, int, list, recursive, text] = use "Core"
[cursor, parser] = use "Parser"

decode csv :=
  needs (text.is csv)
  # TODO(JonasWanke): Error on lines with different field counts
  recursive [Lines: (,), Fields: (,), FieldStartOffset: 0, P: parser.new csv] {
    recurse [lines, fields, fieldStartOffset, p] ->
    Parser (Cursor [source, Offset: oldOffset]) = p
    p | parser.next %
      Ok [Parser: p, character] ->
        Parser c = p
        Cursor [Offset: newOffset] = c
        character %
          "," ->
            recurse [
              lines,
              Fields: fields | list.append (source | text.getRange fieldStartOffset oldOffset),
              FieldStartOffset: newOffset,
              p,
            ]
          "
            
          
          " ->
            fields = fields | list.append (source | text.getRange fieldStartOffset oldOffset)
            lines = lines | list.append fields
            # CSV files can have a trailing newline.
            ifElse
              (c | cursor.isAtEnd)
              {
                ifElse (oldOffset | equals 0) { Ok (,) } { Ok lines }
              }
              {
                recurse [lines, Fields: (,), FieldStartOffset: newOffset, p]
              }
          # TODO(JonasWanke): handle quoted field
          _ -> recurse [lines, fields, fieldStartOffset, p]
      Error Empty ->
        finalField = source | text.getRange fieldStartOffset oldOffset
        Ok
          ifElse
            finalField | text.isEmpty | bool.lazyAnd { fields | list.isEmpty }
            { lines }
            { lines | list.append (fields | list.append finalField) }
  }

test =
  checkEquals (decode "") (Ok (,))
  checkEquals (decode "{text.newline}") (Ok (,))

  checkEquals (decode "aaa") (Ok (("aaa",),))
  checkEquals (decode "aaa{text.newline}") (Ok (("aaa",),))

  checkEquals (decode " aaa ") (Ok ((" aaa ",),))
  checkEquals (decode " aaa {text.newline}") (Ok ((" aaa ",),))

  checkEquals (decode "aaa,bbb") (Ok (("aaa", "bbb"),))
  checkEquals (decode "aaa,bbb{text.newline}") (Ok (("aaa", "bbb"),))
  checkEquals (decode "aaa,bbb{text.newline}ccc,ddd") (Ok (("aaa", "bbb"), ("ccc", "ddd")))
  checkEquals
    decode "aaa,bbb{text.newline}ccc,ddd{text.newline}"
    Ok (("aaa", "bbb"), ("ccc", "ddd"))
  # Parser is broken, hence this verbose formatting: https://github.com/candy-lang/candy/issues/896
  checkEquals
    decode "
       aaa , bbb {text.newline} ccc , ddd {text.newline}
    "
    Ok (
      (
        "
           aaa 
        ",
        "
           bbb 
        ",
      ),
      (
        "
           ccc 
        ",
        "
           ddd 
        ",
      ),
    )

testRfcExamples =
  # From https://datatracker.ietf.org/doc/html/rfc4180#section-2
  checkEquals (decode "aaa,bbb,ccc") (Ok (("aaa", "bbb", "ccc"),))

  checkEquals
    decode "aaa,bbb,ccc{text.newline}zzz,yyy,xxx{text.newline}"
    Ok (("aaa", "bbb", "ccc"), ("zzz", "yyy", "xxx"))
  checkEquals
    decode "
      field_name,field_name,field_name{text.newline}aaa,bbb,ccc{text.newline}zzz,yyy,xxx{text.newline}
    "
    Ok (("field_name", "field_name", "field_name"), ("aaa", "bbb", "ccc"), ("zzz", "yyy", "xxx"))
  # TODO(JonasWanke): handle quoted field
  # checkEquals
  #   decode '"aaa,"b{{text.newline}}bb",ccc{{text.newline}}zzz,yyy,xxx{{text.newline}}"'
  #   Ok (("aaa", "b{text.newline}bb", "ccc"), ("zzz", "yyy", "xxx"))
  # checkEquals (decode '"aaa,"b""bb",ccc{{text.newline}}"') (Ok (("aaa", '"b"bb"', "ccc"),))
