public let dartPubspecFileName = "pubspec.yaml"
public let dartLibPath = Path.parse("lib")
public let dartSourcePath = dartLibPath.child("src")
public let dartTestPath = Path.parse("test")
public let dartFileExtension = "dart"

class DartCompilationUnit {
  let directives: List<DartDirective>
  let declarations: List<DartDeclaration>
}

class DartAnnotation {
  /// E.g., `@override` or `@sealed`

  let expression: DartExpression
}
public let dartOverrideAnnotation = DartAnnotation(
  DartIdentifier("override", Some<String>(dartCoreUrl)),
)
public let dartMetaSealedAnnotation = DartAnnotation(
  DartIdentifier("sealed", Some<String>(dartPackageMetaUrl)),
)

// Directives.

trait DartDirective {}

class DartImport {
  /// import 'package:blub/blub.dart' as blub;
  /// import 'blub.dart' show Foo, Bar;
  /// import 'foo.dart' hide secretFoo;

  let path: String
  let prefix: Maybe<String> = None<String>()
  let show: List<String> = List.empty<String>()
  let hide: List<String> = List.empty<String>()
}
impl DartImport: DartDirective

public let dartAsyncUrl = "dart:async"
public let dartCollectionUrl = "dart:collection"
public let dartConvertUrl = "dart:convert"
public let dartCoreUrl = "dart:core"
public let dartDeveloperUrl = "dart:developer"
public let dartMathUrl = "dart:math"
public let dartTypedDataUrl = "dart:typed_data"
// VM-only:
public let dartFfiUrl = "dart:ffi"
public let dartIoUrl = "dart:io"
public let dartIsolateUrl = "dart:isolate"
public let dartMirrorsUrl = "dart:mirrors"
// Web-only:
public let dartHtmlUrl = "dart:html"
public let dartIndexedDbUrl = "dart:indexed_db"
public let dartJsUrl = "dart:js"
public let dartJsUtilUrl = "dart:js_util"
public let dartSvgUrl = "dart:svg"
public let dartWebAudioUrl = "dart:web_audio"
public let dartWebGlUrl = "dart:web_gl"
public let dartWebSqlUrl = "dart:web_sql"

// Packages:
public let dartPackageMetaUrl = "package:meta/meta.dart";
public let dartPackagePathUrl = "package:path/path.dart";
public let dartPackageTestUrl = "package:test/test.dart";

class DartPart {
  /// part 'foo.dart';

  let path: String
}
impl DartPart: DartDirective

class DartPartOf {
  /// part of 'bar.dart';

  let path: String
}
impl DartPartOf: DartDirective

// Declarations.

trait DartDeclaration {}

class DartClass {
  /// @immutable
  /// class Foo extends Bar implements Baz with Whop {
  ///   final String flub;
  ///   final int flop;
  ///
  ///   void foo(bool value);
  /// }

  let name: String
  let docComment: Maybe<String> = None<String>()
  let annotations: List<DartAnnotation> = List.empty<DartAnnotation>()
  let isAbstract: Bool = false
  let typeParameters: List<DartTypeParameter> = List.empty<DartTypeParameter>()
  let extends_: Maybe<DartType> = None<DartType>()
  let implements_: List<DartType> = List.empty<DartType>()
  let with_: List<DartType> = List.empty<DartType>()
  let body: List<DartConstructor | DartField | DartGetter | DartSetter | DartFunction> = List.empty<DartConstructor | DartField | DartGetter | DartSetter | DartFunction>()
}
impl DartClass: DartDeclaration

class DartConstructor {
  let className: String
  let name: Maybe<String>
  let docComment: Maybe<String> = None<String>()
  let annotations: List<DartAnnotation> = List.empty<DartAnnotation>()
  let isConst: Bool = false
  let requiredParameters: List<DartParameter | DartInitializingFormal> = List.empty<DartParameter | DartInitializingFormal>()
  let positionalParameters: List<DartParameter | DartInitializingFormal> = List.empty<DartParameter | DartInitializingFormal>()
  let namedParameters: List<DartParameter | DartInitializingFormal> = List.empty<DartParameter | DartInitializingFormal>()
  let body: Maybe<DartBody> = None<DartBody>()
}
class DartInitializingFormal {
  /// this.foo
  /// this.bar

  let name: String
  let defaultValue: Maybe<DartExpression> = None<DartExpression>()
}

class DartMixin {
  let name: String
  let docComment: Maybe<String> = None<String>()
  let annotations: List<DartAnnotation> = List.empty<DartAnnotation>()
  let typeParameters: List<DartTypeParameter> = List.empty<DartTypeParameter>()
  let on_: Maybe<DartType> = None<DartType>()
  let body: List<DartGetter | DartSetter | DartFunction> = List.empty<DartGetter | DartSetter | DartFunction>()
}
impl DartMixin: DartDeclaration

class DartFunction {
  /// void foo();
  ///
  /// @override
  /// String toString() => 'Foo';
  ///
  /// int blub(int a, [int b, int c]) => ...;
  ///
  /// String bar(int a, {int b = 0, int c}) {
  ///   print('a=$a, b=$b, c=$c');
  /// }

  let isStatic: Bool = false
  let name: String
  let docComment: Maybe<String> = None<String>()
  let annotations: List<DartAnnotation> = List.empty<DartAnnotation>()
  let _returns: Maybe<DartType> = None<DartType>()
  let typeParameters: List<DartTypeParameter> = List.empty<DartTypeParameter>()
  let requiredParameters: List<DartParameter> = List.empty<DartParameter>()
  let positionalParameters: List<DartParameter> = List.empty<DartParameter>()
  let namedParameters: List<DartParameter> = List.empty<DartParameter>()
  let body: Maybe<DartBody> = None<DartBody>()
}
impl DartFunction: DartDeclaration

class DartParameter {
  let name: String
  let isRequired: Bool = false
  let type: Maybe<DartType> = None<DartType>()
  let defaultValue: Maybe<DartExpression> = None<DartExpression>()
}

class DartField {
  // TODO(never, JonasWanke): support annotations, e.g., for `@override`
  let name: String
  let docComment: Maybe<String> = None<String>()
  let isStatic: Bool = false
  let mutability: DartMutability = DartVar()
  let type: Maybe<DartType> = None<DartType>()
  let initialValue: Maybe<DartExpression> = None<DartExpression>()
}

trait DartMutability {}
class DartVar {}
impl DartVar: DartMutability
class DartFinal {}
impl DartFinal: DartMutability
class DartConst {}
impl DartConst: DartMutability

class DartGetter {
  let name: String
  let docComment: Maybe<String> = None<String>()
  let type: DartType
  let body: Maybe<DartBody> = None<DartBody>()
}

class DartSetter {
  let name: String
  let docComment: Maybe<String> = None<String>()
  let parameter: DartParameter
  let body: Maybe<DartBody> = None<DartBody>()
}

trait DartBody {}

class DartInlineBody {
  let expression: DartExpression
}
impl DartInlineBody: DartBody

class DartBlock {
  let statements: List<DartStatement | DartComment>
}
impl DartBlock: DartBody

class DartComment {
  let content: String
}

// Types.

public trait DartType: DartExpression

// TODO(never, JonasWanke): Move these to `DartType` when we support static properties in traits.
static let dartBool = DartNamedType(DartIdentifier("bool", Some<String>(dartCoreUrl)), List.empty<DartType>())
static fun dartComparable(t: DartType): DartType {
  DartNamedType(DartIdentifier("Comparable", Some<String>(dartCoreUrl)), List.of1<DartType>(t))
}
static let dartDeprecated = DartNamedType(DartIdentifier("Deprecated", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartDouble = DartNamedType(DartIdentifier("double", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartDynamic = DartNamedType(DartIdentifier("dynamic", None<String>()), List.empty<DartType>())
static let dartInt = DartNamedType(DartIdentifier("int", Some<String>(dartCoreUrl)), List.empty<DartType>())
static fun dartIterable(entry: DartType): DartType {
  DartNamedType(DartIdentifier("Iterable", Some<String>(dartCoreUrl)), List.of1<DartType>(entry))
}
static fun dartIterator(entry: DartType): DartType {
  DartNamedType(DartIdentifier("Iterator", Some<String>(dartCoreUrl)), List.of1<DartType>(entry))
}
static fun dartList(entry: DartType): DartType {
  DartNamedType(DartIdentifier("List", Some<String>(dartCoreUrl)), List.of1<DartType>(entry))
}
static fun dartMap(key: DartType, value: DartType): DartType {
  DartNamedType(DartIdentifier("Map", Some<String>(dartCoreUrl)), List.of2<DartType>(key, value))
}
static let dartNever = DartNamedType(DartIdentifier("Never", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartNull = DartNamedType(DartIdentifier("Null", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartNum = DartNamedType(DartIdentifier("num", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartObject = DartNamedType(DartIdentifier("Object", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartSet = DartNamedType(DartIdentifier("Set", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartStackTrace = DartNamedType(DartIdentifier("StackTrace", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartString = DartNamedType(DartIdentifier("String", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartType = DartNamedType(DartIdentifier("Type", Some<String>(dartCoreUrl)), List.empty<DartType>())
static let dartVoid = DartNamedType(DartIdentifier("void", None<String>()), List.empty<DartType>())
// Of course, "void" is not in "dart:core".

class DartNamedType {
  let name: DartIdentifier
  let typeArguments: List<DartType> = List.empty<DartType>()
}
impl DartNamedType: DartExpression & DartType
/// TODO(never, marcelgarus): Remove once the compiler realizes `DartType` implements `DartExpression`.

class DartFunctionType {
  let parameters: List<DartType | DartParameter> = List.empty<DartType | DartParameter>()
  // TODO(never, JonasWanke): simplify this to `List<DartType>`
  let positionalParameters: List<DartType | DartParameter> = List.empty<DartType | DartParameter>()
  let namedParameters: List<DartParameter> = List.empty<DartParameter>()
  let _returns: Maybe<DartType> = None<DartType>()
}
impl DartFunctionType: DartExpression & DartType
/// TODO(never, marcelgarus): Remove once the compiler realizes `DartType` implements `DartExpression`.

class DartTypeParameter {
  let name: String
  let extends_: Maybe<DartType> = None<DartType>()
}

// Expressions.

trait DartExpression {
  fun dot(property: String): DartNavigation { DartNavigation(this, property) }
  public fun call0(): DartCall {
    callPositional(List.empty<DartExpression>())
  }
  public fun call1(positionalArgument: DartExpression): DartCall {
    callPositional(List.of1<DartExpression>(positionalArgument))
  }
  public fun call2(
    firstPositionalArgument: DartExpression,
    secondPositionalArgument: DartExpression,
  ): DartCall {
    callPositional(List.of2<DartExpression>(firstPositionalArgument, secondPositionalArgument))
  }
  public fun callPositional(positionalArguments: List<DartExpression>): DartCall {
    call(
      positionalArguments = positionalArguments,
      namedArguments = Map.empty<String, DartExpression>(),
      typeArguments = List.empty<DartType>(),
    )
  }
  public fun call(
    positionalArguments: List<DartExpression>,
    namedArguments: Map<String, DartExpression>,
    typeArguments: List<DartType>,
  ): DartCall {
    DartCall(this, positionalArguments, namedArguments, typeArguments)
  }
  fun equals(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "==", other) }
  fun notEquals(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "!=", other) }
  fun opposite(): DartPrefixOperator { DartPrefixOperator("!", this) }
  fun and(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "&&", other) }
  fun or(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "||", other) }
  fun lessThan(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "<", other) }
  fun greaterThan(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, ">", other) }
  fun lessThanOrEqualTo(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "<=", other) }
  fun greaterThanOrEqualTo(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, ">=", other) }
  fun bitwiseAnd(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "&", other) }
  fun bitwiseOr(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "|", other) }
  fun plus(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "+", other) }
  fun minus(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "-", other) }
  fun times(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "*", other) }
  fun divide(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "/", other) }
  fun divideTruncate(other: DartExpression): DartBinaryOperator { DartBinaryOperator(this, "~/", other) }
  fun modulo(other: DartExpression): DartBinaryOperator { DartBinaryOperator(other, "%", other) }
  fun as_(other: DartType): DartBinaryOperator { DartBinaryOperator(this, "as", other as DartExpression) }
  fun is_(other: DartType): DartBinaryOperator { DartBinaryOperator(this, "is", other as DartExpression) }
}

class DartIdentifier {
  let name: String
  let importUrl: Maybe<String /* Url */> = None<String>()
}
impl DartIdentifier: DartExpression

let dartThis = DartIdentifier("this", None<String>())
let dartAssert = DartIdentifier("assert", None<String>())

class DartNullLiteral {}
impl DartNullLiteral: DartExpression
class DartStringLiteral {
  let value: String
}
impl DartStringLiteral: DartExpression
class DartIntLiteral {
  let value: Int
}
impl DartIntLiteral: DartExpression
class DartBoolLiteral {
  let value: Bool
}
impl DartBoolLiteral: DartExpression

class DartCall {
  let target: DartExpression
  let positionalArguments: List<DartExpression> = List.empty<DartExpression>()
  let namedArguments: Map<String, DartExpression> = Map.empty<String, DartExpression>()
  let typeArguments: List<DartType> = List.empty<DartType>()
}
impl DartCall: DartExpression

class DartNavigation {
  let target: DartExpression
  let property: String
}
impl DartNavigation: DartExpression

class DartParenthesizedExpression {
  let target: DartExpression
}
impl DartParenthesizedExpression: DartExpression

class DartBinaryOperator {
  let left: DartExpression
  let operator: String
  let right: DartExpression
}
impl DartBinaryOperator: DartExpression

class DartPrefixOperator {
  let operator: String
  let target: DartExpression
}
impl DartPrefixOperator: DartExpression

class DartAssignment {
  let left: DartExpression
  let right: DartExpression
}
impl DartAssignment: DartExpression

class DartClosure {
  let returns: Maybe<DartType> = None<DartType>()
  let requiredParameters: List<DartParameter> = List.empty<DartParameter>()
  let positionalParameters: List<DartParameter> = List.empty<DartParameter>()
  let namedParameters: List<DartParameter> = List.empty<DartParameter>()
  let body: DartBody
}
impl DartClosure: DartExpression

// Statements.

trait DartStatement {}

impl DartBlock: DartStatement

class DartFieldStatement {
  let field: DartField
}
impl DartFieldStatement: DartStatement

class DartExpressionStatement {
  let expression: DartExpression
}
impl DartExpressionStatement: DartStatement

class DartReturn {
  let expression: Maybe<DartExpression>
}
impl DartReturn: DartStatement

class DartBreak {
  let label: Maybe<String>
}
impl DartBreak: DartStatement

class DartContinue {
  let label: Maybe<String>
}
impl DartContinue: DartStatement

class DartIf {
  let condition: DartExpression
  let then: DartStatement
  let else_: Maybe<DartStatement> = None<DartStatement>()
}
impl DartIf: DartStatement

class DartWhile {
  let condition: DartExpression
  let label: Maybe<String>
  let body: DartStatement
}
impl DartWhile: DartStatement

class DartTry {
  let body: DartBlock
  let catchClauses: List<DartCatch>
}
impl DartTry: DartStatement
class DartCatch {
  let exceptionType: Maybe<DartIdentifier>
  let exceptionParameterName: Maybe<String>
  let stackTraceParameterName: Maybe<String>
  let body: DartBlock
}

class DartThrow {
  let exception: DartExpression
}
impl DartThrow: DartExpression

class DartRethrow
impl DartRethrow: DartStatement
