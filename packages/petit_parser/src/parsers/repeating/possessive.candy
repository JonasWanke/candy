use ....parsers

class PossessiveRepeatingParser<Item, Output> {
  let parser: Parser<Item, Output>
  let minimum: Int
  let maximum: Maybe<Int>
}
impl<Item, Output> PossessiveRepeatingParser<Item, Output>: Parser<Item, List<Output>> {
  fun parse(context: Context<Item>): Result<Success<List<Output>>, Failure> {
    let elements = MutableList.empty<Output>()

    mut let currentContext = context
    while (elements as Iterable<Output>).length() < minimum {
      let result = parser.parse(currentContext)
      if result is Error<Success<Output>, Failure> {
        let failure = (result as Error<Success<Output>, Failure>).error
        return Error<Success<List<Output>>, Failure>(Failure(failure.message, failure.offset))
      }
      let result = result.unwrap()

      elements.append(result.output)
      currentContext = Context<Item>(currentContext.buffer, result.offset)
    }

    loop {
      // TODO(never, JonasWanke): use a while-loop when we re-add lazy evaluation of disjunctions
      if maximum is Some<Int> {
        if ((elements as Iterable<Output>).length() >= maximum.unwrap()) { break unit }
      }

      let result = parser.parse(currentContext)
      if result is Error<Success<Output>, Failure> {
        return Ok<Success<List<Output>>, Failure>(currentContext.success<List<Output>>(elements))
      }
      let result = result.unwrap()

      elements.append(result.output)
      currentContext = Context<Item>(currentContext.buffer, result.offset)
    }

    return Ok<Success<List<Output>>, Failure>(Success<List<Output>>(elements, currentContext.offset))
  }
}
