use ...parsers

public fun string(string: String, message: String = "'{string}' expected."): Parser<String, String> {
  custom<String, String>(
    string.length(),
    {
      if (it as Iterable<String>).join("") == string { return Some<String>(string) }
      None<String>()
    },
    message,
  )
}

public fun digit(message: String = "Digit expected."): Parser<String, String> {
  character({ "0" <= it && it <= "9" }, message)
}
public fun singleCharacter(char: String, message: String = "'{char}' expected."): Parser<String, String> {
  character({ it == char }, message)
}
public fun character(tester: (String) => Bool, message: String): Parser<String, String> {
  CharacterParser(tester, message)
}

class CharacterParser {
  let tester: (String) => Bool
  let message: String
}
impl CharacterParser: Parser<String, String> {
  fun parse(context: Context<String>): Result<Success<String>, Failure> {
    let character = (context.buffer as Iterable<String>).get(context.offset)
    // TODO(JonasWanke): combine the following into one if-expression when we re-add lazy disjunctions
    if character is None<String> {
      return Error<Success<String>, Failure>(Failure(message, context.offset))
    }
    if !tester(character.unwrap()) {
      return Error<Success<String>, Failure>(Failure(message, context.offset))
    }

    return Ok<Success<String>, Failure>(Success<String>(character.unwrap(), context.offset + 1))
  }
}
