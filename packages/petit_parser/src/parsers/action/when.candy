use ....parsers

class WhenParser<Item, Output> {
  let parser: Parser<Item, Output>
  let tester: (Output) => Result<Unit, String>
}
impl<Item, Output> WhenParser<Item, Output>: Parser<Item, Output> {
  fun parse(context: Context<Item>): Result<Success<Output>, Failure> {
    let result = parser.parse(context)
    if result is Error<Success<Output>, Failure> {
      let failure = (result as Error<Success<Output>, Failure>).error
      return Error<Success<Output>, Failure>(failure)
    }
    let result = result.unwrap()

    let testResult = tester(result.output)
    if testResult is Error<Unit, String> {
      let error = (testResult as Error<Unit, String>).error
      return Error<Success<Output>, Failure>(Failure(error, context.offset))
    }

    Ok<Success<Output>, Failure>(Success<Output>(result.output, result.offset))
  }
}
