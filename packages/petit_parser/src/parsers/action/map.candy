use ....parsers

impl<Item, OldOutput> Parser<Item, OldOutput> {
  fun map<NewOutput>(mapper: (OldOutput) => NewOutput): Parser<Item, NewOutput> {
    MapParser<Item, OldOutput, NewOutput>(this, mapper)
  }
}

class MapParser<Item, OldOutput, NewOutput> {
  let parser: Parser<Item, OldOutput>
  let mapper: (OldOutput) => NewOutput
}
impl<Item, OldOutput, NewOutput> MapParser<Item, OldOutput, NewOutput>: Parser<Item, NewOutput> {
  fun parse(context: Context<Item>): Result<Success<NewOutput>, Failure> {
    let result = parser.parse(context)
    if result is Error<Success<OldOutput>, Failure> { return result }
    let result = result.unwrap()

    let newOutput = mapper(result.output)
    Ok<Success<NewOutput>, Failure>(Success<NewOutput>(newOutput, result.offset))
  }
}
