use ....parsers

public class Token<Item, Output> {
  public let value: Output
  public let span: Span
  public let input: List<Item>
}

public data class Span {
  public let start: Int
  /// Start offset, inclusive.

  public let end: Int
  /// End offset, exclusive.
}

class TokenParser<Item, Output> {
  let parser: Parser<Item, Output>
}
impl<Item, Output> TokenParser<Item, Output>: Parser<Item, Token<Item, Output>> {
  fun parse(context: Context<Item>): Result<Success<Token<Item, Output>>, Failure> {
    let result = parser.parse(context)
    if result is Error<Success<Output>, Failure> {
      let failure = (result as Error<Success<Output>, Failure>).error
      return Error<Success<Token<Item, Output>>, Failure>(Failure(failure.message, failure.offset))
    }
    let result = result.unwrap()

    let token = Token<Item, Output>(
      result.output,
      Span(context.offset, result.offset),
      context.buffer.subList(context.offset, result.offset),
    )
    Ok<Success<Token<Item, Output>>, Failure>(Success<Token<Item, Output>>(token, result.offset))
  }
}
