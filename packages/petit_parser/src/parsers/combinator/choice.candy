use ....parsers

impl<Item, Output> Parser<Item, Output> {
  fun or(other: Parser<Item, Output>): Parser<Item, Output> {
    ChoiceParser<Item, Output>(List.of2<Parser<Item, Output>>(this, other))
  }
}

class ChoiceParser<Item, Output> {
  let parsers: List<Parser<Item, Output>>
}
impl<Item, Output> ChoiceParser<Item, Output>: Parser<Item, Output> {
  fun parse(context: Context<Item>): Result<Success<Output>, Failure> {
    mut let result: Result<Success<Output>, Failure> = Error<Success<Output>, Failure>(
      Failure("ChoiceParser has no children.", context.offset),
    )
    for child in (parsers as Iterable<Parser<Item, Output>>) {
      result = child.parse(context)
      if result is Ok<Success<Output>, Failure> { return result }
    }
    result
  }
}
