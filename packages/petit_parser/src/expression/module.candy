use ..parsers
public use .group

fun expression<Item, Output>(groups: Iterable<(ExpressionGroup<Item, Output>) => Unit>): Parser<Item, Output> {
  let loopback = notYetDefined<Item, Output>("Parser not yet defined.")
  let parser = groups.foldLeft<Parser<Item, Output>>(
    failure<Item, Output>("Highest priority group should define a primitive parser."),
    { result, item =>
      let group = ExpressionGroup<Item, Output>(
        loopback,
        MutableList.empty<Parser<Item, Output>>(),
        MutableList.empty<Parser<Item, Output>>(),
        MutableList.empty<Parser<Item, (Output, Output) => Output>>(),
        MutableList.empty<Parser<Item, (Output, Output) => Output>>(),
      )
      item(group)
      group.build(result)
    },
  )
  loopback.delegate = parser
  parser
}
