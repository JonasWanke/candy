use compiler_utils
use cst
use petit_parser

public class ExpectedTypeCompilerError {
  public let file: FancyFile
  public let node: CstNode<CstTrait | CstImpl | CstType | CstStructTypeField | CstIntersectionType>
}
impl ExpectedTypeCompilerError: CompilerError {
  public fun id(): String { "expected-type" }

  fun span(): Span {
    if node.child is CstTrait {
      return node.cast<CstTrait>().child.keyword.child.span
    }
    if node.child is CstImpl {
      return node.cast<CstImpl>().child.keyword.child.span
    }
    if node.child is CstType {
      return node.cast<CstType>().child.keyword.child.span
    }
    if node.child is CstStructTypeField {
      return node.cast<CstStructTypeField>().child.type.unwrap().first.child.span
    }
    if node.child is CstIntersectionType {
      return node.cast<CstIntersectionType>().child.ampersand.child.span
    }
    throw "Unknown node: {node}."
  }
  public fun location(): Location { Location(file, span()) }
  public fun title(): String { "Expected type." }
  public fun description(): String {
    /// TODO(never, JonasWanke): add a description
    ""
  }
}
