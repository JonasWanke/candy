use compiler_utils
use cst
use petit_parser

public class ExpectedExpressionCompilerError {
  public let file: File
  public let node: CstNode<
    CstExpressionBody
      | CstDelegationBody
      | CstGroupExpression
      | CstBinaryExpression
      | CstValueArgument
  >
}
impl ExpectedExpressionCompilerError: CompilerError {
  public fun id(): String { "expected-expression" }

  fun span(): Span {
    if node.child is CstExpressionBody {
      return node.cast<CstExpressionBody>().child.arrow.child.span
    }
    if node.child is CstDelegationBody {
      return node.cast<CstDelegationBody>().child.equalsSign.child.span
    }
    if node.child is CstGroupExpression {
      return node.cast<CstGroupExpression>().child.openingParenthesis.child.span
    }
    if node.child is CstBinaryExpression {
      return node.cast<CstBinaryExpression>().child.operator.child.span
    }
    if node.child is CstValueArgument {
      return node.cast<CstValueArgument>().child.name.unwrap().second.child.span
    }
    throw "Unknown body: {node}."
  }
  public fun location(): Location { Location(file, span()) }
  public fun title(): String { "Expected expression." }
  public fun description(): String {
    /// TODO(JonasWanke): add a description
    ""
  }
}
