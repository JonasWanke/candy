use compiler_utils
use cst
use petit_parser

public class MissingClosingBracketCompilerError {
  public let file: File
  public let node: CstNode<
    CstDeclarationContent
    | CstBlockBody
    | CstValueParameters
    | CstGroupType
    | CstFunctionTypeParameterTypes
    | CstTupleType
    | CstTypeParameters
    | CstTypeArguments
    | CstGroupExpression
    | CstTupleExpression
    | CstInterpolatedStringPart
    | CstValueArguments
  >
}
impl MissingClosingBracketCompilerError: CompilerError {
  public fun id(): String { "missing-closing-bracket" }

  fun span(): Span {
    if node.child is CstDeclarationContent {
      return node.cast<CstDeclarationContent>().child.openingCurlyBrace.child.span
    }
    if node.child is CstBlockBody {
      return node.cast<CstBlockBody>().child.openingCurlyBrace.child.span
    }
    if node.child is CstValueParameters {
      return node.cast<CstValueParameters>().child.openingParenthesis.child.span
    }
    if node.child is CstGroupType {
      return node.cast<CstGroupType>().child.openingParenthesis.child.span
    }
    if node.child is CstFunctionTypeParameterTypes {
      return node.cast<CstFunctionTypeParameterTypes>().child.openingParenthesis.child.span
    }
    if node.child is CstTupleType {
      return node.cast<CstTupleType>().child.openingParenthesis.child.span
    }
    if node.child is CstTypeParameters {
      return node.cast<CstTypeParameters>().child.openingAngleBracket.child.span
    }
    if node.child is CstTypeArguments {
      return node.cast<CstTypeArguments>().child.openingAngleBracket.child.span
    }
    if node.child is CstGroupExpression {
      return node.cast<CstGroupExpression>().child.openingParenthesis.child.span
    }
    if node.child is CstTupleExpression {
      node.cast<CstTupleExpression>().child.openingParenthesis.child.span
    }
    if node.child is CstInterpolatedStringPart {
      node.cast<CstInterpolatedStringPart>().child.openingCurlyBrace.child.span
    }
    if node.child is CstValueArguments {
      node.cast<CstValueArguments>().child.openingParenthesis.child.span
    }
    throw "Unknown node: {node}."
  }
  public fun location(): Location { Location(file, span()) }
  public fun title(): String { "Missing closing bracket." }
  public fun description(): String {
    /// TODO(JonasWanke): add a description for this error
    ""
  }
}
