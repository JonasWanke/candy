use ..declarations
use ..file
use ..node
use ..types

public class AstExpressionId {
  let parentId: AstDeclarationId | AstBodyId | AstValueParameterId | AstExpressionId
  let value: Int
}
impl AstExpressionId: AstNodeId


public trait /* enum */ AstExpression
impl AstExpression: AstNode


public class AstIntExpression {
  public let id: AstExpressionId
  public let value: Int
}
impl AstIntExpression: AstExpression


public class AstStringExpression {
  public let id: AstExpressionId
  public let parts: List<AstStringPart>
}
impl AstStringExpression: AstExpression

public trait /* enum */ AstStringPart

public class AstLiteralStringPart {
  public let id: AstExpressionId
  public let value: AstIdentifier
}
impl AstLiteralStringPart: AstStringPart

public class AstInterpolatedStringPart {
  public let id: AstExpressionId
  public let expression: AstExpression
}
impl AstInterpolatedStringPart: AstStringPart


public class AstLambdaExpression {
  public let id: AstExpressionId
  public let valueParameters: List<AstValueParameter>
  public let expressions: List<AstExpression>
}
impl AstLambdaExpression: AstExpression


public class AstIdentifierExpression {
  public let id: AstExpressionId
  public let value: AstIdentifier
}
impl AstIdentifierExpression: AstExpression


public class AstTupleExpression {
  public let id: AstExpressionId
  public let expressions: List<AstExpression>
}
impl AstTupleExpression: AstExpression


public class AstBinaryExpression {
  public let id: AstExpressionId

  public let leftOperand: Maybe<AstExpression>

  public let operator: AstIdentifier
  /// May be one of the following:
  ///
  /// * arithmetic: `+`, `-`, `*`, `/`, `~/`, `%`
  /// * assignment & comparison: `=`, `==`, `!=`, `<`, `<=`, `>`, `>=`
  /// * logical: `&`, `|`, `=>`
  ///
  /// TODO(JonasWanke): convert this to an enum when we support these

  public let rightOperand: Maybe<AstExpression>
}
impl AstBinaryExpression: AstExpression


impl AstProperty: AstExpression


public class AstNavigationExpression {
  public let id: AstExpressionId
  public let receiver: Maybe<AstExpression>
  public let target: AstIdentifier
}
impl AstNavigationExpression: AstExpression

public class AstCallExpression {
  public let id: AstExpressionId
  public let receiver: Maybe<AstExpression>
  public let typeArguments: List<AstTypeArgument>
  public let valueArguments: List<AstValueArgument>
}
impl AstCallExpression: AstExpression

public class AstValueArgument {
  public let id: AstExpressionId
  public let name: Maybe<AstIdentifier>
  public let value: Maybe<AstExpression>
}


public class AstReturnExpression {
  public let id: AstExpressionId
  public let value: Maybe<AstExpression>
}
impl AstReturnExpression: AstExpression
