use ..declarations
use ..expressions
use ..file
use ..node

public class AstInlineTypeId {
  let parentId: AstDeclarationId
      | AstInlineTypeId
      | AstTypeParameterId
      | AstTypeArgumentId
      | AstValueParameterId
      | AstExpressionId
  let value: Int
}
impl AstInlineTypeId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool {
    (parentId as Equals) == (other.parentId as Equals) &&
      (value as Equals) == (other.value as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (parentId as Hash).hash<T>(hasher)
    (value as Hash).hash<T>(hasher)
  }
}

public trait /* enum */ AstInlineType {
  let modifiers: List<AstIdentifier>
}
impl AstInlineType: AstNode & Equals & Hash


public class AstNamedType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let nameParts: List<AstIdentifier>
  public let typeArguments: List<AstTypeArgument>
}
impl AstNamedType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (nameParts as Equals) == (other.nameParts as Equals) &&
      (typeArguments as Equals) == (other.typeArguments as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (nameParts as Hash).hash<T>(hasher)
    (typeArguments as Hash).hash<T>(hasher)
  }
}


public class AstFunctionType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let receiverType: Maybe<AstInlineType>
  public let parameterTypes: List<AstInlineType>
  public let returnType: AstInlineType
}
impl AstFunctionType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (receiverType as Equals) == (other.receiverType as Equals) &&
      (parameterTypes as Equals) == (other.parameterTypes as Equals) &&
      (returnType as Equals) == (other.returnType as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (receiverType as Hash).hash<T>(hasher)
    (parameterTypes as Hash).hash<T>(hasher)
    (returnType as Hash).hash<T>(hasher)
  }
}


public class AstPositionalTupleType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstInlineType>
}
impl AstPositionalTupleType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (types as Equals) == (other.types as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (types as Hash).hash<T>(hasher)
  }
}


public class AstNamedTupleType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstNamedTupleTypeField>
}
impl AstNamedTupleType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (types as Equals) == (other.types as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (types as Hash).hash<T>(hasher)
  }
}

public class AstNamedTupleTypeField {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let type: AstInlineType
}
impl AstNamedTupleTypeField: Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (name as Equals) == (other.name as Equals) &&
      (type as Equals) == (other.type as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (name as Hash).hash<T>(hasher)
    (type as Hash).hash<T>(hasher)
  }
}


public class AstEnumType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let variants: List<AstEnumTypeVariant>
}
impl AstEnumType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (variants as Equals) == (other.variants as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (variants as Hash).hash<T>(hasher)
  }
}

public class AstEnumTypeVariant {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let valueType: Maybe<AstInlineType>
}
impl AstEnumTypeVariant: Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (name as Equals) == (other.name as Equals) &&
      (valueType as Equals) == (other.valueType as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (name as Hash).hash<T>(hasher)
    (valueType as Hash).hash<T>(hasher)
  }
}


public class AstIntersectionType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstInlineType>
}
impl AstIntersectionType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (types as Equals) == (other.types as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (types as Hash).hash<T>(hasher)
  }
}


public class AstErrorType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier> = List.empty<AstIdentifier>()
}
impl AstErrorType: AstInlineType & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
  }
}


public class AstTypeParameterId {
  let parentId: AstDeclarationId
  let name: String
}
impl AstTypeParameterId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool {
    (parentId as Equals) == (other.parentId as Equals) && (name as Equals) == (other.name as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (parentId as Hash).hash<T>(hasher)
    (name as Hash).hash<T>(hasher)
  }
}

public class AstTypeParameter {
  public let id: AstTypeParameterId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let upperBound: Maybe<AstInlineType>
}
impl AstTypeParameter: Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (name as Equals) == (other.name as Equals) &&
      (upperBound as Equals) == (other.upperBound as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (name as Hash).hash<T>(hasher)
    (upperBound as Hash).hash<T>(hasher)
  }
}


public class AstTypeArgumentId {
  let parentId: AstInlineTypeId | AstExpressionId
  let index: Int
}
impl AstTypeArgumentId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool {
    (parentId as Equals) == (other.parentId as Equals) &&
      (index as Equals) == (other.index as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (parentId as Hash).hash<T>(hasher)
    (index as Hash).hash<T>(hasher)
  }
}

public class AstTypeArgument {
  public let id: AstTypeArgumentId
  public let type: AstInlineType
}
impl AstTypeArgument: Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) && (type as Equals) == (other.type as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (type as Hash).hash<T>(hasher)
  }
}
