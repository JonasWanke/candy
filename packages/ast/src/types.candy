use ..declarations
use ..expressions
use ..file
use ..node

public class AstInlineTypeId {
  let parentId: AstDeclarationId
      | AstInlineTypeId
      | AstTypeParameterId
      | AstTypeArgumentId
      | AstValueParameterId
      | AstExpressionId
  let value: Int
}
impl AstInlineTypeId: AstNodeId

public trait /* enum */ AstInlineType {
  let modifiers: List<AstIdentifier>
}
impl AstInlineType: AstNode


public class AstNamedType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let nameParts: List<AstIdentifier>
  public let typeArguments: List<AstTypeArgument>
}
impl AstNamedType: AstInlineType


public class AstFunctionType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let receiverType: Maybe<AstInlineType>
  public let parameterTypes: List<AstInlineType>
  public let returnType: AstInlineType
}
impl AstFunctionType: AstInlineType


public class AstTupleType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstInlineType>
}
impl AstTupleType: AstInlineType


public class AstNamedTupleType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstNamedTupleTypeField>
}
impl AstNamedTupleType: AstInlineType

public class AstNamedTupleTypeField {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let type: AstInlineType
}

public class AstEnumType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let variants: List<(AstIdentifier, Maybe<AstInlineType>)>
}
impl AstEnumType: AstInlineType


public class AstIntersectionType {
  public let id: AstInlineTypeId
  public let modifiers: List<AstIdentifier>
  public let types: List<AstInlineType>
}
impl AstIntersectionType: AstInlineType


public class AstTypeParameterId {
  let parentId: AstDeclarationId
  let name: String
}
impl AstTypeParameterId: AstNodeId

public class AstTypeParameter {
  public let id: AstTypeParameterId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let upperBound: Maybe<AstInlineType>
}


public class AstTypeArgumentId {
  let parentId: AstInlineTypeId | AstExpressionId
  let index: Int
}
impl AstTypeArgumentId: AstNodeId

public class AstTypeArgument {
  public let id: AstTypeArgumentId
  public let type: Maybe<AstInlineType>
}
