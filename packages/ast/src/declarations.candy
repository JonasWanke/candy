use ..comment
use ..expressions
use ..node
use ..types

public trait /* enum */ AstDeclaration {
  public let modifiers: List<String>
}
impl AstDeclaration: AstNode


public class AstModule {
  public let id: AstNodeId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<String>
  public let name: Maybe<String>
  public let innerDeclarations: List<
    AstModule
    | AstTrait
    | AstImpl
    | AstClass
    | AstFunction
    | AstProperty
  >
}
impl AstModule: AstDeclaration


public class AstTrait {
  public let id: AstNodeId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<String>
  public let name: Maybe<String>
  public let typeParameters: List<AstTypeParameter>
  public let upperBound: Maybe<AstCandyType>
  public let innerDeclarations: List<AstTrait | AstClass | AstFunction | AstProperty>
}
impl AstTrait: AstDeclaration

public class AstImpl {
  public let id: AstNodeId
  public let modifiers: List<String>
  public let typeParameters: List<AstTypeParameter>
  public let type: AstCandyType
  public let traits: List<AstCandyType>
  public let innerDeclarations: List<AstFunction | AstProperty>
}
impl AstImpl: AstDeclaration


public class AstClass {
  public let id: AstNodeId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<String>
  public let name: String
  public let typeParameters: List<AstTypeParameter>
  public let innerDeclarations: List<AstTrait | AstClass | AstFunction | AstProperty>
}
impl AstClass: AstDeclaration


public class AstFunction {
  public let id: AstNodeId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<String>
  public let name: String
  public let typeParameters: List<AstTypeParameter>
  public let valueParameters: List<AstValueParameter>
  public let returnType: Maybe<AstCandyType>
  public let body: Maybe<AstBlockBody | AstExpressionBody | AstDelegationBody>
}
impl AstFunction: AstDeclaration

public class AstValueParameter {
  public let id: AstNodeId
  public let name: Maybe<String>
  public let type: Maybe<AstCandyType>
  public let defaultValue: Maybe<AstDelegationBody>
}


public class AstProperty {
  public let id: AstNodeId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<String>
  public let isMutable: Bool
  public let name: Maybe<String>
  public let type: Maybe<AstCandyType>
  public let initializer: Maybe<AstDelegationBody>
}
impl AstProperty: AstDeclaration

public class AstBlockBody {
  public let id: AstNodeId
  public let expressions: List<AstExpression>
}
impl AstBlockBody: AstNode
public class AstExpressionBody {
  public let id: AstNodeId
  public let expression: Maybe<AstExpression>
}
impl AstExpressionBody: AstNode
public class AstDelegationBody {
  public let id: AstNodeId
  public let expression: Maybe<AstExpression>
}
impl AstDelegationBody: AstNode
