use ..comment
use ..expressions
use ..file
use ..node
use ..types

public class AstDeclarationId {
  let parentId: AstFileId | AstDeclarationId | AstBodyId | AstValueParameterId | AstExpressionId
  let name: String
}
impl AstDeclarationId: AstNodeId

public trait /* enum */ AstDeclaration {
  public let modifiers: List<AstIdentifier>
}
impl AstDeclaration: AstNode


public class AstModule {
  public let id: AstDeclarationId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let innerDeclarations: List<AstModule | AstTrait | AstImpl | AstType | AstFunction>
}
impl AstModule: AstDeclaration


public class AstTrait {
  public let id: AstDeclarationId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let typeParameters: List<AstTypeParameter>
  public let upperBound: Maybe<AstInlineType>
  public let innerDeclarations: List<AstTrait | AstType | AstFunction>
}
impl AstTrait: AstDeclaration

public class AstImpl {
  public let id: AstDeclarationId
  public let modifiers: List<AstIdentifier>
  public let typeParameters: List<AstTypeParameter>
  public let type: AstInlineType
  public let traits: List<AstNamedType | AstErrorType>
  public let innerDeclarations: List<AstFunction>
}
impl AstImpl: AstDeclaration


public class AstType {
  public let id: AstDeclarationId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let typeParameters: List<AstTypeParameter>
  public let type: AstInlineType
}
impl AstType: AstDeclaration


public class AstFunction {
  public let id: AstDeclarationId
  public let candyDoc: Maybe<AstCandyDoc>
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let typeParameters: List<AstTypeParameter>
  public let valueParameters: List<AstValueParameter>
  public let returnType: AstInlineType
  public let body: Maybe<AstBlockBody | AstExpressionBody | AstDelegationBody>
}
impl AstFunction: AstDeclaration


public class AstValueParameterId {
  let parentId: AstDeclarationId | AstExpressionId
  let name: String
}
impl AstValueParameterId: AstNodeId

public class AstValueParameter {
  public let id: AstValueParameterId
  public let modifiers: List<AstIdentifier>
  public let name: AstIdentifier
  public let type: Maybe<AstInlineType>
  public let defaultValue: Maybe<AstExpression>
}


public class AstBodyId {
  let parentId: AstDeclarationId
}
impl AstBodyId: AstNodeId

public class AstBlockBody {
  public let id: AstBodyId
  public let expressions: List<AstExpression>
}
impl AstBlockBody: AstNode
public class AstExpressionBody {
  public let id: AstBodyId
  public let expression: Maybe<AstExpression>
}
impl AstExpressionBody: AstNode
public class AstDelegationBody {
  public let id: AstBodyId
  public let expression: Maybe<AstExpression>
}
impl AstDelegationBody: AstNode
