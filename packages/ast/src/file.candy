use compiler_utils
use ..node
use ..declarations
use ..expressions
use ..types

public data class AstFileId {
  let file: FancyFile
}
impl AstFileId: AstNodeId

public class AstFile {
  public let id: AstFileId
  public let useLines: List<AstUseLine>
  public let declarations: List<AstModule | AstTrait | AstImpl | AstType | AstFunction>
}
impl AstFile: AstNode


public data class AstUseLineId {
  public let parentId: AstFileId
  public let index: Int
}
impl AstUseLineId: AstNodeId

public class AstUseLine {
  public let id: AstUseLineId
  public let modifiers: List<AstIdentifier>
  public let target: AstUseLineTarget
}
impl AstUseLine: AstNode


public class AstUseLineTargetId {
  public let parentId: AstUseLineId
}
impl AstUseLineTargetId: AstNodeId

public trait /* enum */ AstUseLineTarget

public class AstLocalAbsoluteUseLineTarget {
  public let id: AstUseLineTargetId
  public let path: List<AstIdentifier>
}
impl AstLocalAbsoluteUseLineTarget: AstUseLineTarget

public class AstLocalRelativeUseLineTarget {
  public let id: AstUseLineTargetId
  public let parentNavigations: Int
  public let path: List<AstIdentifier>
}
impl AstLocalRelativeUseLineTarget: AstUseLineTarget

public class AstGlobalUseLineTarget {
  public let id: AstUseLineTargetId
  public let packagePath: List<AstIdentifier>
  public let moduleName: Maybe<AstIdentifier>
}
impl AstGlobalUseLineTarget: AstUseLineTarget


public class AstIdentifierId {
  public let parentId: AstUseLineId
      | AstUseLineTargetId
      | AstDeclarationId
      | AstTypeParameterId
      | AstValueParameterId
      | AstInlineTypeId
      | AstExpressionId
  public let index: Int
}
impl AstIdentifierId: AstNodeId

public class AstIdentifier {
  public let id: AstIdentifierId
  public let value: String
}
