use compiler_utils
use ..node
use ..declarations
use ..expressions
use ..types

public class AstFileId {
  let file: FancyFile
}
impl AstFileId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool { (file as Equals) == (other.file as Equals) }
  fun hash<T>(hasher: Hasher<T>) { (file as Hash).hash<T>(hasher) }
}

public class AstFile {
  public let id: AstFileId
  public let useLines: List<AstUseLine>
  public let declarations: List<AstModule | AstTrait | AstImpl | AstType | AstFunction>
}
impl AstFile: AstNode & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (useLines as Equals) == (other.useLines as Equals) &&
      (declarations as Equals) == (other.declarations as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (useLines as Hash).hash<T>(hasher)
    (declarations as Hash).hash<T>(hasher)
  }
}


public class AstUseLineId {
  public let parentId: AstFileId
  public let index: Int
}
impl AstUseLineId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool {
    (parentId as Equals) == (other.parentId as Equals) &&
      (index as Equals) == (other.index as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (parentId as Hash).hash<T>(hasher)
    (index as Hash).hash<T>(hasher)
  }
}

public class AstUseLine {
  public let id: AstUseLineId
  public let modifiers: List<AstIdentifier>
  public let target: AstUseLineTarget
}
impl AstUseLine: AstNode & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (modifiers as Equals) == (other.modifiers as Equals) &&
      (target as Equals) == (other.target as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (modifiers as Hash).hash<T>(hasher)
    (target as Hash).hash<T>(hasher)
  }
}


public class AstUseLineTargetId {
  public let parentId: AstUseLineId
}
impl AstUseLineTargetId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool { (parentId as Equals) == (other.parentId as Equals) }
  fun hash<T>(hasher: Hasher<T>) { (parentId as Hash).hash<T>(hasher) }
}

public trait /* enum */ AstUseLineTarget

public class AstLocalAbsoluteUseLineTarget {
  public let id: AstUseLineTargetId
  public let path: List<AstIdentifier>
}
impl AstLocalAbsoluteUseLineTarget: AstUseLineTarget & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (path as Equals) == (other.path as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (path as Hash).hash<T>(hasher)
  }
}

public class AstLocalRelativeUseLineTarget {
  public let id: AstUseLineTargetId
  public let parentNavigations: Int
  public let path: List<AstIdentifier>
}
impl AstLocalRelativeUseLineTarget: AstUseLineTarget & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (parentNavigations as Equals) == (other.parentNavigations as Equals) &&
      (path as Equals) == (other.path as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (parentNavigations as Hash).hash<T>(hasher)
    (path as Hash).hash<T>(hasher)
  }
}

public class AstGlobalUseLineTarget {
  public let id: AstUseLineTargetId
  public let packagePath: List<AstIdentifier>
  public let moduleName: Maybe<AstIdentifier>
}
impl AstGlobalUseLineTarget: AstUseLineTarget & Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) &&
      (packagePath as Equals) == (other.packagePath as Equals) &&
      (moduleName as Equals) == (other.moduleName as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (packagePath as Iterable<AstIdentifier>).hash<T>(hasher)
    (moduleName as Hash).hash<T>(hasher)
  }
}


public class AstIdentifierId {
  public let parentId: AstUseLineId
      | AstUseLineTargetId
      | AstDeclarationId
      | AstTypeParameterId
      | AstValueParameterId
      | AstInlineTypeId
      | AstExpressionId
  public let index: Int
}
impl AstIdentifierId: AstNodeId & Equals & Hash {
  fun equals(other: This): Bool {
    (parentId as Equals) == (other.parentId as Equals) &&
      (index as Equals) == (other.index as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (parentId as Hash).hash<T>(hasher)
    (index as Hash).hash<T>(hasher)
  }
}

public class AstIdentifier {
  public let id: AstIdentifierId
  public let value: String
}
impl AstIdentifier: Equals & Hash {
  fun equals(other: This): Bool {
    (id as Equals) == (other.id as Equals) && (value as Equals) == (other.value as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (id as Hash).hash<T>(hasher)
    (value as Hash).hash<T>(hasher)
  }
}
