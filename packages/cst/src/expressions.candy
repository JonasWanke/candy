use ..declarations
use ..node
use ..tokens
use ..types

public trait /* enum */ CstExpression


public class CstIntExpression {
  public let value: CstNode<IntLiteralToken>
}
impl CstIntExpression: CstExpression


public class CstStringExpression {
  public let openingQuote: CstNode<PunctuationToken>
  public let parts: List<CstNode<StringPart>>
  public let closingQuote: Maybe<CstNode<PunctuationToken>>
}
impl CstStringExpression: CstExpression

public trait /* enum */ StringPart

public class CstLiteralStringPart {
  public let value: CstNode<StringLiteralToken>
}
impl CstLiteralStringPart: StringPart

public class CstEscapedStringPart {
  public let backslash: CstNode<PunctuationToken>
  public let value: Maybe<CstNode<StringLiteralToken>>
}
impl CstEscapedStringPart: StringPart

public class CstInterpolatedStringPart {
  public let openingCurlyBrace: CstNode<PunctuationToken>
  public let expression: Maybe<CstNode<CstExpression>>
  public let closingCurlyBrace: Maybe<CstNode<PunctuationToken>>
}
impl CstInterpolatedStringPart: StringPart


public class CstLambdaExpression {
  public let openingCurlyBrace: CstNode<PunctuationToken>
  public let valueParameters: Maybe<CstNode<CstLambdaExpressionValueParameters>>
  public let expressions: List<CstNode<CstExpression>>
  public let closingCurlyBrace: Maybe<CstNode<PunctuationToken>>
}
impl CstLambdaExpression: CstExpression

public class CstLambdaExpressionValueParameters {
  public let valueParameters: List<CstNode<CstValueParameter | PunctuationToken>>
  public let arrow: CstNode<PunctuationToken>
}


public class CstIdentifierExpression {
  public let value: CstNode<IdentifierToken>
}
impl CstIdentifierExpression: CstExpression


public class CstTypeArgumentsExpression {
  public let value: CstNode<CstExpression>
  public let typeArguments: CstNode<CstTypeArguments>
}
impl CstTypeArgumentsExpression: CstExpression


public class CstGroupExpression {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let expression: Maybe<CstNode<CstExpression>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstGroupExpression: CstExpression


public class CstTupleExpression {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let expressions: List<CstNode<CstExpression | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstTupleExpression: CstExpression


public class CstBinaryExpression {
  public let leftOperand: Maybe<CstNode<CstExpression>>

  public let operator: CstNode<PunctuationToken>
  /// May be one of the following:
  ///
  /// * arithmetic: `+`, `-`, `*`, `/`, `~/`, `%`
  /// * assignment & comparison: `=`, `==`, `!=`, `<`, `<=`, `>`, `>=`
  /// * logical: `&`, `|`, `=>`
  ///
  /// TODO(JonasWanke): convert this to an enum when we support these

  public let rightOperand: Maybe<CstNode<CstExpression>>
}
impl CstBinaryExpression: CstExpression


public class CstPropertyExpression {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let type: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let initializer: Maybe<CstNode<CstDelegationBody>>
}
impl CstPropertyExpression: CstExpression


public class CstNavigationExpression {
  public let receiver: CstNode<CstExpression>
  public let dot: CstNode<PunctuationToken>
  public let target: Maybe<CstNode<IdentifierToken>>
}
impl CstNavigationExpression: CstExpression

public class CstCallExpression {
  public let receiver: CstNode<CstExpression>
  public let valueArguments: CstNode<CstValueArguments>
}
impl CstCallExpression: CstExpression

public class CstValueArguments {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let valueArguments: List<CstNode<CstValueArgument | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
public class CstValueArgument {
  public let name: Maybe<(Maybe<CstNode<IdentifierToken>>, CstNode<PunctuationToken>)>
  public let value: Maybe<CstNode<CstExpression>>
}


public class CstReturnExpression {
  public let returnKeyword: CstNode<KeywordToken>
  public let value: Maybe<CstNode<CstExpression>>
}
impl CstReturnExpression: CstExpression
