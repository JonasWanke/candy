use ..node
use ..tokens

public trait /* enum */ CstInlineType


public class CstNamedType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let nameParts: List<CstNode<IdentifierToken | PunctuationToken>>
  public let typeArguments: Maybe<CstNode<CstTypeArguments>>
}
impl CstNamedType: CstInlineType


public class CstGroupType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let openingParenthesis: CstNode<PunctuationToken>
  public let type: Maybe<CstNode<CstInlineType>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstGroupType: CstInlineType


public class CstFunctionType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let receiverType: Maybe<CstNode<CstInlineType>>
  public let parameterTypes: Maybe<CstNode<CstFunctionTypeParameterTypes>>
  public let arrow: CstNode<PunctuationToken>
  public let returnType: Maybe<CstNode<CstInlineType>>
}
impl CstFunctionType: CstInlineType

public class CstFunctionTypeParameterTypes {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let parameterTypes: List<CstNode<CstInlineType | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}


public class CstPositionalTupleType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let openingParenthesis: CstNode<PunctuationToken>
  public let types: List<CstNode<CstInlineType | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstPositionalTupleType: CstInlineType


public class CstNamedTupleType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let openingParenthesis: CstNode<PunctuationToken>
  public let fields: List<CstNode<CstNamedTupleTypeField | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstNamedTupleType: CstInlineType

public class CstNamedTupleTypeField {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let type: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
}


public class CstEnumType {
  public let variants: List<CstNode<CstEnumTypeVariant | PunctuationToken>>
}
impl CstEnumType: CstInlineType

public class CstEnumTypeVariant {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let nameAndValueType: Maybe<(CstNode<IdentifierToken>, Maybe<CstNode<CstInlineType>>)>
}


public class CstIntersectionType {
  public let leftType: CstNode<CstInlineType>
  public let ampersand: CstNode<PunctuationToken>
  public let rightType: Maybe<CstNode<CstInlineType>>
}
impl CstIntersectionType: CstInlineType


public class CstTypeParameters {
  public let openingAngleBracket: CstNode<PunctuationToken>
  public let typeParameters: List<CstNode<CstTypeParameter | PunctuationToken>>
  public let closingAngleBracket: Maybe<CstNode<PunctuationToken>>
}
public class CstTypeParameter {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let upperBound: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
}

public class CstTypeArguments {
  public let openingAngleBracket: CstNode<PunctuationToken>
  public let typeArguments: List<CstNode<CstTypeArgument | PunctuationToken>>
  public let closingAngleBracket: Maybe<CstNode<PunctuationToken>>
}
public class CstTypeArgument {
  public let type: CstNode<CstInlineType>
}
