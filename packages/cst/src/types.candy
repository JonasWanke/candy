use ..node
use ..tokens

public trait /* enum */ CstType


public class CstNamedType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let nameParts: List<CstNode<IdentifierToken | PunctuationToken>>
  public let typeArguments: Maybe<CstNode<CstTypeArguments>>
}
impl CstNamedType: CstType


public class CstGroupType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let openingParenthesis: CstNode<PunctuationToken>
  public let type: Maybe<CstNode<CstType>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstGroupType: CstType


public class CstFunctionType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let receiverType: Maybe<CstNode<CstType>>
  public let parameterTypes: Maybe<CstNode<CstFunctionTypeParameterTypes>>
  public let arrow: CstNode<PunctuationToken>
  public let returnType: Maybe<CstNode<CstType>>
}
impl CstFunctionType: CstType

public class CstFunctionTypeParameterTypes {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let parameterTypes: List<CstNode<CstType | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}


public class CstTupleType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let openingParenthesis: CstNode<PunctuationToken>
  public let types: List<CstNode<CstType | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
impl CstTupleType: CstType


public class CstIntersectionType {
  public let leftType: CstNode<CstType>
  public let ampersand: CstNode<PunctuationToken>
  public let rightType: Maybe<CstNode<CstType>>
}
impl CstIntersectionType: CstType

public class CstUnionType {
  public let leftType: CstNode<CstType>
  public let bar: CstNode<PunctuationToken>
  public let rightType: Maybe<CstNode<CstType>>
}
impl CstUnionType: CstType


public class CstTypeParameters {
  public let openingAngleBracket: CstNode<PunctuationToken>
  public let typeParameters: List<CstNode<CstTypeParameter | PunctuationToken>>
  public let closingAngleBracket: Maybe<CstNode<PunctuationToken>>
}
public class CstTypeParameter {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let upperBound: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstType>>)>
}

public class CstTypeArguments {
  public let openingAngleBracket: CstNode<PunctuationToken>
  public let typeArguments: List<CstNode<CstTypeArgument | PunctuationToken>>
  public let closingAngleBracket: Maybe<CstNode<PunctuationToken>>
}
public class CstTypeArgument {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let type: Maybe<CstNode<CstType>>
}
