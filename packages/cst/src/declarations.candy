use ..expressions
use ..node
use ..tokens
use ..types

public trait /* enum */ CstDeclaration {
  let modifiers: List<CstNode<IdentifierToken>>
  let keyword: CstNode<KeywordToken>
}

public trait CstDeclarationWithName {
  let name: Maybe<CstNode<IdentifierToken>>
}


public class CstModule {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let content: Maybe<CstNode<CstDeclarationContent>>
}
impl CstModule: CstDeclaration & CstDeclarationWithName


public class CstTrait {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let typeParameters: Maybe<CstNode<CstTypeParameters>>
  public let upperBound: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let content: Maybe<CstNode<CstDeclarationContent>>
}
impl CstTrait: CstDeclaration & CstDeclarationWithName

public class CstImpl {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let typeParameters: Maybe<CstNode<CstTypeParameters>>
  public let type: Maybe<CstNode<CstInlineType>>
  public let traits: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let content: Maybe<CstNode<CstDeclarationContent>>
}
impl CstImpl: CstDeclaration


public class CstType {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let typeParameters: Maybe<CstNode<CstTypeParameters>>
  public let type: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
}
impl CstType: CstDeclaration & CstDeclarationWithName


public class CstFunction {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let typeParameters: Maybe<CstNode<CstTypeParameters>>
  public let valueParameters: Maybe<CstNode<CstValueParameters>>
  public let returnType: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let body: Maybe<CstNode<CstBlockBody | CstExpressionBody>>
}
impl CstFunction: CstDeclaration & CstDeclarationWithName

public class CstValueParameters {
  public let openingParenthesis: CstNode<PunctuationToken>
  public let valueParameters: List<CstNode<CstValueParameter | PunctuationToken>>
  public let closingParenthesis: Maybe<CstNode<PunctuationToken>>
}
public class CstValueParameter {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let name: CstNode<IdentifierToken>
  public let type: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let defaultValue: Maybe<CstNode<CstDelegationBody>>
}


public class CstProperty {
  public let modifiers: List<CstNode<IdentifierToken>>
  public let keyword: CstNode<KeywordToken>
  public let name: Maybe<CstNode<IdentifierToken>>
  public let type: Maybe<(CstNode<PunctuationToken>, Maybe<CstNode<CstInlineType>>)>
  public let initializer: Maybe<CstNode<CstDelegationBody>>
}
impl CstProperty: CstDeclaration & CstDeclarationWithName


public class CstDeclarationContent {
  public let openingCurlyBrace: CstNode<PunctuationToken>
  public let innerDeclarations: List<CstNode<CstDeclaration>>
  public let closingCurlyBrace: Maybe<CstNode<PunctuationToken>>
}

public class CstBlockBody {
  public let openingCurlyBrace: CstNode<PunctuationToken>
  public let expressions: List<CstNode<CstExpression>>
  public let closingCurlyBrace: Maybe<CstNode<PunctuationToken>>
}
public class CstExpressionBody {
  public let arrow: CstNode<PunctuationToken>
  public let expression: Maybe<CstNode<CstExpression>>
}
public class CstDelegationBody {
  public let equalsSign: CstNode<PunctuationToken>
  public let expression: Maybe<CstNode<CstExpression>>
}
