use ..context

class Query<T, S> {
  /// A query that can be run and produces a primary, direct result `T` and a secondary result `S`
  /// only accessible via the `QueryContext`.

  let name: String
  /// A unique query name.
  ///
  /// The `name` usually equals the name of the method or function that runs the query, possibly
  /// with a package prefix. For example, you might have a `"math.computeSign"` query that computes
  /// the sign of an `Int`.

  let input: Equals & Hash
  /// The input to the query.
  ///
  /// Multiple inputs can be represented as `Tuple`s or `List`s.

  let runner: () => (T, S)
  /// A runner that actually runs the query.

  let isPure: Bool
  /// Indicates whether the runner is deterministic with regard to the `input`.
}

public fun query<T, S>(
  context: QueryContext<S>,
  name: String,
  input: Equals & Hash,
  runner: () => (T, S),
): T {
  /// Creates and runs a pure query.

  let query = Query<T, S>(name, input, runner, true)
  context.run<T>(query)
}

public fun impureQuery<T, S>(
  context: QueryContext<S>,
  name: String,
  input: Equals & Hash,
  runner: () => (T, S),
): T {
  /// TODO(JonasWanke): merge this with `query` when we support optional arguments

  let query = Query<T, S>(name, input, runner, false)
  context.run<T>(query)
}
