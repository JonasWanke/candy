public trait Package {
  // TODO(JonasWanke): provide a query to get the name of a package
}
impl Package: Equals & Hash

public class FilePackage {
  public let path: String /* Path */
}
impl FilePackage: Package
impl FilePackage: Equals & Hash {
  fun equals(other: This): Bool { path == other.path }
  fun hash<T>(hasher: Hasher<T>) { path.hash<T>(hasher) }
}

public class GitPackage {
  public let repoUrl: String /* Url */
  public let path: String /* Path */ = ""
  public let ref: String /* Sha1 */
}
impl GitPackage: Package
impl GitPackage: Equals & Hash {
  fun equals(other: This): Bool {
    repoUrl == other.repoUrl && path == other.path && ref == other.ref
  }
  fun hash<T>(hasher: Hasher<T>) {
    repoUrl.hash<T>(hasher)
    path.hash<T>(hasher)
    ref.hash<T>(hasher)
  }
}

public class HostedPackage {
  public let hostUrl: String /* Url */
  public let path: List<String>
  public let version: String /* Version */
}
impl HostedPackage: Package
impl HostedPackage: Equals & Hash {
  fun equals(other: This): Bool {
    hostUrl == other.hostUrl
      && (path as Iterable<String>).unsafeEquals(other.path as Iterable<String>)
      && version == other.version
  }
  fun hash<T>(hasher: Hasher<T>) {
    hostUrl.hash<T>(hasher)
    (path as Iterable<String>).unsafeHash<T>(hasher)
    version.hash<T>(hasher)
  }
}
