public class DataTuple2<T1: Equals & Hash, T2: Equals & Hash> {
  // TODO(JonasWanke): delete this when `(Equals & Hash, Equals & Hash)` implements
  // `(Equals & Hash)`.
  public let first: T1
  public let second: T2
}
impl<T1: Equals & Hash, T2: Equals & Hash> DataTuple2<T1, T2>: Equals & Hash {
  fun equals(other: This): Bool {
    let other = (other as DataTuple2<T1, T2>)
    // TODO(marcelgarus): Remove this cast when our type system is smart enough to figure this out.
    (first as Equals).equalsAny(other.first as Equals) &&
      (second as Equals).equalsAny(other.second as Equals)
  }
  fun hash<T>(hasher: Hasher<T>) {
    (first as Hash).hash<T>(hasher)
    (second as Hash).hash<T>(hasher)
  }
}

public class SetOfString {
  public let value: Set<String>
}
impl SetOfString: Equals & Hash {
  fun equals(other: This): Bool { value.unsafeEquals(other.value) }
  fun hash<T>(hasher: Hasher<T>) { value.unsafeHash<T>(hasher) }
}
