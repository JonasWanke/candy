use incremental
use petit_parser
use ..error
use ..file
use ..location
use ..package
use ..utils

impl Package {
  public fun getDependencyByName(context: QueryContext<List<CompilerError>>, name: String): Maybe<Package> {
    query<Maybe<Package>, List<CompilerError>>(context, "Package.getDependencyByName", DataTuple2<Package, String>(this, name), {
      let dependencies = getAllDependencies(context).items()
      Tuple(dependencies.singleWhere({ it.getName(context) == name }), List.empty<CompilerError>())
    })
  }

  public fun getAllDependencies(context: QueryContext<List<CompilerError>>): Set<Package> {
    /// Returns all dependencies (without this package itself).

    query<Set<Package>, List<CompilerError>>(context, "Package.getAllDependencies", (this as Equals & Hash), {
      let packages = (getAllPackagesInCompilationOrder(context) as Iterable<Package>)
          .unsafeToSet<Package>()
          .toMutable()
      packages.remove(this)
      Tuple(packages, List.empty<CompilerError>())
    })
  }

  public fun getAllPackagesInCompilationOrder(context: QueryContext<List<CompilerError>>): List<Package> {
    /// Returns all packages (dependencies and this package itself) sorted topologically.
    ///
    /// By compiling packages in the order of the returned list, packages are only compiled after
    /// all of their dependencies.

    query<List<Package>, List<CompilerError>>(context, "Package.getAllPackagesInCompilationOrder", (this as Equals & Hash), {
      getAllPackagesInCompilationOrderHelper(context, List.empty<Package>(), Set.empty<Package>())
    })
  }
  public fun getAllPackagesInCompilationOrderHelper(
    context: QueryContext<List<CompilerError>>,
    stack: List<Package>,
    visited: Set<Package>,
  ): (List<Package>, List<CompilerError>) {
    /// Helper for `getAllPackagesInCompilationOrder` that performs the actual topological sort and
    /// checks for cycles.

    assert(!visited.contains(this), "Already visited package {this}.")

    if (stack as Iterable<Package>).any({ it == this }) {
      let cycle = (stack as Iterable<Package>).skipWhile({ !(it == this) }).toMutableList()
      cycle.append(this)
      return Tuple(
        List.empty<Package>(),
        List.of1<CompilerError>(
          CyclicDependenciesCompilerError(
            Location(getCandyspecFile(context), Span(0, 1)),
            cycle,
          ),
        ),
      )
    }

    let newStack = (stack as Iterable<Package>).toMutableList()
    newStack.append(this)
    let newVisited = visited.union(Set.of1<Package>(this)).toMutable()
    let packages = MutableList.empty<Package>()
    let errors = MutableList.empty<CompilerError>()
    for dependency in getCandyspec(context).dependencies.items() {
      if visited.contains(dependency) { continue }

      let result = dependency.getAllPackagesInCompilationOrderHelper(context, newStack, newVisited)
      newVisited.addAll(result.first)
      packages.appendAll(result.first)
      errors.appendAll(result.second)
    }
    packages.append(this)
    Tuple(packages, List.empty<CompilerError>())
  }
}

public class CyclicDependenciesCompilerError {
  public let location_: Location
  public let cycle: List<Package>
}
impl CyclicDependenciesCompilerError: CompilerError {
  public fun id(): String { "cyclic-dependencies-error" }

  public fun location(): Location { location_ }
  public fun title(): String { "Cycle detected in the dependencies." }
  public fun description(): String { (cycle as Iterable<Package>).join(" â†’ ") }
}
