# RCST for module Examples:parallel

Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Struct { opening_bracket: Cst { data: (), kind: OpeningBracket }, fields: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("async") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("await") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("channel") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("parallel") }, comma: Some(Cst { data: (), kind: Comma }) } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, Cst { data: (), kind: StructField { key_and_colon: None, value: Cst { data: (), kind: Identifier("text") }, comma: None } }], closing_bracket: Cst { data: (), kind: ClosingBracket } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("use") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Core") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }] } }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Newline("\n") }
Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("main") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: ColonEqualsSign }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, body: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("environment") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }] } })), body: [Cst { data: (), kind: Assignment { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, assignment_sign: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: EqualsSign }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } }, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("needs") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Parenthesized { opening_parenthesis: Cst { data: (), kind: OpeningParenthesis }, inner: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("text") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("is") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } }, closing_parenthesis: Cst { data: (), kind: ClosingParenthesis } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("environment") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("stdout") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: StructAccess { struct_: Cst { data: (), kind: Identifier("channel") }, dot: Cst { data: (), kind: Dot }, key: Cst { data: (), kind: Identifier("send") } } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Identifier("message") }] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("parallel") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: Some(([Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("nursery") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Arrow }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } })), body: [Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("nursery") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("async") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Hello from fiber!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("      ") }, Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Hello, async await!") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Identifier("await") } } }, whitespace: [Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Identifier("print") } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("nursery") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("async") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Kiwi") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: BinaryBar { left: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("nursery") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, bar: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Bar }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, right: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("async") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Function { opening_curly_brace: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: OpeningCurlyBrace }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, parameters_and_arrow: None, body: [Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Banana") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } } } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("    ") }, Cst { data: (), kind: Call { receiver: Cst { data: (), kind: TrailingWhitespace { child: Cst { data: (), kind: Identifier("print") }, whitespace: [Cst { data: (), kind: Whitespace(" ") }] } }, arguments: [Cst { data: (), kind: Text { opening: Cst { data: (), kind: OpeningText { opening_single_quotes: [], opening_double_quote: Cst { data: (), kind: DoubleQuote } } }, parts: [Cst { data: (), kind: TextPart("Hi") }], closing: Cst { data: (), kind: ClosingText { closing_double_quote: Cst { data: (), kind: DoubleQuote }, closing_single_quotes: [] } } } }] } }, Cst { data: (), kind: Newline("\n") }, Cst { data: (), kind: Whitespace("  ") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }, Cst { data: (), kind: Newline("\n") }], closing_curly_brace: Cst { data: (), kind: ClosingCurlyBrace } } }] } }
Cst { data: (), kind: Newline("\n") }
