# AST for module Examples:sqrt
assignment: identifier $6@"builtins" = 
  call identifier $0@"use" with these arguments:
    text
      textPart $2@"Builtins"
assignment: struct
  identifier $15@"equals"
  identifier $17@"fixedDecimal"
  identifier $19@"ifElse"
  identifier $21@"int"
  identifier $23@"recursive" = 
  call identifier $9@"use" with these arguments:
    text
      textPart $11@"Core"
assignment: $160@"sqrt" := function (fuzzable) { $161@"x" $162@"precision" ->
  call identifier $27@"needs" with these arguments:
    call struct access identifier $29@"fixedDecimal".$31@"Is" with these arguments:
      identifier $33@"x"
  call identifier $37@"needs" with these arguments:
    call struct access identifier $39@"fixedDecimal".$41@"IsNonNegative" with these arguments:
      identifier $43@"x"
  call identifier $47@"needs" with these arguments:
    call struct access identifier $49@"int".$51@"Is" with these arguments:
      identifier $53@"precision"
  call identifier $57@"needs" with these arguments:
    call struct access identifier $59@"int".$61@"IsNonNegative" with these arguments:
      identifier $63@"precision"
  assignment: identifier $76@"delta" = 
    call struct access identifier $68@"fixedDecimal".$70@"FromIntScaled" with these arguments:
      int 10
      identifier $72@"precision"
  call identifier $79@"recursive" with these arguments:
    call struct access identifier $83@"fixedDecimal".$85@"DivideTruncatingAtScale" with these arguments:
      identifier $81@"x"
      call struct access identifier $88@"fixedDecimal".$90@"FromInt" with these arguments:
        int 2
      identifier $93@"precision"
    function (non-fuzzable) { $97@"recurse" $98@"guess" ->
      assignment: identifier $132@"refinedGuess" = 
        call struct access identifier $99@"fixedDecimal".$101@"DivideTruncatingAtScale" with these arguments:
          call struct access identifier $105@"fixedDecimal".$107@"Add" with these arguments:
            identifier $103@"guess"
            call struct access identifier $111@"fixedDecimal".$113@"DivideTruncatingAtScale" with these arguments:
              identifier $109@"x"
              identifier $115@"guess"
              identifier $117@"precision"
          call struct access identifier $124@"fixedDecimal".$126@"FromInt" with these arguments:
            int 2
          identifier $129@"precision"
      call identifier $135@"ifElse" with these arguments:
        call struct access identifier $137@"fixedDecimal".$139@"ApproxEquals" with these arguments:
          identifier $141@"guess"
          identifier $143@"refinedGuess"
          identifier $145@"delta"
        function (non-fuzzable) {
          identifier $148@"guess"
        }
        function (non-fuzzable) {
          call identifier $151@"recurse" with these arguments:
            identifier $153@"refinedGuess"
        }
    }
}
assignment: $202@"main" := function (fuzzable) { $203@"_" ->
  assignment: identifier $165@"input" = 
    int 2
  assignment: identifier $180@"result" = 
    call identifier $175@"sqrt" with these arguments:
      call struct access identifier $170@"fixedDecimal".$172@"FromInt" with these arguments:
        identifier $168@"input"
      int 65
  call struct access identifier $183@"builtins".$185@"Print" with these arguments:
    text
      textPart $187@"The root of "
      identifier $189@"input"
      textPart $191@" is "
      call struct access identifier $195@"fixedDecimal".$197@"ToText" with these arguments:
        identifier $193@"result"
}
