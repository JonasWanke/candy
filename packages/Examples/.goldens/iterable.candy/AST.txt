# AST for module Examples:iterable
assignment: identifier $6@"builtins" = 
  call identifier $0@"use" with these arguments:
    text
      textPart $2@"Builtins"
assignment: struct
  identifier $15@"bool"
  identifier $17@"equals"
  identifier $19@"ifElse"
  identifier $21@"iterable"
  identifier $23@"list"
  identifier $25@"result"
  identifier $27@"text" = 
  call identifier $9@"use" with these arguments:
    text
      textPart $11@"Core"
assignment: $88@"splitWhereFirst" = function (fuzzable) { $89@"iter" $90@"checker" ->
  call struct access identifier $31@"builtins".$33@"Print" with these arguments:
    text
      textPart $35@"Getting leading items"
  assignment: identifier $59@"firstPart" = 
    call struct access identifier $54@"iterable".$56@"ToList" with these arguments:
      call struct access identifier $41@"iterable".$43@"TakeUntil" with these arguments:
        identifier $39@"iter"
        function (non-fuzzable) { $45@"item" ->
          call identifier $46@"checker" with these arguments:
            identifier $48@"item"
        }
  call struct access identifier $62@"builtins".$64@"Print" with these arguments:
    text
      textPart $66@"Turned into list"
  list
    identifier $70@"firstPart"
    call struct access identifier $74@"iterable".$76@"Skip" with these arguments:
      identifier $72@"iter"
      call struct access identifier $80@"list".$82@"Length" with these arguments:
        identifier $78@"firstPart"
}
assignment: $132@"split" = function (fuzzable) { $133@"iter" $134@"delimeter" ->
  call struct access identifier $92@"iterable".$94@"GenerateWithState" with these arguments:
    identifier $96@"iter"
    function (non-fuzzable) { $98@"state" ->
      call struct access identifier $101@"iterable".$103@"TakeUntil" with these arguments:
        identifier $99@"state"
        function (non-fuzzable) { $105@"item" ->
          call identifier $106@"equals" with these arguments:
            identifier $108@"item"
            identifier $110@"delimeter"
        }
      call struct access identifier $123@"result".$125@"Map" with these arguments:
        call struct access identifier $118@"iterable".$120@"Next" with these arguments:
          identifier $116@"state"
        function (non-fuzzable) {
        }
    }
}
assignment: identifier $177@"main" := 
  function (non-fuzzable) { $136@"env" ->
    assignment: $144@"print" = function (fuzzable) { $145@"message" ->
      call struct access identifier $137@"env".$139@"Stdout" with these arguments:
        identifier $141@"message"
    }
    call struct access identifier $163@"iterable".$165@"ForEach" with these arguments:
      assignment: identifier $160@"foo" = 
        call struct access identifier $155@"iterable".$157@"FromList" with these arguments:
          call struct access identifier $150@"text".$152@"Characters" with these arguments:
            text
              textPart $147@"Hello, world! This is some long text. Bla bla blub."
      function (non-fuzzable) { $167@"item" ->
        call identifier $168@"print" with these arguments:
          identifier $170@"item"
      }
  }
