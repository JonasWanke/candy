use ....maybe
use ....numbers
use ....todo
use ...array
use ...iterable
use ...list

// TODO(marcelgarus): For now, this never shrinks. We should implement that later, although a very
// conservative shrinking heuristic is probably enough (we don't want to shrink too early).
public class ArrayList<Item> {
  /// A wrapper around `Array` that grows dynamically.

  public static fun empty<Item>(): ArrayList<Item> {
    create<Item>(8)
  }
  public static fun of1<Item>(first: Item): ArrayList<Item> {
    let list = create<Item>(1)
    list.append(first)
    list
  }
  public static fun of2<Item>(first: Item, second: Item): ArrayList<Item> {
    let list = create<Item>(2)
    list.append(first)
    list.append(second)
    list
  }
  public static fun of3<Item>(first: Item, second: Item, third: Item): ArrayList<Item> {
    let list = create<Item>(3)
    list.append(first)
    list.append(second)
    list.append(third)
    list
  }
  public static fun of4<Item>(first: Item, second: Item, third: Item, fourth: Item): ArrayList<Item> {
    let list = create<Item>(4)
    list.append(first)
    list.append(second)
    list.append(third)
    list.append(fourth)
    list
  }
  public static fun of5<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): ArrayList<Item> {
    let list = create<Item>(5)
    list.append(first)
    list.append(second)
    list.append(third)
    list.append(fourth)
    list.append(fifth)
    list
  }
  public static fun of6<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item): ArrayList<Item> {
    let list = create<Item>(6)
    list.append(first)
    list.append(second)
    list.append(third)
    list.append(fourth)
    list.append(fifth)
    list.append(sixth)
    list
  }

  static fun create<Item>(capacity: Int /* UInt */): ArrayList<Item> {
    /// Creates a new, empty `ArrayList` with the given capacity.

    ArrayList<Item>(
      Array.filled<Maybe<Item>>(capacity, None<Item>()),
      0,
    )
  }

  mut let items: Array<Maybe<Item>>
  mut let length_: Int /* UInt */

  // TODO(marcelgarus): Getterize!
  fun capacity(): Int /* UInt */ { items.length }

  fun grow() {
    /// Increases the capacity.

    let newItems = Array.filled<Maybe<Item>>(2 * capacity(), None<Item>())
    mut let index = 0

    while index < length_ {
      newItems.set(index, items.get(index))
      index = index + 1
    }
    items = newItems
  }
}

impl<Item> ArrayList<Item>: Iterable<Item> {
  fun iterator(): Iterator<Item> {
    // TODO(marcelgarus): Remove the second argument as soon as default arguments are supported.
    ArrayListIterator<Item>(this, 0)
  }
}

class ArrayListIterator<Item> {
  let arrayList: ArrayList<Item>
  mut let index = 0
}

impl<Item> ArrayListIterator<Item>: Iterator<Item> {
  fun next(): Maybe<Item> {
    let element = arrayList.get(index)
    index = index + 1
    element
  }
}

impl<Item> ArrayList<Item>: List<Item> {
  fun length(): Int { length_ }

  fun get(index: Int /* UInt */): Maybe<Item> {
    if index >= length_ {
      None<Item>()
    } else {
      items.get(index)
    }
  }
}

impl<Item> ArrayList<Item>: MutableList<Item> {
  fun set(index: Int /* UInt */, item: Item) {
    items.set(index, Some<Item>(item))
  }

  fun append(item: Item) {
    if length_ == capacity() {
      grow()
    }
    set(length_, item)
    length_ = length_ + 1
  }
  fun appendAll(items: Iterable<Item>) {
    for item in items { append(item) }
  }

  fun removeAt(index: Int /* UInt */): Item {
    mut let index = index
    mut let removed = items.get(index).unwrap()
    while index < length_ - 1 {
      items.set(index, items.get(index))
    }
    items.set(index, None<Item>())
    length_ = length_ - 1
    removed
  }

  fun clear() {
    mut let index = 0
    while index < length_ {
      items.set(index, None<Item>())
    }
    length_ = 0
  }
}
