use ...assert
use ...bool
use ...hash
use ...maybe
use ...numbers
use ...operators
use ...primitives
use ..iterable
use ..array
public use .array_list

public trait List<Item>: Iterable<Item> {
  static fun empty<Item>(): List<Item> { ArrayList.empty<Item>() }
  static fun of1<Item>(first: Item): List<Item> {
    ArrayList.of1<Item>(first)
  }
  static fun of2<Item>(first: Item, second: Item): List<Item> {
    ArrayList.of2<Item>(first, second)
  }
  static fun of3<Item>(first: Item, second: Item, third: Item): List<Item> {
    ArrayList.of3<Item>(first, second, third)
  }
  static fun of4<Item>(first: Item, second: Item, third: Item, fourth: Item): List<Item> {
    ArrayList.of4<Item>(first, second, third, fourth)
  }
  static fun of5<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): List<Item> {
    ArrayList.of5<Item>(first, second, third, fourth, fifth)
  }
  static fun of6<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item): List<Item> {
    ArrayList.of6<Item>(first, second, third, fourth, fifth, sixth)
  }
  static fun of7<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item): List<Item> {
    ArrayList.of7<Item>(first, second, third, fourth, fifth, sixth, seventh)
  }
  static fun of8<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item): List<Item> {
    ArrayList.of8<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth)
  }
  static fun of9<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item): List<Item> {
    ArrayList.of9<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth)
  }
  static fun of10<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item): List<Item> {
    ArrayList.of10<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth)
  }
  static fun of11<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item, eleventh: Item): List<Item> {
    ArrayList.of11<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth, eleventh)
  }
  static fun of12<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item, eleventh: Item, twelfth: Item): List<Item> {
    ArrayList.of12<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth, eleventh, twelfth)
  }

  // TODO(never, marcelgarus): Getterize!
  fun isEmpty(): Bool { length() == 0 }

  fun copy(): List<Item> {
    let length = (this as Iterable<Item>).length()
    let result = ArrayList.create<Item>(length)

    mut let index = 0
    while index < length {
      (result as MutableList<Item>).append(get(index).unwrap() as Item)
      index = index + 1
    }
    result
  }
  fun subList(start: Int, end: Int): List<Item> {
    /// TODO(never, JonasWanke): make this more efficient by creating a view of the original list

    assert(start >= 0, "start must be non-negative")
    assert(start < length(), "start must be inside this list")
    assert(end >= 0, "end must be non-negative")
    assert(start <= length(), "end must be inside this list")
    assert(start <= end, "end must be larger or equal to start")

    let length = end - start
    let result = ArrayList.create<Item>(length)

    mut let index = 0
    while index < length {
      (result as MutableList<Item>).append(get(start + index).unwrap() as Item)
      index = index + 1
    }
    result
  }

  fun followedByList(other: List<Item>): List<Item> {
    let resultLength = length() + (other as Iterable<Item>).length()
    let result = ArrayList.create<Item>(resultLength)

    mut let index = 0
    while index < length() {
      (result as MutableList<Item>).append(get(index).unwrap() as Item)
      index = index + 1
    }

    mut let index = 0
    while index < (other as Iterable<Item>).length() {
      (result as MutableList<Item>).append((other as Iterable<Item>).get(index).unwrap() as Item)
      index = index + 1
    }
    result
  }

  fun reversed(): List<Item> {
    /// TODO(never, JonasWanke): make this more efficient by creating a view of the original list

    let length = (this as Iterable<Item>).length()
    let result = ArrayList.create<Item>(length)

    mut let index = length - 1
    while index >= 0 {
      (result as MutableList<Item>).append(get(index).unwrap() as Item)
      index = index - 1
    }
    result
  }

  fun toMutable(): MutableList<Item> {
    let list = MutableList.empty<Item>()
    for item in this {
      list.append(item)
    }
    list
  }

  // Note: We don't override unsafeEquals here, because it would have to override the
  // Iterable.unsafeEqual on the Dart side and writing `list.unsafeEquals(otherList as Iterable<...>)`
  // looks weird (one side is a `List`, the other an `Iterable`). So for those cases where you want
  // to compare two lists, just do `(list as Iterable<...>).unsafeEquals(otherList as Iterable<...>)`.
  fun unsafeHash<T>(hasher: Hasher<T>) {
    for item in (this as Iterable<Item>) {
      (item as Hash).hash<T>(hasher)
    }
  }

  fun unsafeSorted(): List<Item> {
    let result = toMutable()
    result.unsafeSort()
    result
  }
  fun sortedBy<T: Comparable>(selector: (Item) => T): List<Item> {
    let result = toMutable()
    result.sortBy<T>(selector)
    result
  }

  fun copyAndAdd(item: Item): List<Item> {
    let result = this.toMutable()
    result.append(item)
    result
  }
}

public trait MutableList<Item>: List<Item> {
  static fun empty<Item>(): MutableList<Item> { ArrayList.empty<Item>() }
  static fun of1<Item>(first: Item): MutableList<Item> {
    ArrayList.of1<Item>(first)
  }
  static fun of2<Item>(first: Item, second: Item): MutableList<Item> {
    ArrayList.of2<Item>(first, second)
  }
  static fun of3<Item>(first: Item, second: Item, third: Item): MutableList<Item> {
    ArrayList.of3<Item>(first, second, third)
  }
  static fun of4<Item>(first: Item, second: Item, third: Item, fourth: Item): MutableList<Item> {
    ArrayList.of4<Item>(first, second, third, fourth)
  }
  static fun of5<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): MutableList<Item> {
    ArrayList.of5<Item>(first, second, third, fourth, fifth)
  }
  static fun of6<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item): MutableList<Item> {
    ArrayList.of6<Item>(first, second, third, fourth, fifth, sixth)
  }
  static fun of7<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item): MutableList<Item> {
    ArrayList.of7<Item>(first, second, third, fourth, fifth, sixth, seventh)
  }
  static fun of8<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item): MutableList<Item> {
    ArrayList.of8<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth)
  }
  static fun of9<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item): MutableList<Item> {
    ArrayList.of9<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth)
  }
  static fun of10<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item): MutableList<Item> {
    ArrayList.of10<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth)
  }
  static fun of11<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item, eleventh: Item): MutableList<Item> {
    ArrayList.of11<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth, eleventh)
  }
  static fun of12<Item>(first: Item, second: Item, third: Item, fourth: Item, fifth: Item, sixth: Item, seventh: Item, eigth: Item, ninth: Item, tenth: Item, eleventh: Item, twelfth: Item): MutableList<Item> {
    ArrayList.of12<Item>(first, second, third, fourth, fifth, sixth, seventh, eigth, ninth, tenth, eleventh, twelfth)
  }

  fun set(index: Int /* UInt */, item: Item)
  // TODO(never, marcelgarus): Rename to add as soon as the naming conflict with + is resolved.
  fun append(item: Item)
  fun appendAll(items: Iterable<Item>) {
    for item in items {
      append(item)
    }
  }

  fun update(index: Int, updater: (Item) => Item) {
    let safeGet = get as ((Int) => Maybe<Item>)
    let value = safeGet(index)
    if value is Some {
      let newValue = updater(value.unwrap())
      set(index, newValue)
    }
  }

  fun updateAll(updater: (Item) => Item) {
    mut let index = 0
    while index < length() {
      update(index, updater)
      index = index + 1
    }
  }

  fun removeAt(index: Int /* UInt */): Item

  fun removeFirst(): Item { removeAt(0) }
  fun removeSecond(): Item { removeAt(1) }
  fun removeThird(): Item { removeAt(2) }
  fun removeFourth(): Item { removeAt(3) }
  fun removeFifth(): Item { removeAt(4) }

  fun removeLast(): Item { removeAt(length() - 1) }
  fun removeSecondLast(): Item { removeAt(length() - 2) }
  fun removeThirdLast(): Item { removeAt(length() - 3) }
  fun removeFourthLast(): Item { removeAt(length() - 4) }
  fun removeFifthLast(): Item { removeAt(length() - 5) }

  fun removeFirstWhere(check: (Item) => Bool): Maybe<Item> {
    mut let cursor = 0
    for item in this as Iterable<Item> {
      if check(item) {
        removeAt(cursor)
        return Some<Item>(item)
      }
      cursor = cursor + 1
    }
    return None<Item>()
  }

  fun clear() {
    while isNotEmpty() {
      removeLast()
    }
  }

  fun unsafeSort() { sortBy<Comparable>({ it as Comparable }) }
  fun sortBy<T: Comparable>(selector: (Item) => T) {
    // TODO(never, JonasWanke): use something faster for larger lists
    // Currently using insertion sort.
    1.until(length()).do({ i =>
      let item = (get(i).unwrap() as Item)
      mut let j = i
      while j > 0 {
        let leftItem = (get(j - 1).unwrap() as Item)
        if ((selector(leftItem) as T) <= (selector(item) as T)) { break unit }
        set(j, leftItem as Item)
        j = j - 1
      }
      set(j, item as Item)
    })
  }
}
