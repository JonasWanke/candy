use ...bool
use ...hash
use ...operators
use ...numbers
use ..iterable
use .map_based_set

public trait Set<Item: Equals & Hash> {
  static fun empty<Item: Equals & Hash>(): Set<Item> { MutableSet.empty<Item>() }

  static fun of1<Item: Equals & Hash>(single: Item): Set<Item> { MutableSet.of1<Item>(single) }
  static fun of2<Item: Equals & Hash>(first: Item, second: Item): Set<Item> {
    MutableSet.of2<Item>(first, second)
  }
  static fun of3<Item: Equals & Hash>(first: Item, second: Item, third: Item): Set<Item> {
    MutableSet.of3<Item>(first, second, third)
  }
  static fun of4<Item: Equals & Hash>(
    first: Item,
    second: Item,
    third: Item,
    fourth: Item,
  ): Set<Item> {
    MutableSet.of4<Item>(first, second, third, fourth)
  }
  static fun of5<Item: Equals & Hash>(
    first: Item,
    second: Item,
    third: Item,
    fourth: Item,
    fifth: Item,
  ): Set<Item> {
    MutableSet.of5<Item>(first, second, third, fourth, fifth)
  }

  fun length(): Int
  fun isEmpty(): Bool { length() == 0 }
  fun isNotEmpty(): Bool { !isEmpty() }

  fun contains(item: Item): Bool

  fun union(other: Set<Item>): Set<Item>

  fun items(): Iterable<Item>

  fun toMutable(): MutableSet<Item> {
    let set = MutableSet.empty<Item>()
    for item in items() { set.insert(item) }
    set
  }
}

public trait MutableSet<Item: Equals & Hash>: Set<Item> {
  static fun empty<Item: Equals & Hash>(): MutableSet<Item> { MapBasedSet.empty<Item>() }

  static fun of1<Item: Equals & Hash>(single: Item): MutableSet<Item> {
    let set = MapBasedSet.empty<Item>()
    set.insert(single)
    set
  }
  static fun of2<Item: Equals & Hash>(first: Item, second: Item): MutableSet<Item> {
    let set = MapBasedSet.empty<Item>()
    set.insert(first)
    set.insert(second)
    set
  }
  static fun of3<Item: Equals & Hash>(first: Item, second: Item, third: Item): MutableSet<Item> {
    let set = MapBasedSet.empty<Item>()
    set.insert(first)
    set.insert(second)
    set.insert(third)
    set
  }
  static fun of4<Item: Equals & Hash>(
    first: Item,
    second: Item,
    third: Item,
    fourth: Item,
  ): MutableSet<Item> {
    let set = MapBasedSet.empty<Item>()
    set.insert(first)
    set.insert(second)
    set.insert(third)
    set.insert(fourth)
    set
  }
  static fun of5<Item: Equals & Hash>(
    first: Item,
    second: Item,
    third: Item,
    fourth: Item,
    fifth: Item,
  ): MutableSet<Item> {
    let set = MapBasedSet.empty<Item>()
    set.insert(first)
    set.insert(second)
    set.insert(third)
    set.insert(fourth)
    set.insert(fifth)
    set
  }

  // TODO(JonasWanke): Rename to add as soon as the naming conflict with + is resolved.
  fun insert(item: Item): Bool
  /// Returns `true` if `item` (or an equal value) was not yet in the set. Otherwise, returns
  /// `false` and the set is not modified.
  fun addAll(items: Iterable<Item>): Bool {
    /// Returns `true` if any of `items` (or an equal value) was not yet in the set. Otherwise,
    /// returns `false` and the set is not modified.
    mut let wasModified = false
    for item in items {
      wasModified = insert(item) || wasModified
    }
    wasModified
  }

  fun remove(item: Item): Bool
  /// Returns `true` if `item` was in the set. Otherwise, returns `false` and the set is not
  /// modified.

  fun clear() {
    for item in items() { remove(item as Item) }
  }
}
