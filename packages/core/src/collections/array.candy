use ...numbers
use ..iterable
use ..list

public builtin class Array<Item> {
  /// A structure that holds a fixed number of `Item`s.
  
  public static fun filled<Item>(length: Int /* UInt */, item: Item): Array<Item> {
    /// Creates a new `Array` of the given `length`, where every slot is filled with the same
    /// `item`.

    generate<Item>(length, { item })
  }

  public static fun generate<Item>(length: Int, generator: (Int) => Item): Array<Item>
  /// Creates a new `Array` of the given `length` where the `generator` is invoked with indizes to
  /// generate items to fill the slots.

  public fun length(): Int

  public fun get(index: Int /* UInt */): Item
  public fun set(index: Int /* UInt */, item: Item)

  public fun toList(): List<Item> {
    let list = MutableList.empty<Item>()
    mut let i = 0
    while i < length() {
      list.append(get(i))
      i = i + 1
    }
    list
  }
}

// TODO(never, marcelgarus): Make `Array` `Iterable`, this clashes with `Iterable.get`, which should return
// `Maybe<Item>`.
// impl<Item> Array<Item>: Iterable<Item> {
//   fun iterator(): Iterator<Item> {
//     ArrayIterator<Item>(this, 0)
//   }
// }

// class ArrayIterator<Item> {
//   let array: Array<Item>
//   mut let cursor: Int
// }
// impl<Item> ArrayIterator<Item>: Iterator<Item> {
//   fun next(): Maybe<Item> {
//     let item = array.get(0)
//     cursor = cursor + 1
//     item
//   }
// }
