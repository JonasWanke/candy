use ...assert
use ...bool
use ...hash
use ...operators
use ...maybe
use ...numbers
use ...primitives
use ...string
use ...todo
use ..list
use ..map
use ..set

public trait Iterator<Item> {
  fun next(): Maybe<Item>
  /// Returns `Some` if there's another item ot iterate over and `None` if it finished iterating.
}

public trait Iterable<Item> {
  /// A thing that can create an `Iterator<Item>`.

  fun /* let */ iterator(): Iterator<Item>

  // Getters

  fun get(index: Int /* UInt */): Maybe<Item> {
    /// Returns the [index]th element.

    let iter = iterator()
    mut let i = 0
    mut let element = (None<Item>() as Maybe<Item>)
    while i <= index {
      element = iter.next()
      i = i + 1
    }
    element
  }

  fun first(): Maybe<Item> { get(0) }
  fun second(): Maybe<Item> { get(1) }
  fun third(): Maybe<Item> { get(2) }
  fun fourth(): Maybe<Item> { get(3) }
  fun fifth(): Maybe<Item> { get(4) }

  fun nthLast(index: Int): Maybe<Item> {
    // TODO(marcelgarus): Make this way more efficient.
    let list = (toList() as Iterable<Item>)
    list.get(list.length() - index - 1)
  }

  fun last(): Maybe<Item> { nthLast(0) }
  fun secondLast(): Maybe<Item> { nthLast(1) }
  fun thirdLast(): Maybe<Item> { nthLast(2) }
  fun fourthLast(): Maybe<Item> { nthLast(3) }
  fun fifthLast(): Maybe<Item> { nthLast(4) }

  fun single(): Maybe<Item> {
    let iter = iterator()
    let first = iter.next()
    if first is None {
      return None<Item>()
    }
    if iter.next() is Some<Item> {
      return None<Item>()
    }
    first
  }

  // Properties.

  fun length(): Int {
    let iter = iterator()
    mut let length = 0
    while iter.next() is Some<Item> {
      length = length + 1
    }
    length
  }

  // Boolean checks.

  fun isEmpty(): Bool { first() is None }
  fun isNotEmpty(): Bool { !isEmpty() }

  fun all(tester: (Item) => Bool): Bool {
    for item in this {
      if !tester(item) { return false }
    }
    true
  }
  fun any(tester: (Item) => Bool): Bool {
    for item in this {
      if tester(item) { return true }
    }
    false
  }

  // Reductions.

  fun foldLeft<Out>(initial: Out, combine: (Out, Item) => Out): Out {
    mut let result = initial
    for item in this { result = combine(result, item) }
    result
  }
  fun foldRight<Out>(initial: Out, combine: (Item, Out) => Out): Out {
    mut let result = initial
    for item in toList().reversed() { result = combine(item, result) }
    result
  }
  fun reduceLeft(combine: (Item, Item) => Item): Maybe<Item> {
    if isEmpty() { return None<Item>() }

    mut let result = first().unwrap()
    for item in skip(1) { result = combine(result, item) }
    Some<Item>(result)
  }
  // TODO(marcelgarus): reduceRight

  fun minBy<C: Comparable>(selector: (Item) => C): Maybe<Item> {
    reduceLeft({ result, item => if selector(result) <= selector(item) { result } else { item } })
  }
  fun maxBy<C: Comparable>(selector: (Item) => C): Maybe<Item> {
    reduceLeft({ result, item => if selector(result) >= selector(item) { result } else { item } })
  }
  // TODO(JonasWanke): sumBy, averageBy

  // Searching.

  fun firstWhere(checker: (Item) => Bool): Maybe<Item> { where(checker).first() }
  // TODO(marcelgarus): firstIndexWhere
  fun lastWhere(checker: (Item) => Bool): Maybe<Item> { where(checker).last() }
  // TODO(marcelgarus): lastIndexWhere
  fun singleWhere(checker: (Item) => Bool): Maybe<Item> { where(checker).single() }
  // TODO(JonasWanke): singleIndexWhere

  // Mapping transformations.
  // These return an `Iterable` with the same length, but a different type.

  fun map<Out>(mapper: (Item) => Out): Iterable<Out> {
    mapIndexed<Out>({ item, index => mapper(item) })
  }
  fun mapIndexed<Out>(mapper: (Item, Int) => Out): Iterable<Out> {
    MappedIterable<Item, Out>(this, mapper)
  }

  fun cast<Type>(): Iterable<Type> {
    map<Type>({ it as Type })
  }

  // // TODO(marcelgarus): Maybe rename this to `indexed`?
  // fun enumerate(): Iterable<(Int, Item)> {
  //   mut let index = 0
  //   map<(Int, Item)>({
  //      let result = (index, it)
  //      index = index + 1
  //      result
  //   })
  // }

  // Selection transformations.
  // These return an `Iterable` with a subset of the items.

  fun where(checker: (Item) => Bool): Iterable<Item> {
    whereWithState<Unit>(unit, { item, _ => Tuple(checker(item), unit) })
  }
  fun whereWithState<State>(
    initialState: State,
    checker: (Item, State) => (Bool, State),
  ): Iterable<Item> { WhereIterable<Item, State>(this, initialState, checker) }

  fun whereNot(checker: (Item) => Bool): Iterable<Item> {
    where({ !checker(it) })
  }

  fun whereType<Result>(): Iterable<Result> {
    // TODO(JonasWanke): return `Iterable<Item & Result>` when our type system gets smarter
    where({ it is Result }).cast<Result>()
  }

  fun skip(n: Int): Iterable<Item> {
    whereWithState<Int>(0, { item, index => Tuple(index >= n, index + 1) })
  }
  fun skipWhile(checker: (Item) => Bool): Iterable<Item> {
    whereWithState<Bool>(
      true,
      { item, isSkipping =>
        if !isSkipping { return Tuple(true, false) }

        let newIsSkipping = checker(item)
        Tuple(!newIsSkipping, newIsSkipping)
      },
    )
  }

  fun slice(start: Int, end: Int): Iterable<Item> {
    skip(start).take(end - start)
  }

  fun take(n: Int): Iterable<Item> {
    whereWithState<Int>(0, { item, index => Tuple(index < n, index + 1) })
  }
  fun takeWhile(checker: (Item) => Bool): Iterable<Item> {
    // TODO(marcelgarus): Implement more efficiently.

    whereWithState<Bool>(
      true,
      { item, isTaking =>
        if !isTaking { return Tuple(false, false) }

        let newIsTaking = checker(item)
        Tuple(newIsTaking, newIsTaking)
      },
    )
  }

  // Conversion transformations.
  // These do more complicated stuff.

  fun maybeMap<Out>(maybeMapper: (Item) => Maybe<Out>): Iterable<Out> {
    // TODO(marcelgarus): As soon as implicit casts are available, maybe make the checker return a
    // `MaybeMapResult`, which can be either `Map(value)` or `Drop`?

    // TODO(JonasWanke): Use `whereSome` as soon as that's available.
    map<Maybe<Out>>(maybeMapper).whereType<Some<Out>>().map<Out>({ it.value })
  }

  // TODO(marcelgarus): distinctBy

  fun expand<T>(expander: (Item) => Iterable<T>): Iterable<T> {
    ExpandIterable<Item, T>(this, expander)
  }

  // TODO(marcelgarus): flatMap

  fun groupBy<T: Hash & Equals>(keyOf: (Item) => T): Map<T, List<Item>> {
    let map = MutableMap.empty<T, MutableList<Item>>()
    for item in this {
      map
        .putIfAbsent(keyOf(item), MutableList.empty<Item>())
        .append(item)
    }
    map
  }
  
  // TODO(marcelgarus): reversed

  fun zip<T>(other: Iterable<T>): Iterable<(Item, T)> {
    ZipIterable<Item, T>(this, other)
  }

  fun followedBy(other: Iterable<Item>): Iterable<Item> {
    FollowedByIterable<Item>(this, other)
  }

  // Action.

  fun do(action: (Item) => Unit) {
    for element in this {
      action(element)
    }
  }

  // Conversions.

  fun toList(): List<Item> { toMutableList() }
  fun toMutableList(): MutableList<Item> {
    let list = MutableList.empty<Item>()
    do({ list.append(it) })
    list
  }

  fun toSet(): Set<Item> { toMutableSet() }
  fun toMutableSet(): MutableSet<Item> {
    let iter = iterator()
    let set = MutableSet.empty<Item>()
    do({
      set.insert(it)
      unit
    })
    set
  }

  // Extras:

  // TODO(marcelgarus): + operator for joining Iterables
  // TODO(marcelgarus): for Iterable<Equals>: contains

  // TODO(marcelgarus): for Iterable<(A, B)>: map with 2 args, unzip
  // TODO(marcelgarus): for Iterable<Iterable<T>>: flatten
  // TODO(marcelgarus): for Iterable<Number>: average, sum, min, max
  // TODO(marcelgarus): for Iterable<Maybe<T>>: whereSome, unwrapAll

  fun join(separator: String): String {
    mut let s = ""
    mut let isFirst = true

    for item in this {
      if isFirst {
        isFirst = false
      } else {
        s = "{s}{separator}"
      }
      s = "{s}{item}"
    }
    s
  }

  fun unsafeEquals(other: Iterable<Item>): Bool {
    /// Checks if this `Iterable` is equal to the `other` one. Crashes if `Item` does not implement
    /// `Equals`.

    length() == other.length()
      && zip<Item>(other).all({ (it.first as Equals) == (it.second as Equals) })
  }

  fun unsafeHash<T>(hasher: Hasher<T>) {
    /// Hashes this `Iterable`. Crashes if `Item` does not implement `Hash`.

    for item in this {
      (item as Hash).hash<T>(hasher)
    }
  }

  fun unsafeToMap<K: Equals & Hash, V>(): Map<K, V> {
    /// Collects all items into a map. Crashes if `this` is not an `Iterable<(K, V)>`.

    let result = MutableMap.empty<K, V>()
    for item in cast<(K, V)>() {
      result.set(item.first, item.second)
    }
    result
  }
  fun unsafeToSet<T: Equals & Hash>(): Set<T> {
    /// Collects all items into a set. Crashes if items don't implement `Equals & Hash`.

    let result = MutableSet.empty<T>()
    for item in cast<T>() { result.insert(item) }
    result
  }
}

class MappedIterable<In, Out> {
  let parent: Iterable<In>
  let mapper: (In, Int) => Out
}
impl<In, Out> MappedIterable<In, Out>: Iterable<Out> {
  fun iterator(): Iterator<Out> {
    MappedIterator<In, Out>(parent.iterator(), mapper, 0)
  }
}
class MappedIterator<In, Out> {
  let parent: Iterator<In>
  let mapper: (In, Int) => Out
  mut let index = 0
}
impl<In, Out> MappedIterator<In, Out>: Iterator<Out> {
  fun next(): Maybe<Out> {
    let item = parent.next().map<Out>({ mapper(it, index) })
    index = index + 1
    item
  }
}

class WhereIterable<Item, State> {
  // TODO(marcelgarus): As soon as implicit casts are available, maybe make the updater return a
  //   `WhereResult`, which can be either `Keep` or `Drop`?
  let parent: Iterable<Item>
  let initialState: State
  let checker: (Item, State) => (Bool, State)
}
impl<Item, State> WhereIterable<Item, State>: Iterable<Item> {
  fun iterator(): Iterator<Item> {
    WhereIterator<Item, State>(parent.iterator(), initialState, checker)
  }
}
class WhereIterator<Item, State> {
  let parent: Iterator<Item>
  mut let state: State
  let checker: (Item, State) => (Bool, State)
}
impl<Item, State> WhereIterator<Item, State>: Iterator<Item> {
  fun next(): Maybe<Item> {
    loop {
      let element = parent.next()
      if element is None {
        return element
      } else {
        let result = checker(element.unwrap(), state)
        state = result.second
        if result.first { return element }
      }
    }
  }
}

class ExpandIterable<Item, T> {
  let parent: Iterable<Item>
  let expander: (Item) => Iterable<T>
}
impl<Item, T> ExpandIterable<Item, T>: Iterable<T> {
  fun iterator(): Iterator<T> {
    ExpandIterator<Item, T>(parent.iterator(), expander, None<Iterator<T>>())
  }
}
class ExpandIterator<Item, T> {
  let parent: Iterator<Item>
  let expander: (Item) => Iterable<T>
  mut let expanded: Maybe<Iterator<T>>
}
impl<Item, T> ExpandIterator<Item, T>: Iterator<T> {
  fun next(): Maybe<T> {
    loop {
      if expanded is Some {
        let item = expanded.unwrap().next()
        if item is Some {
          return item
        }
      }
      let item = parent.next()
      if item is None {
        return None<T>()
      }
      expanded = Some<Iterator<T>>(expander(item.unwrap()).iterator())
    }
  }
}


class ZipIterable<Item, T> {
  let parent: Iterable<Item>
  let other: Iterable<T>
}
impl<Item, T> ZipIterable<Item, T>: Iterable<(Item, T)> {
  fun iterator(): Iterator<(Item, T)> {
    ZipIterator<Item, T>(parent.iterator(), other.iterator())
  }
}
class ZipIterator<Item, T> {
  let parent: Iterator<Item>
  let other: Iterator<T>
}
impl<Item, T> ZipIterator<Item, T>: Iterator<(Item, T)> {
  fun next(): Maybe<(Item, T)> {
    let a = parent.next()
    let b = other.next()
    if a is None || b is None {
      None<(Item, T)>()
    } else {
      Some<(Item, T)>(Tuple(a.unwrap(), b.unwrap()))
    }
  }
}

class FollowedByIterable<Item> {
  let parent: Iterable<Item>
  let following: Iterable<Item>
}
impl<Item> FollowedByIterable<Item>: Iterable<Item> {
  fun iterator(): Iterator<Item> {
    FollowedByIterator<Item>(parent.iterator(), following.iterator())
  }
}
class FollowedByIterator<Item> {
  let parent: Iterator<Item>
  let following: Iterator<Item>
}
impl<Item> FollowedByIterator<Item>: Iterator<Item> {
  fun next(): Maybe<Item> {
    let a = parent.next()
    if a is Some {
      return a
    }
    following.next()
  }
}

trait EqualsIterable<Item: Equals>: Iterable<Item> {
  fun contains(item: Item): Bool {
    todo("Implement Iterable<Equals>.contains")
  }
  
  // TODO(marcelgarus): Implement distinct, indexOf, lastIndexOf
}
// impl<Item: Equals> Iterable<Item>: EqualsIterable<Item>

impl Int {
  fun until(endExclusive: Int): Iterable<Int> {
    assert(
      endExclusive >= this,
      "Exclusive end must be greater than or equal to that start, but {this} > {endExclusive}.",
    )
    UntilIterable(this, endExclusive)
  }
}
class UntilIterable {
  let start: Int
  let endExclusive: Int
}
impl UntilIterable: Iterable<Int> {
  fun iterator(): Iterator<Int> { UntilIterator(start, endExclusive) }
}
class UntilIterator {
  mut let value: Int
  let endExclusive: Int
}
impl UntilIterator: Iterator<Int> {
  fun next(): Maybe<Int> {
    assert(
      value <= endExclusive,
      "Value must be smaller than or equal to endExclusive, but {value} > {endExclusive}."
    )
    if (value == endExclusive) { return None<Int>() }
    
    let result = Some<Int>(value)
    value = value + 1
    result
  }
}
