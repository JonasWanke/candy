[equals] = use "..equality"
function = use "..function"
type = use "..type"

is value := value %
  True | False -> True
  _ -> False

not value :=
  needs (is value)
  value %
    True -> False
    False -> True

lazyAnd a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
    False -> False
and a b :=
  needs (is a)
  needs (is b)
  lazyAnd a { b }

lazyOr a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True -> True
    False ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
or a b :=
  needs (is a)
  needs (is b)
  a | lazyOr { b }

xor a b :=
  needs (is a)
  needs (is b)
  a | equals (b | not)

implies a b :=
  needs (is a)
  needs (is b)
  a | not | or b

test =
  [checkEquals] = use "..check"

  checkEquals (is True) True
  checkEquals (is False) True
  checkEquals (is 3) False

  checkEquals (not True) False
  checkEquals (not False) True

  ## `lazyAnd` and `lazyOr` are automatically tested by the tests for the
  ## non-lazy variants.

  checkEquals (and True True) True
  checkEquals (and True False) False
  checkEquals (and False True) False
  checkEquals (and False False) False

  checkEquals (or True True) True
  checkEquals (or True False) True
  checkEquals (or False True) True
  checkEquals (or False False) False

  checkEquals (xor True True) False
  checkEquals (xor True False) True
  checkEquals (xor False True) True
  checkEquals (xor False False) False

  checkEquals (implies True True) True
  checkEquals (implies True False) False
  checkEquals (implies False True) True
  checkEquals (implies False False) True
