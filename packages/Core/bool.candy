[equals] = use "..equality"
function = use "..function"
type = use "..type"

is value := value %
  True | False -> True
  _ -> False

not value :=
  needs (is value)
  value %
    True -> False
    False -> True

lazyAnd a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
    False -> False
and a b :=
  needs (is a)
  needs (is b)
  lazyAnd a { b }

lazyOr a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True -> True
    False ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
or a b :=
  needs (is a)
  needs (is b)
  a | lazyOr { b }

xor a b :=
  needs (is a)
  needs (is b)
  a | equals (b | not)

implies a b :=
  needs (is a)
  needs (is b)
  a | not | or b
