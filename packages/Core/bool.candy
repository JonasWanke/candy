[equals] = use "..equality"
function = use "..function"
type = use "..type"

is value := value %
  True | False -> True
  _ -> False

not value :=
  needs (is value)
  value %
    True -> False
    False -> True

lazyAnd a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
    False -> False
and a b :=
  needs (is a)
  needs (is b)
  lazyAnd a { b }

lazyOr a b :=
  needs (is a)
  needs (function.is0 b)
  a %
    True -> True
    False ->
      result = b | function.run
      needs (is result) "`b` didn't return a bool."
      result
or a b :=
  needs (is a)
  needs (is b)
  a | lazyOr { b }

xor a b :=
  needs (is a)
  needs (is b)
  a | equals (b | not)

implies a b :=
  needs (is a)
  needs (is b)
  a | not | or b

test =
  [checkEquals] = use "..check"

  checkEquals (is True) True
  checkEquals (is False) True
  checkEquals (is 3) False

  checkEquals (not True) False
  checkEquals (not False) True

  ## `lazyAnd` and `lazyOr` are automatically tested by the tests for the
  ## non-lazy variants.

  checkEquals (True | and True) True
  checkEquals (True | and False) False
  checkEquals (False | and True) False
  checkEquals (False | and False) False

  checkEquals (True | or True) True
  checkEquals (True | or False) True
  checkEquals (False | or True) True
  checkEquals (False | or False) False

  checkEquals (True | xor True) False
  checkEquals (True | xor False) True
  checkEquals (False | xor True) True
  checkEquals (False | xor False) False

  checkEquals (True | implies True) True
  checkEquals (True | implies False) False
  checkEquals (False | implies True) True
  checkEquals (False | implies False) True
