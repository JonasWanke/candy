equals = (use "..equality").equals
function = use "..function"
type = use "..type"

is value :=
  ✨.ifElse
    ✨.equals value True
    { True }
    { ✨.equals value False }

not a :=
  needs (is a)
  ✨.ifElse a { False } { True }

lazyAnd a b :=
  needs (is a)
  needs (function.is0 b)
  ✨.ifElse
    a
    {
      result = ✨.functionRun b
      needs (is result) "`b` didn't return a bool."
      result
    }
    { False }
and a b :=
  needs (is a)
  needs (is b)
  lazyAnd a { b }

lazyOr a b :=
  needs (is a)
  needs (function.is0 b)
  ✨.ifElse
    a
    { True }
    {
      result = ✨.functionRun b
      needs (is result) "`b` didn't return a bool."
      result
    }
or a b :=
  needs (is a)
  needs (is b)
  lazyOr a { b }

xor a b :=
  needs (is a)
  needs (is b)
  equals a (not b)

implies a b :=
  needs (is a)
  needs (is b)
  ✨.ifElse a { b } { True }
