builtins = use "Builtins"
bool = use "..bool"
[ifElse, recursive] = use "..controlFlow"
[equals] = use "..equality"
type = use "..type"

is value := type.is value Int

theAnswer := 42

add := builtins.intAdd
subtract := builtins.intSubtract
negate value :=
  needs (is value)
  subtract 0 value
multiply := builtins.intMultiply
divideTruncating := builtins.intDivideTruncating
remainder := builtins.intRemainder
modulo := builtins.intModulo

compareTo valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  valueA | builtins.intCompareTo valueB
isLessThan valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  valueA | compareTo valueB | equals Less
isGreaterThan valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  valueA | compareTo valueB | equals Greater
isLessThanOrEqualTo valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  valueA | isGreaterThan valueB | bool.not
isGreaterThanOrEqualTo valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  valueA | isLessThan valueB | bool.not

isPositive value :=
  needs (is value)
  value | isGreaterThan 0
isNonPositive value :=
  needs (is value)
  value | isPositive | bool.not
isNegative value :=
  needs (is value)
  value | isLessThan 0
isNonNegative value :=
  needs (is value)
  value | isNegative | bool.not
absolute value :=
  needs (is value)
  ifElse (isNegative value) { negate value } { value }

isUnsignedByte value :=
  is value | bool.lazyAnd { value | isNonNegative } | bool.lazyAnd { value | isLessThan 256 }
fitsInRustU32 value :=
  needs (is value)
  needs (isNonNegative value)

  rustU32Max = 4294967295
  # https://doc.rust-lang.org/std/primitive.u32.html#associatedconstant.MAX
  value | isLessThan rustU32Max
fitsInRustU128 value :=
  needs (is value)
  needs (isNonNegative value)

  rustU128Max = 340282366920938463463374607431768211455
  # https://doc.rust-lang.org/std/primitive.u128.html#associatedconstant.MAX
  value | isLessThan rustU128Max

shiftLeft := builtins.intShiftLeft
shiftRight := builtins.intShiftRight

bitLength := builtins.intBitLength

bitwiseAnd := builtins.intBitwiseAnd
bitwiseOr := builtins.intBitwiseOr
bitwiseXor := builtins.intBitwiseXor

lowestBits value bitCount :=
  needs (is value)
  needs (is bitCount)
  needs (isPositive bitCount)
  mask = 1 | shiftLeft bitCount | subtract 1
  value | bitwiseAnd mask

isEven value :=
  needs (is value)
  value | bitwiseAnd 1 | equals 0
isOdd value :=
  needs (is value)
  value | bitwiseAnd 1 | equals 1

min valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  ifElse (valueA | isLessThanOrEqualTo valueB) { valueA } { valueB }
max valueA valueB :=
  needs (is valueA)
  needs (is valueB)
  ifElse (valueA | isGreaterThanOrEqualTo valueB) { valueA } { valueB }
coerceAtLeast value minimum :=
  needs (is value)
  needs (is minimum)
  max value minimum
coerceAtMost value maximum :=
  needs (is value)
  needs (is maximum)
  min value maximum
coerceIn value minimum maximum :=
  needs (is value)
  needs (is minimum)
  needs (is maximum)
  needs (minimum | isLessThanOrEqualTo maximum)
  value | coerceAtLeast minimum | coerceAtMost maximum

parse := builtins.intParse

pow base exponent :=
  needs (is base)
  needs (is exponent)
  needs (isNonNegative exponent)
  recursive [base, exponent] { recurse params ->
    [base, exponent] = params
    exponent %
      0 -> 1
      _ ->
        ifElse
          exponent | isEven
          { recurse [Base: base | multiply base, Exponent: exponent | shiftRight 1] }
          {
            base
            | multiply
              recurse [Base: base | multiply base, Exponent: exponent | subtract 1 | shiftRight 1]
          }
  }

test =
  [checkEquals] = use "..check"

  checkEquals (is 2) True
  checkEquals (is Foo) False

  checkEquals (add 2 3) 5
  checkEquals (subtract 4 1) 3
  checkEquals (multiply 2 3) 6
  checkEquals (divideTruncating 7 4) 1

  checkEquals (remainder 6 3) 0
  checkEquals (remainder 5 3) 2
  checkEquals (remainder (negate 5) 3) (negate 2)
  checkEquals (remainder 5 (negate 3)) 2
  checkEquals (remainder (negate 5) (negate 3)) (negate 2)

  checkEquals (modulo 6 3) 0
  checkEquals (modulo 5 3) 2
  checkEquals (modulo 5 (negate 3)) 2
  checkEquals (modulo (negate 5) 3) 1
  checkEquals (modulo (negate 5) (negate 3)) 1

  checkEquals (compareTo 6 3) Greater
  checkEquals (compareTo 6 6) Equal
  checkEquals (compareTo 6 9) Less

  checkEquals (isLessThan 1 2) True
  checkEquals (isLessThan 2 2) False
  checkEquals (isLessThan 2 1) False

  checkEquals (isGreaterThan 1 2) False
  checkEquals (isGreaterThan 2 2) False
  checkEquals (isGreaterThan 2 1) True

  checkEquals (isLessThanOrEqualTo 1 2) True
  checkEquals (isLessThanOrEqualTo 2 2) True
  checkEquals (isLessThanOrEqualTo 2 1) False

  checkEquals (isGreaterThanOrEqualTo 1 2) False
  checkEquals (isGreaterThanOrEqualTo 2 2) True
  checkEquals (isGreaterThanOrEqualTo 2 1) True

  checkEquals (isPositive 1) True
  checkEquals (isPositive 0) False
  checkEquals (isPositive (negate 1)) False

  checkEquals (isNonPositive 1) False
  checkEquals (isNonPositive 0) True
  checkEquals (isNonPositive (negate 1)) True

  checkEquals (isNegative 1) False
  checkEquals (isNegative 0) False
  checkEquals (isNegative (negate 1)) True

  checkEquals (isNonNegative 1) True
  checkEquals (isNonNegative 0) True
  checkEquals (isNonNegative (negate 1)) False

  checkEquals (absolute 3) 3
  checkEquals (absolute 0) 0
  checkEquals (absolute (negate 3)) 3

  checkEquals (shiftLeft 1 2) 4
  checkEquals (shiftLeft 3 1) 6

  checkEquals (shiftRight 5 2) 1
  checkEquals (shiftRight 10 1) 5

  checkEquals (bitLength 0) 0
  checkEquals (bitLength 1) 1
  checkEquals (bitLength 3) 2
  checkEquals (bitLength 10) 4

  checkEquals (bitwiseAnd 0b10 0b10) 0b10
  checkEquals (bitwiseAnd 0b10 0b1) 0
  checkEquals (bitwiseAnd 0b11 0b110) 0b10

  checkEquals (bitwiseOr 0b10 0b10) 0b10
  checkEquals (bitwiseOr 0b10 0b1) 0b11
  checkEquals (bitwiseOr 0b11 0b110) 0b111

  checkEquals (bitwiseXor 0b10 0b10) 0
  checkEquals (bitwiseXor 0b10 0b1) 0b11
  checkEquals (bitwiseXor 0b11 0b110) 0b101

  checkEquals (isEven 0) True
  checkEquals (isEven 1) False
  checkEquals (isEven 2) True
  checkEquals (isEven 3) False
  checkEquals (isEven (negate 3)) False

  checkEquals (isOdd 0) False
  checkEquals (isOdd 1) True
  checkEquals (isOdd 2) False
  checkEquals (isOdd 3) True
  checkEquals (isOdd (negate 3)) True

  checkEquals (min 3 1) 1
  checkEquals (min 1 2) 1

  checkEquals (max 3 1) 3
  checkEquals (max 1 2) 2

  checkEquals (coerceAtLeast 2 1) 2
  checkEquals (coerceAtLeast 2 3) 3

  checkEquals (coerceAtMost 2 1) 1
  checkEquals (coerceAtMost 2 3) 2

  checkEquals (coerceIn 1 2 4) 2
  checkEquals (coerceIn 3 2 4) 3
  checkEquals (coerceIn 5 2 4) 4

  checkEquals (parse "123") (Ok 123)
  # TODO: Currently, `parse` returns a different error.
  #checkEquals (parse "Hi") (Error NotAnInteger)

  checkEquals (pow 3 2) 9
  checkEquals (pow 2 3) 8
  checkEquals (pow 9 1) 9
