builtins = use "Builtins"
bool = use "..bool"
[ifElse, recursive] = use "..controlFlow"
[equals] = use "..equality"
function = use "..function"
int = use "..int"
result = use "..result"
type = use "..type"

is value := type.is value List

length := builtins.listLength
isEmpty list :=
  needs (is list)
  equals (length list) 0

lastIndex list :=
  needs (is list)
  ifElse (list | isEmpty) { Error Empty } {
    Ok (list | length | int.subtract 1)
  }
isValidIndex list index :=
  needs (is list)
  needs (int.is index)
  ifElse (list | isEmpty) { False } { index | int.isNonNegative }
  | bool.lazyAnd { index | int.isLessThanOrEqualTo (list | lastIndex | result.unwrap) }
isValidInsertIndex list index :=
  needs (is list)
  needs (int.is index)
  ifElse (list | isEmpty) { False } { index | int.isNonNegative }
  | bool.lazyAnd { index | int.isLessThanOrEqualTo (list | length) }

get := builtins.listGet

single list :=
  needs (is list)
  list %
    (,) -> Error Empty
    (item,) -> Ok item
    _ -> Error MoreThanOneItem
first list :=
  needs (is list)
  list %
    (,) -> Error Empty
    _ -> Ok (list | get 0)
last list :=
  needs (is list)
  list | lastIndex | result.mapError { _ -> Empty }
  | result.map { index -> list | get index }

insert := builtins.listInsert

prepend list item :=
  needs (is list)
  list | insert 0 item
append list item :=
  needs (is list)
  list | insert (length list) item

replace := builtins.listReplace
update list index updater :=
  needs (is list)
  needs (int.is index)
  needs (list | isValidIndex index)
  needs (function.is1 updater)
  oldValue = list | get index
  newValue = updater oldValue
  list | replace index newValue

removeAt := builtins.listRemoveAt

filled := builtins.listFilled
generate length valueGetter :=
  # Creates a new list of the given `length`, where each slot is filled by calling `valueGetter`
  # with the index.
  needs (int.is length)
  needs (int.isNonNegative length)
  needs (int.fitsInRustU32 length)
  needs (function.is1 valueGetter)

  list = filled length Placeholder
  recursive [list, Index: 0] { recurse [list, index] ->
    ifElse (index | equals length) { list } {
      item = valueGetter index
      list = list | replace index item
      recurse [list, Index: int.add index 1]
    }
  }

getRange list startInclusive endExclusive :=
  needs (is list)
  needs (int.is startInclusive)
  needs (startInclusive | int.isNonNegative)
  needs (startInclusive | int.isLessThanOrEqualTo (list | length))
  needs (int.is endExclusive)
  needs (endExclusive | int.isNonNegative)
  needs (endExclusive | int.isLessThanOrEqualTo (list | length))
  needs (startInclusive | int.isLessThanOrEqualTo endExclusive)
  generate (endExclusive | int.subtract startInclusive) { index ->
    list | get (startInclusive | int.add index)
  }

concatenate listA listB :=
  needs (is listA)
  needs (is listB)
  generate (listA | length | int.add (listB | length)) { index ->
    ifElse (index | int.isLessThan (listA | length)) { listA | get index } {
      listB | get (index | int.subtract (listA | length))
    }
  }

firstIndexWhere list predicate :=
  needs (is list)
  needs (function.is1 predicate)
  recursive [list, Index: 0] { recurse [list, index] ->
    ifElse (index | equals (list | length)) { NotFound } {
      predicateResult = predicate (list | get index)
      needs (bool.is predicateResult)
      ifElse predicateResult { FoundAt index } { recurse [list, Index: int.add index 1] }
    }
  }
firstWhere list predicate :=
  needs (is list)
  needs (function.is1 predicate)
  list | firstIndexWhere predicate %
    FoundAt index -> Found (list | get index)
    NotFound -> NotFound
firstIndexOf list item :=
  needs (is list)
  firstIndexWhere list { a -> a | equals item }
lastIndexWhere list predicate :=
  needs (is list)
  needs (function.is1 predicate)
  recursive [list, Index: list | lastIndex | result.unwrapOr (int.negate 1)] {
    recurse [list, index] ->
    ifElse (index | equals (int.negate 1)) { NotFound } {
      predicateResult = predicate (list | get index)
      needs (bool.is predicateResult)
      ifElse predicateResult { FoundAt index } { recurse [list, Index: int.subtract index 1] }
    }
  }
lastWhere list predicate :=
  needs (is list)
  needs (function.is1 predicate)
  list | lastIndexWhere predicate %
    FoundAt index -> Found (list | get index)
    NotFound -> NotFound
lastIndexOf list item :=
  needs (is list)
  lastIndexWhere list { a -> a | equals item }

#test =
#  [checkEquals] = use "..check"
#
#  checkEquals (is (1, 2, 3)) True
#  checkEquals (is Hello) False
#
#  checkEquals (length (1, 2, 3)) 3
#  checkEquals (length (3, 3)) 2
#
#  checkEquals (isEmpty (,)) True
#
#  checkEquals (lastIndex (1, 2, 3)) (Ok 2)
#  checkEquals (lastIndex (3, 3)) (Ok 1)
#  checkEquals (lastIndex (,)) (Error Empty)
#
#  checkEquals ((1, 2, 3) | isValidIndex (int.negate 1)) False
#  checkEquals ((1, 2, 3) | isValidIndex 0) True
#  checkEquals ((1, 2, 3) | isValidIndex 1) True
#  checkEquals ((1, 2, 3) | isValidIndex 2) True
#  checkEquals ((1, 2, 3) | isValidIndex 3) False
#  checkEquals ((1, 2, 3) | isValidIndex 4) False
#  checkEquals ((1, 2, 3) | isValidIndex 100) False
#
#  checkEquals ((1, 2, 3) | isValidInsertIndex (int.negate 1)) False
#  checkEquals ((1, 2, 3) | isValidInsertIndex 0) True
#  checkEquals ((1, 2, 3) | isValidInsertIndex 1) True
#  checkEquals ((1, 2, 3) | isValidInsertIndex 2) True
#  checkEquals ((1, 2, 3) | isValidInsertIndex 3) True
#  checkEquals ((1, 2, 3) | isValidInsertIndex 4) False
#  checkEquals ((1, 2, 3) | isValidInsertIndex 100) False
#
#  checkEquals ((Foo, Bar, Baz) | get 0) Foo
#  checkEquals ((Foo, Bar, Baz) | get 1) Bar
#  checkEquals ((Foo, Bar, Baz) | get 2) Baz
#
#  checkEquals (single (,)) (Error Empty)
#  checkEquals (single (Foo,)) (Ok Foo)
#  checkEquals (single (Foo, Bar)) (Error MoreThanOneItem)
#
#  checkEquals (first (,)) (Error Empty)
#  checkEquals (first (Foo,)) (Ok Foo)
#  checkEquals (first (Foo, Bar)) (Ok Foo)
#
#  checkEquals (last (,)) (Error Empty)
#  checkEquals (last (Foo,)) (Ok Foo)
#  checkEquals (last (Foo, Bar)) (Ok Bar)
#
#  checkEquals ((Foo, Bar) | insert 0 Baz) (Baz, Foo, Bar)
#  checkEquals ((Foo, Bar) | insert 1 Baz) (Foo, Baz, Bar)
#  checkEquals ((Foo, Bar) | insert 2 Baz) (Foo, Bar, Baz)
#
#  checkEquals ((Foo, Bar) | prepend Baz) (Baz, Foo, Bar)
#
#  checkEquals ((Foo, Bar) | append Baz) (Foo, Bar, Baz)
#
#  checkEquals ((Foo, Bar) | replace 0 Baz) (Baz, Bar)
#  checkEquals ((Foo, Bar) | replace 1 Baz) (Foo, Baz)
#
#  checkEquals ((1, 2) | update 0 { a -> int.add a 1 }) (2, 2)
#
#  checkEquals ((Foo, Bar) | removeAt 0) (Bar,)
#  checkEquals ((Foo, Bar) | removeAt 1) (Foo,)
#
#  checkEquals (filled 2 Foo) (Foo, Foo)
#  checkEquals (filled 10 1) (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
#
#  checkEquals (generate 5 { a -> a }) (0, 1, 2, 3, 4)
#
#  checkEquals ((1, 2, 3, 4, 5) | getRange 1 4) (2, 3, 4)
#
#  checkEquals (concatenate (1, 2, 3) (4, 5)) (1, 2, 3, 4, 5)
