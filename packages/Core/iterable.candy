bool = use "..bool"
[ifElse, recursive] = use "..controlFlow"
[equals] = use "..equality"
function = use "..function"
int = use "..int"
result = use "..result"
list = use "..list"
text = use "..text"

# An iterable is a `() -> Result[[Item, Rest: Iterable[Item]], Any]`.
# isWithItemType value checkItem :=
#   result.is value | bool.lazyAnd {
#     value
#     | result.map { current ->
#       list.is current
#       | bool.lazyAnd { equals (current | list.length) 2 }
#       | bool.lazyAnd { checkItem (current | list.get 0) }
#       | bool.lazyAnd (function.is0 (current | list.get 1))
#     }
#     | result.unwrapOr True
#   }
# is value := isWithItemType value { _ -> True }
is value := function.is0 value

next iterable :=
  needs (is iterable)
  iterable | function.run
isEmpty iterable :=
  needs (is iterable)
  iterable | next | result.isError

generateWithState initialState mapper :=
  # Creates a new iterator from a state and mapper. The `mapper` receives the
  # current state and returns either one of these:
  #
  # - an `Ok` of a struct containing the item to emit (`Item`) and the new
  #   state (`State`)
  # - an `Error`, indicating that the iterator is done
  needs (function.is1 mapper)
  recursive initialState { recurse state ->
    { mapper state | result.map { [item, state] -> [item, Rest: recurse state] } }
  }
generate length valueGetter :=
  # Creates a new iterable of the given `length`, where each slot is filled by calling `valueGetter`
  # with the index.
  needs (int.is length)
  needs (int.isNonNegative length)
  needs (int.fitsInRustU32 length)
  needs (function.is1 valueGetter)

  generateWithState 0 { index ->
    ifElse (index | equals length) { Error Empty } {
      item = valueGetter index
      Ok [item, State: index | int.add 1]
    }
  }
range length :=
  # Creates a new iterable of the given `length`, where each slot is filled by the index.
  needs (int.is length)
  needs (int.isNonNegative length)
  needs (int.fitsInRustU32 length)
  generate length { index -> index }

## Mapping Transformation
##
## These return an iterable with the same length, but different items.

map iterable mapper :=
  needs (is iterable)
  needs (function.is1 mapper)
  generateWithState iterable { previousState ->
    previousState | next | result.map { [item, rest] -> [Item: mapper item, State: rest] }
  }

withIndex iterable :=
  needs (is iterable)
  generateWithState [iterable, Index: 0] { previousState ->
    [iterable, index] = previousState
    iterable | next
    | result.map { [item, rest] -> [Item: [item, index], State: [Iterable: rest, Index: index | int.add 1]]
    }
  }

## Reduction

# TODO: ensure this works with tail recursion
foldLeftHelper = { foldLeftHelper iterable value combine ->
  iterable | next | result.map { [item, rest] ->
    newValue = combine value item
    foldLeftHelper foldLeftHelper rest newValue combine
  }
  | result.unwrapOr value
}
foldLeft iterable initialValue combine :=
  needs (is iterable)
  needs (function.is2 combine)
  foldLeftHelper foldLeftHelper iterable initialValue combine
# TODO: `foldRight`

reduceLeft iterable combine :=
  needs (is iterable)
  needs (function.is2 combine)
  iterable | next | result.mapError { _ -> "Can't `reduceLeft` an empty iterable" }
  | result.map { [item, rest] -> rest | foldLeft item combine }
# TODO: `reduceRight`

sum iterableOfInt :=
  needs (is iterableOfInt)
  iterableOfInt | reduceLeft { a b ->
    needs (int.is a)
    needs (int.is b)
    a | int.add b
  }
  | result.unwrapOr 0
length iterable :=
  needs (is iterable)
  iterable | map { _ -> 1 } | sum

all iterable tester :=
  needs (is iterable)
  needs (function.is1 tester)
  iterable | foldLeft True { result item ->
    itemResult = tester item
    needs (bool.is itemResult)
    result | bool.and itemResult
  }
  # TODO: stop after the first `False`
any iterable tester :=
  needs (is iterable)
  needs (function.is1 tester)
  iterable | foldLeft False { result item ->
    itemResult = tester item
    needs (bool.is itemResult)
    result | bool.or itemResult
  }
  # TODO: stop after the first `True`

joinToText iterable :=
  needs (is iterable)

  iterable | foldLeft "" { result item ->
    needs (text.is item)
    result | text.concatenate item
  }

## Filtering

whereHelper = { whereHelper iterable tester ->
  generateWithState iterable { iterable ->
    iterable | next | result.flatMap { [item, rest] ->
      ifElse (tester item) { Ok [item, State: rest] } { whereHelper whereHelper rest tester | next | result.map { [item, rest] -> [item, State: rest] } }
    }
  }
}
where iterable tester :=
  needs (is iterable)
  needs (function.is1 tester)
  whereHelper whereHelper iterable tester

takeWhile iterable tester := generateWithState iterable { iterable ->
  iterable | next
  | result.flatMap { [item, rest] -> ifElse (tester item) { Ok [item, State: rest] } { Error Empty }
  }
}

takeUntil iterable tester := iterable | takeWhile { item -> tester item | bool.not }

take iterable n :=
  needs (is iterable)
  needs (int.is n)
  needs (int.isNonNegative n)

  iterable | withIndex | takeWhile { [item, index] -> index | int.isLessThan n }
  | map { it -> it.item }

skipHelper = { skipHelper iterable n ->
  ifElse (equals n 0) { iterable } {
    {
      iterable | next | result.flatMap { it ->
        skipHelper skipHelper it.rest (n | int.subtract 1) | next
      }
    }
  }
}
skip iterable n :=
  needs (is iterable)
  needs (int.is n)
  needs (int.isNonNegative n)
  skipHelper skipHelper iterable n

## Action

forEach iterable action :=
  needs (is iterable)
  needs (function.is1 action)
  iterable | foldLeft Nothing { _ item ->
    action item
    Nothing
  }

## Conversion

fromList l :=
  needs (list.is l)
  generate (l | list.length) { index -> l | list.get index }
fromListReversed l :=
  needs (list.is l)
  generate (l | list.length) { index ->
    l | list.get (l | list.length | int.subtract index | int.subtract 1)
  }

toList iterable :=
  needs (is iterable)
  iterable | foldLeft (,) { result item -> result | list.append item }

## Partitioning

windowed iterable size step allowPartialWindows :=
  needs (is iterable)
  needs (int.is size)
  needs (int.isPositive size)
  needs (int.is step)
  needs (int.isPositive step)
  needs (bool.is allowPartialWindows)

  generateWithState iterable { iterable ->
    items = iterable | take size | toList
    length = items | list.length
    isLongEnough = ifElse allowPartialWindows { length | int.isPositive } { length | equals size }
    ifElse isLongEnough { Ok [Item: items, State: iterable | skip step] } { Error Empty }
  }
chunked iterable size :=
  needs (is iterable)
  needs (int.is size)
  needs (int.isPositive size)

  iterable | windowed size size True

test =
  [checkEquals] = use "..check"
  [toDebugText] = use "..toDebugText"

  oneToThree = (1, 2, 3) | fromList
  oneToTen = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) | fromList

  checkEquals (is oneToThree) True
  checkEquals (is 3) False

  testNext =
    Ok [item, rest] = oneToThree | next
    checkEquals item 1
    Ok [item, rest] = rest | next
    checkEquals item 2
  
  checkEquals (isEmpty oneToThree) False
  checkEquals (isEmpty (fromList (,))) True

  checkEquals (oneToThree | map { a -> int.multiply a 2 } | toList) (2, 4, 6)
  checkEquals (oneToThree | sum) 6
  checkEquals (oneToThree | length) 3
  checkEquals (oneToThree | all { a -> int.isPositive a }) True
  checkEquals (oneToThree | any { a -> equals a 2 }) True
  checkEquals (oneToThree | map { a -> a | toDebugText } | joinToText) "123"
  checkEquals (oneToTen | where { a -> a | int.isOdd } | toList) (1, 3, 5, 7, 9)
  checkEquals (oneToTen | takeWhile { a -> a | int.isLessThan 4 } | toList) (1, 2, 3)
  checkEquals (oneToTen | take 4 | toList) (1, 2, 3, 4)
  checkEquals (oneToTen | skip 4 | toList) (5, 6, 7, 8, 9, 10)
  checkEquals (oneToTen | windowed 4 3 False | toList) ((1, 2, 3, 4), (4, 5, 6, 7), (7, 8, 9, 10))
  checkEquals (oneToTen | chunked 3 | toList) ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10,))
