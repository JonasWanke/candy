builtins = use "Builtins"
bool = use "..bool"
[ifElse, recursive] = use "..controlFlow"
[equals] = use "..equality"
int = use "..int"
# iterable = use "..iterable"
list = use "..list"
struct = use "..struct"
type = use "..type"

is value := type.is value Text

rick := "
  We're no strangers to love
  You know the rules and so do I
  A full commitment's what I'm thinking of
  You wouldn't get this from any other guy

  I just wanna tell you how I'm feeling
  Gotta make you understand

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you

  We've known each other for so long
  Your heart's been aching, but you're too shy to say it
  Inside, we both know what's been going on
  We know the game and we're gonna play it

  And if you ask me how I'm feeling
  Don't tell me you're too blind to see

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you

  Never gonna give, never gonna give
  Never gonna give, never gonna give

  We've known each other for so long
  Your heart's been aching, but you're too shy to say it
  Inside, we both know what's been going on
  We know the game and we're gonna play it

  I just wanna tell you how I'm feeling
  Gotta make you understand

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you

  Never gonna give you up
  Never gonna let you down
  Never gonna run around and desert you
  Never gonna make you cry
  Never gonna say goodbye
  Never gonna tell a lie and hurt you
"

fromUtf8 := builtins.textFromUtf8

isEmpty := builtins.textIsEmpty
length := builtins.textLength

characters := builtins.textCharacters
characterAt text index :=
  needs (is text)
  needs (int.is index)
  needs (int.isNonNegative index)
  needs (int.isLessThan index (length text))
  text | characters | list.get index

# TODO: Support ranges when we have them.
getRange := builtins.textGetRange

concatenate := builtins.textConcatenate

startsWith := builtins.textStartsWith
endsWith := builtins.textEndsWith
contains := builtins.textContains

removePrefix text prefix :=
  needs (is text)
  needs (is prefix)
  ifElse (text | startsWith prefix) { text | getRange (prefix | length) (text | length) } { text }
removeSuffix text suffix :=
  needs (is text)
  needs (is suffix)
  textLength = text | length
  ifElse
    endsWith text suffix
    { text | getRange (textLength | int.subtract (suffix | length)) textLength }
    { text }

trimStart := builtins.textTrimStart
trimEnd := builtins.textTrimEnd
trim text :=
  needs (is text)
  text | trimStart | trimEnd

firstIndexOf text char :=
  needs (is text)
  needs (is char)
  needs (length char | equals 1)
  recursive 0 { recurse i ->
    ifElse
      text | length | int.isGreaterThan i
      { ifElse (text | characterAt i | equals char) { i } { i | int.add 1 | recurse } }
      { int.negate 1 }
  }

repeat text times :=
  needs (is text)
  needs (int.is times)
  needs (times | int.isGreaterThanOrEqualTo 1)
  recursive (text, times) { recurse (repeatedText, times) ->
    ifElse (times | equals 1) { repeatedText } {
      (repeatedText | concatenate text, times | int.subtract 1) | recurse
    }
  }

padStart text len char :=
  needs (is text)
  needs (int.is len)
  needs (is char)
  needs (char | length | equals 1)
  textLength = text | length
  ifElse (textLength | int.isGreaterThanOrEqualTo len) { text } {
    (char | repeat (len | int.subtract textLength)) | concatenate text 
  }
padEnd text len char :=
  needs (is text)
  needs (int.is len)
  needs (is char)
  needs (char | length | equals 1)
  textLength = text | length
  ifElse (textLength | int.isGreaterThanOrEqualTo len) { text } {
    text | concatenate (char | repeat (len | int.subtract textLength))
  }
