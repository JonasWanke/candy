builtins = use "Builtins"
bool = use "..bool"
[ifElse] = use "..controlFlow"
[equals] = use "..equality"
int = use "..int"
# iterable = use "..iterable"
list = use "..list"
struct = use "..struct"
type = use "..type"

is value := type.is value Text

fromUtf8 := builtins.textFromUtf8

isEmpty := builtins.textIsEmpty
length := builtins.textLength

characters := builtins.textCharacters
characterAt text index :=
  needs (is text)
  needs (int.is index)
  needs (int.isNonNegative index)
  needs (int.isLessThan index (length text))
  text | characters | list.get index

# TODO: Support ranges when we have them.
getRange := builtins.textGetRange

concatenate := builtins.textConcatenate

startsWith := builtins.textStartsWith
endsWith := builtins.textEndsWith
contains := builtins.textContains

removePrefix text prefix :=
  needs (is text)
  needs (is prefix)
  ifElse (text | startsWith prefix) { text | getRange (prefix | length) (text | length) } { text }
removeSuffix text suffix :=
  needs (is text)
  needs (is suffix)
  textLength = text | length
  ifElse
    endsWith text suffix
    { text | getRange (textLength | int.subtract (suffix | length)) textLength }
    { text }

trimStart := builtins.textTrimStart
trimEnd := builtins.textTrimEnd
trim text :=
  needs (is text)
  text | trimStart | trimEnd
