bool = use "..bool"
[equals] = use "..equality"
function = use "..function"

ifElse condition then else :=
  needs (bool.is condition)
  needs (function.is0 then)
  needs (function.is0 else)
  âœ¨.ifElse condition then else

if condition then :=
  needs (bool.is condition)
  needs (function.is0 then)
  ifElse condition then {}

recurse initialArg body :=
  needs (function.is2 body) "The `body` should take the recurse function and the argument."
  fullRec = { fullRec arg ->
    rec = { arg -> fullRec fullRec arg }
    body rec arg
  }
  fullRec fullRec initialArg

## TODO: Support breaking with a value as soon as tags are supported.
## TODO: Support looping with a state.
loop body :=
  needs (function.is0 body)
  recurse Nothing { rec arg ->
    result = function.run body
    needs
      ((result | equals Continue) | bool.or (result | equals Break))
      "The `body` has to return `Continue` or `Break`."
    if (result | equals Continue) { rec Nothing }
  }
