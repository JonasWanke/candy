struct Nothing {}
enum Never {}

trait ToText {
  fun toText(self: Self) Text
}

# Operators
trait OperatorPlus[T] {
  # TODO: add associated type for return type
  fun plus(self: Self, other: T) Self
}

trait Equal {
  fun equals(self: Self, other: Self) Bool
}

trait Compare {
  fun compareTo(self: Self, other: Self) Ordering
}
fun isLessThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => false,
    greater => false,
  }
}
fun isAtMost[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => true,
    greater => false,
  }
}
fun isGreaterThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => false,
    greater => true,
  }
}
fun isAtLeast[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => true,
    greater => true,
  }
}
fun coerceAtLeast[T: Compare](value: T, minimum: T) T {
  switch value.compareTo(minimum) {
    less => minimum,
    equal => value,
    greater => value,
  }
}
fun coerceAtMost[T: Compare](value: T, maximum: T) T {
  switch value.compareTo(maximum) {
    less => value,
    equal => value,
    greater => maximum,
  }
}
fun coerceInRange[T: Compare](value: T, minimum: T, maximum: T) T {
  needs(minimum.isAtMost(maximum))

  value.coerceAtLeast(minimum).coerceAtMost(maximum)
}
enum Ordering { less, equal, greater }
impl Ordering: Compare {
  fun compareTo(self: Ordering, other: Ordering) Ordering {
    switch self {
      less => switch other {
        less => Ordering.equal(),
        equal => Ordering.less(),
        greater => Ordering.less(),
      },
      equal => switch other {
        less => Ordering.greater(),
        equal => Ordering.equal(),
        greater => Ordering.less(),
      },
      greater => switch other {
        less => Ordering.greater(),
        equal => Ordering.greater(),
        greater => Ordering.equal(),
      },
    }
  }
}
impl Ordering: ToText {
  fun toText(self: Ordering) Text {
    switch self {
      less => "less",
      equal => "equal",
      greater => "greater",
    }
  }
}
impl[T: Compare] T: Equal {
  fun equals(self: T, other: T) Bool {
    switch self.compareTo(other) {
      less => false,
      equal => true,
      greater => false,
    }
  }
}

trait Add {
  fun add(self: Self, other: Self) Self
}
trait Subtract {
  fun subtract(self: Self, other: Self) Self
}
# TODO: `impl[T: Add] T: OperatorPlus[T] {}`, etc.

struct Int = builtin
impl Int: ToText {
  fun toText(self: Int) Text {
    self.builtinIntToText()
  }
}
impl Int: Compare {
  fun compareTo(self: Int, other: Int) Ordering {
    self.builtinIntCompareTo(other)
  }
}
fun isPositive(self: Int) Bool {
  self.isGreaterThan(0)
}
fun isNonPositive(self: Int) Bool {
  self.isAtMost(0)
}
fun isNegative(self: Int) Bool {
  self.isLessThan(0)
}
fun isNonNegative(self: Int) Bool {
  self.isAtLeast(0)
}
fun absolute(self: Int) Int {
  switch self.isNegative() {
    true => self.negate(),
    false => self,
  }
}
impl Int: Add {
  fun add(self: Int, other: Int) Int {
    self.builtinIntAdd(other)
  }
}
impl Int: Subtract {
  fun subtract(self: Int, other: Int) Int {
    self.builtinIntSubtract(other)
  }
}
fun negate(self: Int) Int {
  0.subtract(self)
}
fun multiply(self: Int, other: Int) Int {
  self.builtinIntMultiply(other)
}
fun square(self: Int) Int {
  self.multiply(self)
}
fun divideTruncating(dividend: Int, divisor: Int) Int {
  needs(divisor.equals(0).not())

  dividend.builtinIntDivideTruncating(divisor)
}
fun remainder(dividend: Int, divisor: Int) Int {
  # Returns the remainder you get when dividing the `dividend` by the `divisor`.
  #
  # The result has the same sign as the `dividend`.
  #
  # | `dividend` | `divisor` | `dividend.remainder(divisor)` |
  # |-----------:|----------:|---------------------------:|
  # |          6 |         3 |                          0 |
  # |          5 |         3 |                          2 |
  # |         -5 |         3 |                         -2 |
  # |          5 |        -3 |                          2 |
  # |         -5 |        -3 |                         -2 |
  needs(divisor.equals(0).not())

  dividend.builtinIntRemainder(divisor)
}
fun modulo(dividend: Int, divisor: Int) Int {
  # Returns `dividend` % `divisor`.
  #
  # The result of a modulo operation is the smallest non-negative number $x$
  # such that there exists a $y$ with $dividend = y * divisor + x$.
  #
  # | `dividend` | `divisor` | `dividend.modulo(divisor)` |
  # |-----------:|----------:|---------------------------:|
  # |          6 |         3 |                          0 |
  # |          5 |         3 |                          2 |
  # |          5 |        -3 |                          2 |
  # |         -5 |         3 |                          1 |
  # |         -5 |        -3 |                          1 |
  needs(divisor.equals(0).not())

  let remainder = dividend.remainder(divisor)
  switch remainder.isNegative() {
    true => switch divisor.isNegative() {
      true => remainder.subtract(divisor),
      false => remainder.add(divisor),
    },
    false => remainder,
  }
}
fun shiftLeft(value: Int, amount: Int) Int {
  value.builtinIntShiftLeft(amount)
}
fun shiftRight(value: Int, amount: Int) Int {
  value.builtinIntShiftRight(amount)
}
fun bitwiseAnd(self: Int, other: Int) Int {
  self.builtinIntBitwiseAnd(other)
}
fun bitwiseOr(self: Int, other: Int) Int {
  self.builtinIntBitwiseOr(other)
}
fun bitwiseXor(self: Int, other: Int) Int {
  self.builtinIntBitwiseXor(other)
}
fun isEven(self: Int) Bool {
  self.remainder(2).equals(0)
}
fun isOdd(self: Int) Bool {
  self.remainder(2).equals(1)
}
fun lowestBits(value: Int, bitCount: Int) Int {
  needs(bitCount.isNonNegative())
  let mask = 1.shiftLeft(bitCount).subtract(1)
  value.bitwiseAnd(mask)
}
fun parseInt(text: Text) Result[Int, Text] {
  text.builtinIntParse()
}

trait HasLength {
  fun length(self: Self) Int
}
fun isEmpty[T: HasLength](t: T) Bool {
  t.length().equals(0)
}

struct Text = builtin
impl Text: HasLength {
  fun length(self: Text) Int {
    self.builtinTextLength()
  }
}
fun concat(self: Text, other: Text) Text {
  self.builtinTextConcat(other)
}
# TODO: Support ranges when we have them.
fun get(self: Text, index: Int) Maybe[Text] {
  switch index.isInRange(0, self.length()) {
    false => none[Text](),
    true => some(self.getRange(index, index.add(1))),
  }
}
fun getRange(self: Text, startInclusive: Int, endExclusive: Int) Text {
  self.builtinTextGetRange(startInclusive, endExclusive)
}
fun characters(self: Text) List[Text] {
  listGenerate(self.length(), (i: Int) { self.get(i).unwrap() })
}

fun startsWith(self: Text, prefix: Text) Bool {
  switch self.length().isAtLeast(prefix.length()) {
    false => false,
    true => self.getRange(0, prefix.length()).equals(prefix),
  }
}
fun endsWith(self: Text, suffix: Text) Bool {
  switch self.length().isAtLeast(suffix.length()) {
    false => false,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()).equals(suffix),
  }
}
fun removePrefix(self: Text, prefix: Text) Text {
  switch self.startsWith(prefix) {
    false => self,
    true => self.getRange(prefix.length(), self.length()),
  }
}
fun removeSuffix(self: Text, suffix: Text) Text {
  switch self.endsWith(suffix) {
    false => self,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()),
  }
}

fun split(self: Text, character: Text) List[Text] {
  self.splitIf((char: Text) { char.equals(character) })
}
fun splitIf(self: Text, predicate: (Text) Bool) List[Text] {
  self.splitIfHelper(predicate, 0, 0 listOf[Text]())
}
fun splitIfHelper(self: Text, predicate: (Text) Bool, currentStartOffset: Int, offset: Int, result: List[Text]) List[Text] {
  switch self.get(offset) {
    none => result.append(self.getRange(currentStartOffset, offset)),
    some(char) => switch predicate(char) {
      true => {
        let nextOffset = offset.add(1)
        let nextResult = result.append(self.getRange(currentStartOffset, offset))
        self.splitIfHelper(predicate, nextOffset, nextOffset, nextResult)
      },
      false => self.splitIfHelper(predicate, currentStartOffset, offset.add(1), result),
    },
  }
}
fun lines(self: Text) List[Text] {
  self.split("\n")
}

fun indexOf(self: Text, other: Text) Maybe[Int] {
  self.builtinTextIndexOf(other)
}
fun allIndexesOfOverlapping(self: Text, other: Text) List[Int] {
  self.allIndexesOfOverlappingHelper(other, 0, listOf[Int]())
}
fun allIndexesOfOverlappingHelper(self: Text, other: Text, offset: Int, result: List[Int]) List[Int] {
  switch self.getRange(offset, self.length()).indexOf(other) {
    none => result,
    some(index) => {
      let index = offset.add(index)
      self.allIndexesOfOverlappingHelper(other, index.add(1), result.append(index))
    },
  }
}
fun contains(self: Text, other: Text) Bool {
  self.indexOf(other).isSome()
}
impl Text: ToText {
  fun toText(self: Text) Text {
    self
  }
}
impl Text: Compare {
  fun compareTo(self: Text, other: Text) Ordering {
    self.builtinTextCompareTo(other)
  }
}

fun panic(message: Text) Never {
  builtinPanic(message)
}
# TODO: build this into the language; fuzzing
fun needs(condition: Bool) {
  switch condition {
    true => Nothing(),
    false => panic("Needs not fulfilled"),
  }
}
fun needs(condition: Bool, message: Text) {
  switch condition {
    true => Nothing(),
    false => panic("Needs not fulfilled: {message}"),
  }
}

fun loop(body: () Nothing) {
  body()
  loop(body)
}
fun repeat(times: Int, body: () Nothing) {
  needs(times.isNonNegative())
  switch times.isGreaterThan(0) {
    false => {},
    true => {
      body()
      repeat(times.subtract(1), body)
    },
  }
}

struct List[T] = builtin
fun listFilled[T](length: Int, item: T) List[T] {
  builtinListFilled(length, item)
}
fun listGenerate[T](length: Int, generator: (Int) T) List[T] {
  builtinListGenerate(length, generator)
}
fun listOf[T]() List[T] {
  builtinListOf[T]()
}
fun listOf[T](item0: T) List[T] {
  builtinListOf(item0)
}
fun listOf[T](item0: T, item1: T) List[T] {
  builtinListOf(item0, item1)
}
fun listOf[T](item0: T, item1: T, item2: T) List[T] {
  builtinListOf(item0, item1, item2)
}
fun listOf[T](item0: T, item1: T, item2: T, item3: T) List[T] {
  builtinListOf(item0, item1, item2, item3)
}
fun listOf[T](item0: T, item1: T, item2: T, item3: T, item4: T) List[T] {
  builtinListOf(item0, item1, item2, item3, item4)
}
impl[T] List[T]: HasLength {
  fun length(self: List[T]) Int {
    builtinListLength(self)
  }
}
fun lastIndex[T](list: List[T]) Maybe[Int] {
  switch list.isEmpty() {
    true => none[Int](),
    false => some(list.length().subtract(1)),
  }
}
fun get[T](list: List[T], index: Int) Maybe[T] {
  builtinListGet(list, index)
}
fun single[T](list: List[T]) Maybe[T] {
  switch list.length().equals(1) {
    true => list.get(0),
    false => none[T](),
  }
}
fun first[T](list: List[T]) Maybe[T] {
  list.get(0)
}
fun last[T](list: List[T]) Maybe[T] {
  list.get(list.length().subtract(1))
}
fun insert[T](list: List[T], index: Int, item: T) List[T] {
  builtinListInsert(list, index, item)
}
fun prepend[T](list: List[T], item: T) List[T] {
  insert(list, 0, item)
}
fun append[T](list: List[T], item: T) List[T] {
  insert(list, list.length(), item)
}
fun replace[T](list: List[T], index: Int, item: T) List[T] {
  builtinListReplace(list, index, item)
}
# TODO: list.update(…)
fun removeAt[T](list: List[T], index: Int) List[T] {
  builtinListRemoveAt(list, index)
}
fun concat[T](list0: List[T], list1: List[T]) List[T] {
  listGenerate(list0.length().add(list1.length()), (i: Int) {
    switch i.isLessThan(list0.length()) {
      true => list0.get(i).unwrap(),
      false => list1.get(i.subtract(list0.length())).unwrap(),
    }
  })
}
fun getRange[T](list: List[T], startInclusive: Int, endExclusive: Int) List[T] {
  switch startInclusive.isNonNegative()
    .and(endExclusive.isNonNegative())
    .and(startInclusive.isAtMost(endExclusive))
    .and(endExclusive.isAtMost(list.length())) {
    false => panic("Invalid range"),
    true => listGenerate(
      endExclusive.subtract(startInclusive),
      (i: Int) { list.get(startInclusive.add(i)).unwrap() },
    ),
  }
}
fun skip[T](list: List[T], count: Int) List[T] {
  needs(count.isNonNegative())
  getRange(list, count, list.length())
}
fun skipLast[T](list: List[T], count: Int) List[T] {
  needs(count.isNonNegative())
  getRange(list, 0, list.length().subtract(count))
}
fun range(length: Int) List[Int] {
  needs(length.isNonNegative())

  listGenerate(length, (i: Int) { i })
}
fun range(startInclusive: Int, endExclusive: Int) List[Int] {
  needs(startInclusive.isAtMost(endExclusive))

  listGenerate(endExclusive.subtract(startInclusive), (i: Int) { startInclusive.add(i) })
}
fun indexes[T](list: List[T]) List[Int] {
  list.length().range()
}

fun isInRange[T: Compare](self: T, startInclusive: T, endExclusive: T) Bool {
  needs(startInclusive.isAtMost(endExclusive))

  self.isAtLeast(startInclusive).and(self.isLessThan(endExclusive))
}

struct List2D[T] {
  width: Int,
  height: Int,
  items: List[T],
}
fun list2D[T](width: Int, height: Int, items: List[T]) List2D[T] {
  needs(width.isNonNegative())
  needs(height.isNonNegative())
  needs(width.multiply(height).equals(items.length()))

  List2D[T](width, height, items)
}
fun list2DFilled[T](width: Int, height: Int, item: T) List2D[T] {
  needs(width.isNonNegative())
  needs(height.isNonNegative())

  list2D(width, height, listFilled(width.multiply(height), item))
}
fun get[T](self: List2D[T], position: Pair[Int, Int]) Maybe[T] {
  self.get(position.first, position.second)
}
fun get[T](self: List2D[T], x: Int, y: Int) Maybe[T] {
  switch x.isInRange(0, self.width).and(y.isInRange(0, self.height)) {
    false => none[T](),
    true => some(self.items.get(self.rawIndex(x, y)).unwrap()),
  }
}
fun replace[T](self: List2D[T], x: Int, y: Int, value: T) List2D[T] {
  needs(x.isInRange(0, self.width))
  needs(y.isInRange(0, self.height))

  let newItems = self.items.replace(self.rawIndex(x, y), value)
  list2D(self.width, self.height, newItems)
}
fun indexesRowWise[T](self: List2D[T]) List[Pair[Int, Int]] {
  range(self.height).flatMap((y: Int) {
    range(self.width).map((x: Int) { Pair(x, y) })
  })
}
fun rows[T](self: List2D[T]) List[List[T]] {
  range(self.height).map((y: Int) { self.row(y).unwrap() })
}
fun row[T](self: List2D[T], y: Int) Maybe[List[T]] {
  switch y.isInRange(0, self.height) {
    false => none[List[T]](),
    true => some(self.items.getRange(self.rawIndex(0, y), self.rawIndex(0, y.add(1)))),
  }
}
fun rawIndex[T](self: List2D[T], x: Int, y: Int) Int {
  needs(x.isInRange(0, self.width))
  needs(y.isInRange(0, self.height))

  y.multiply(self.width).add(x)
}

# TODO: .firstIndexWhere(…), .firstWhere(…), .firstIndexOf(…), .lastIndexWhere(…), .lastWhere(…), .lastIndexOf(…)
fun print[T: ToText](t: T) {
  builtinPrint(t.toText())
}

fun fold[T, R](list: List[T], initial: R, combine: (R, T) R) R {
  list.foldIndexed(initial, (state: R, index: Int, item: T) { combine(state, item) })
}
fun foldIndexed[T, R](list: List[T], initial: R, combine: (R, Int, T) R) R {
  list.foldIndexedHelper(0, initial, combine)
}
fun foldIndexedHelper[T, R](list: List[T], index: Int, state: R, combine: (R, Int, T) R) R {
  switch index.isLessThan(list.length()) {
    true => list.foldIndexedHelper(index.add(1), combine(state, index, list.get(index).unwrap()), combine),
    false => state,
  }
}
fun reduce[T](list: List[T], combine: (T, T) T) Maybe[T] {
  switch list.isEmpty() {
    true => none[T](),
    false => some(list.reduceHelper(1, list.get(0).unwrap(), combine)),
  }
}
fun reduceHelper[T](list: List[T], index: Int, current: T, combine: (T, T) T) T {
  switch index.isLessThan(list.length()) {
    true => list.reduceHelper(index.add(1), combine(current, list.get(index).unwrap()), combine),
    false => current,
  }
}
fun sum(list: List[Int]) Int {
  list.fold(0, (sum: Int, item: Int) { sum.add(item) })
}

fun all[T](list: List[T], predicate: (T) Bool) Bool {
  list.allHelper(predicate, 0)
}
fun allHelper[T](list: List[T], predicate: (T) Bool, index: Int) Bool {
  switch list.get(index) {
    some(item) => switch predicate(item) {
      true => list.allHelper(predicate, index.add(1)),
      false => false,
    },
    none => true,
  }
}
fun any[T](list: List[T], predicate: (T) Bool) Bool {
  list.all((it: T) { predicate(it).not() }).not()
}

fun isStrictlyAscending[T: Compare](list: List[T]) Bool {
  list.isSortedBy((a: T, b: T) { a.compareTo(b).equals(Ordering.less()) })
}
fun isStrictlyDescending[T: Compare](list: List[T]) Bool {
  list.isSortedBy((a: T, b: T) { a.compareTo(b).equals(Ordering.greater()) })
}
fun isSortedBy[T](list: List[T], checkPair: (T, T) Bool) Bool {
  list.pairs().all((pair: Pair[T, T]) { checkPair(pair.first, pair.second) })
}

fun map[T, R](list: List[T], transform: (T) R) List[R] {
  list.mapIndexed((index: Int, item: T) { transform(item) })
}
fun mapIndexed[T, R](list: List[T], transform: (Int, T) R) List[R] {
  list.fold(listOf[R](), (result: List[R], item: T) {
    result.append(transform(result.length(), item))
  })
}
fun flatMap[T, R](list: List[T], transform: (T) List[R]) List[R] {
  list.fold(listOf[R](), (result: List[R], item: T) {
    result.concat(transform(item))
  })
}
fun filter[T](list: List[T], predicate: (T) Bool) List[T] {
  list.fold(listOf[T](), (result: List[T], item: T) {
    switch predicate(item) {
      true => result.append(item),
      false => result,
    }
  })
}
fun windows[T](list: List[T], windowLength: Int) List[List[T]] {
  # Returns a list over all contiguous windows of length `windowLength`.
  #
  # The windows overlap. If the `list` is shorter than `windowLength`, the
  # resulting list is empty.
  needs(windowLength.isPositive())

  list.windowsHelper(windowLength, listOf[List[T]]())
}
fun windowsHelper[T](list: List[T], windowLength: Int, resultSoFar: List[List[T]]) List[List[T]] {
  let index = resultSoFar.length()
  switch index.isAtMost(list.length().subtract(windowLength)) {
    true => list.windowsHelper(
      windowLength,
      resultSoFar.append(list.getRange(index, index.add(windowLength))),
    ),
    false => resultSoFar,
  }
}
fun pairs[T](list: List[T]) List[Pair[T, T]] {
  # Returns a list over all contiguous pairs of items.
  #
  # The pairs overlap. If the `list` is shorter than two, the resulting list is
  # empty.
  list.windows(2).map((window: List[T]) { window.toPair().unwrap() })
}

fun join[T: ToText](self: List[T], separator: Text) Text {
  self.map((item: T) { item.toText() })
    .reduce((result: Text, item: Text) { "{result}{separator}{item}" })
    .unwrapOr("")
}
impl[T: ToText] List[T]: ToText {
  fun toText(self: List[T]) Text {
    "[{self.join(", ")}]"
  }
}

struct Pair[T0, T1] {
  first: T0,
  second: T1,
}
fun toPair[T](list: List[T]) Maybe[Pair[T, T]] {
  switch list.length().equals(2) {
    true => some(Pair[T, T](list.get(0).unwrap(), list.get(1).unwrap())),
    false => none[Pair[T, T]](),
  }
}
# TODO: Use this impl when it compiles
# impl[T0: Equal, T1: Equal] Pair[T0, T1]: Equal {
#   fun equals(self: Pair[T0, T1], other: Pair[T0, T1]) Bool {
#     self.first.equals(other.first).and(self.second.equals(other.second))
#   }
# }
fun equals[T: Equal](self: Pair[T, T], other: Pair[T, T]) Bool {
  self.first.equals(other.first).and(self.second.equals(other.second))
}

struct MyStruct {
  name: Text,
  color: Int,
}

enum Bool { true, false }
let true: Bool = Bool.true()
let false: Bool = Bool.false()
fun not(value: Bool) Bool {
  switch value {
    true => false,
    false => true,
  }
}
fun and(a: Bool, b: Bool) Bool {
  switch a {
    true => b,
    false => false,
  }
}
fun or(a: Bool, b: Bool) Bool {
  switch a {
    true => true,
    false => b,
  }
}
fun xor(a: Bool, b: Bool) Bool {
  a.equals(b).not()
}
fun implies(a: Bool, b: Bool) Bool {
  not(a).or(b)
}
fun toInt(self: Bool) Int {
  switch self {
    false => 0,
    true => 1,
  }
}
impl Bool: Compare {
  fun compareTo(self: Bool, other: Bool) Ordering {
    switch self {
      false => switch other {
        false => Ordering.equal(),
        true => Ordering.less(),
      },
      true => switch other {
        false => Ordering.greater(),
        true => Ordering.equal(),
      },
    }
  }
}
impl Bool: ToText {
  fun toText(self: Bool) Text {
    switch self {
      true => "true",
      false => "false",
    }
  }
}

enum Maybe[T] {
  some: T,
  none,
}
fun some[T](value: T) Maybe[T] {
  Maybe.some(value)
}
fun none[T]() Maybe[T] {
  Maybe.none[T]()
}
fun unwrap[T](self: Maybe[T]) T {
  # TODO: reuse `unwrapOrElse(…)` when `Never` gets unified with `T`
  # self.unwrapOrElse(() { panic("`unwrap()` called on `none()`") })
  switch self {
    some(value) => value,
    none => panic("`unwrap()` called on `none()`"),
  }
}
fun unwrapOr[T](self: Maybe[T], defaultValue: T) T {
  self.unwrapOrElse(() { defaultValue })
}
fun unwrapOrElse[T](self: Maybe[T], getDefaultValue: () T) T {
  switch self {
    some(value) => value,
    none => getDefaultValue(),
  }
}
fun isSome[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => true,
    none => false,
  }
}
fun isNone[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => false,
    none => true,
  }
}
impl[T: ToText] Maybe[T]: ToText {
  fun toText(self: Maybe[T]) Text {
    switch self {
      some(value) => "some({value.toText()})",
      none => "none()",
    }
  }
}

enum Result[T, E] {
  ok: T,
  error: E,
}
fun ok[T, E](value: T) Result[T, E] {
  Result.ok[T, E](value)
}
fun error[T, E](value: E) Result[T, E] {
  Result.error[T, E](value)
}
fun unwrap[T, E](self: Result[T, E]) T {
  # TODO: reuse `unwrapOrElse(…)` when `Never` gets unified with `T`
  # self.unwrapOrElse((error: E) { panic("`unwrap()` called on `error()`") })
  switch self {
    ok(value) => value,
    error(error) => panic("`unwrap()` called on `error()`"),
  }
}
fun unwrapOr[T, E](self: Result[T, E], defaultValue: T) T {
  self.unwrapOrElse((error: E) { defaultValue })
}
fun unwrapOrElse[T, E](self: Result[T, E], getDefaultValue: (E) T) T {
  switch self {
    ok(value) => value,
    error(error) => getDefaultValue(error),
  }
}
fun isOk[T, E](self: Result[T, E]) Bool {
  switch self {
    ok(value) => true,
    error(value) => false,
  }
}
fun isError[T, E](self: Result[T, E]) Bool {
  switch self {
    ok(value) => false,
    error(value) => true,
  }
}
# impl[T: ToText, E: ToText] Result[T, E]: ToText {
#   fun toText(self: Result[T, E]) Text {
#     switch self {
#       ok(value) => "ok({value.toText()})",
#       error(error) => "error({error.toText()})",
#     }
#   }
# }
impl[T: ToText] Result[T, Text]: ToText {
  fun toText(self: Result[T, Text]) Text {
    switch self {
      ok(value) => "ok({value.toText()})",
      error(error) => "error({error})",
    }
  }
}

# function type: `Fun[Int, Text, Int]`, later `Fun (Int, Text) Int`

# Uniform Function Call Syntax
# Functions can also be overloaded
# fun add(aDate: Date, duration: Duration) Self {
#   needs(days.isNonNegative())
#   Date(
#     aDate.year,
#     aDate.month,
#     aDate.day.add(duration.days),
#   )
# }
# aDate.add(Duration(days: 1)) # is equivalent to `add(aDate, Duration(days: 1))`

fun fibonacci(n: Int) Int {
  switch n.isLessThan(2) {
    true => n,
    false => fibonacci(n.subtract(1)).add(fibonacci(n.subtract(2))),
  }
}

fun identity[T](t: T) T {
  t
}

# Advent of Code 2024
# https://adventofcode.com/2024

fun day2Part1(input: Text) Int {
  day2Wrapper(input, (line: List[Int]) { day2CheckLine(line) })
}
fun day2Part2(input: Text) Int {
  day2Wrapper(input, (line: List[Int]) {
    listOf(line)
      .concat(line.indexes().map((index: Int) { line.removeAt(index) }))
      .any((line: List[Int]) { day2CheckLine(line) })
  })
}
fun day2Wrapper(input: Text, checkLine: (List[Int]) Bool) Int {
  input
    .lines()
    .map((line: Text) { line.split(" ").map((number: Text) { parseInt(number).unwrap() }) })
    .filter(checkLine)
    .length()
}
fun day2CheckLine(line: List[Int]) Bool {
  line
    .pairs()
    .all((pair: Pair[Int, Int]) {
      let difference = pair.second.subtract(pair.first).absolute()
      difference.isAtLeast(1).and(difference.isAtMost(3))
    })
    .and(line.isStrictlyAscending().or(line.isStrictlyDescending()))
}

fun day4Part1(input: Text) Int {
  let lines = input.lines()
  let rows = lines.length()
  let columns = lines.first().unwrap().length()
  lines
    .mapIndexed((row: Int, line: Text) {
      columns.range()
        .map((column: Int) {
          let horizontalText = line.getRange(column, column.add(4).coerceAtMost(line.length()))
          let verticalText = lines.getRange(row, row.add(4).coerceAtMost(lines.length()))
            .map((line: Text) { line.get(column).unwrap() })
            .join("")
          let diagonalRightDownText = switch row.isAtMost(rows.subtract(4))
            .and(column.isAtMost(columns.subtract(4))) {
            true => range(4)
              .map((i: Int) { lines.get(row.add(i)).unwrap().get(column.add(i)).unwrap() })
              .join(""),
            false => "",
          }
          let diagonalLeftDownText = switch row.isAtLeast(3)
            .and(column.isAtMost(columns.subtract(4))) {
            true => range(4)
              .map((i: Int) { lines.get(row.subtract(i)).unwrap().get(column.add(i)).unwrap() })
              .join(""),
            false => "",
          }
          listOf(horizontalText, verticalText, diagonalRightDownText, diagonalLeftDownText)
            .filter((text: Text) { text.equals("XMAS").or(text.equals("SAMX")) })
            .length()
        })
        .sum()
    })
    .sum()
}
fun day4Part2(input: Text) Int {
  let lines = input.lines()
  let rows = lines.length()
  let columns = lines.first().unwrap().length()
  range(1, rows.subtract(1))
    .map((row: Int) {
      range(1, columns.subtract(1))
        .filter((column: Int) {
          switch lines.get(row).unwrap().get(column).unwrap().equals("A") {
            false => false,
            true => {
              let topLeft = lines.get(row.subtract(1)).unwrap().get(column.subtract(1)).unwrap()
              let topRight = lines.get(row.subtract(1)).unwrap().get(column.add(1)).unwrap()
              let bottomLeft = lines.get(row.add(1)).unwrap().get(column.subtract(1)).unwrap()
              let bottomRight = lines.get(row.add(1)).unwrap().get(column.add(1)).unwrap()
              let rightDown = topLeft.equals("M").and(bottomRight.equals("S"))
                .or(topLeft.equals("S").and(bottomRight.equals("M")))
              let leftDown = topRight.equals("M").and(bottomLeft.equals("S"))
                .or(topRight.equals("S").and(bottomLeft.equals("M")))
              rightDown.and(leftDown)
            },
          }
        })
        .length()
    })
    .sum()
}

fun day6Part1(input: Text) Int {
  let lines = input.lines()
  let width = lines.first().unwrap().length()
  let height = lines.length()

  let state = lines.foldIndexed(
    Day6Part1State(
      list2DFilled(width, height, false),
      list2DFilled(width, height, false),
      Pair(0, 0),
      Day6Part1Direction.up(),
    ),
    (state: Day6Part1State, y: Int, line: Text) {
      line.characters()
        .foldIndexed(
          state,
          (state: Day6Part1State, x: Int, cell: Text) {
            Day6Part1State(
              state.obstructions.replace(x, y, cell.equals("#")),
              switch cell.equals("^") {
                true => state.visited.replace(x, y, true),
                false => state.visited,
              },
              switch cell.equals("^") {
                true => Pair(x, y),
                false => state.position,
              },
              state.direction,
            )
          },
        )
    },
  )
  let state = state.moveToEnd()
  print(state)
  state.visitedCellCount()
}
struct Day6Part1State {
  obstructions: List2D[Bool],
  visited: List2D[Bool],
  position: Pair[Int, Int],
  direction: Day6Part1Direction,
}
enum Day6Part1Direction { up, right, down, left }
fun rotateRight(self: Day6Part1Direction) Day6Part1Direction {
  switch self {
    up => Day6Part1Direction.right(),
    right => Day6Part1Direction.down(),
    down => Day6Part1Direction.left(),
    left => Day6Part1Direction.up(),
  }
}
fun moveToEnd(self: Day6Part1State) Day6Part1State {
  switch self.move() {
    none => self,
    some(newState) => moveToEnd(newState),
  }
}
fun move(self: Day6Part1State) Maybe[Day6Part1State] {
  switch self.nextPosition() {
    none => none[Day6Part1State](),
    some(nextPosition) => switch self.obstructions.get(nextPosition).unwrap() {
      true => some(Day6Part1State(
        self.obstructions,
        self.visited,
        self.position,
        self.direction.rotateRight(),
      )),
      false => some(Day6Part1State(
        self.obstructions,
        self.visited.replace(nextPosition.first, nextPosition.second, true),
        nextPosition,
        self.direction,
      )),
    },
  }
}
fun nextPosition(self: Day6Part1State) Maybe[Pair[Int, Int]] {
  switch self.direction {
    up => switch self.position.second.equals(0) {
      true => none[Pair[Int, Int]](),
      false => some(Pair(self.position.first, self.position.second.subtract(1))),
    },
    right => switch self.position.first.equals(self.obstructions.width.subtract(1)) {
      true => none[Pair[Int, Int]](),
      false => some(Pair(self.position.first.add(1), self.position.second)),
    },
    down => switch self.position.second.equals(self.obstructions.height.subtract(1)) {
      true => none[Pair[Int, Int]](),
      false => some(Pair(self.position.first, self.position.second.add(1))),
    },
    left => switch self.position.first.equals(0) {
      true => none[Pair[Int, Int]](),
      false => some(Pair(self.position.first.subtract(1), self.position.second)),
    },
  }
}
fun visitedCellCount(self: Day6Part1State) Int {
  self.visited.items.filter((visited: Bool) { visited }).length()
}
impl Day6Part1State: ToText {
  fun toText(self: Day6Part1State) Text {
    self.obstructions.height.range()
      .map((y: Int) {
        self.obstructions.width.range()
          .map((x: Int) {
            switch self.position.equals(Pair(x, y)) {
              true => switch self.direction {
                up => "^",
                right => ">",
                down => "v",
                left => "<",
              },
              false => switch self.visited.get(x, y).unwrap() {
                true => "X",
                false => switch self.obstructions.get(x, y).unwrap() {
                  true => "#",
                  false => ".",
                },
              },
            }
          })
          .join("")
      })
      .join("\n")
  }
}

fun main() Int {
  identity(1)
  identity("foo")
#  # (x: Int) { x }
#
#  let helloWorld = "Hello, World!"
#  printHello("World")
#
#  # let theAnswer = 40.add(2)
#  let theAnswer = 42
#  let theAnswerText = "42"
#  print("The answer is {theAnswerText}!")
#
#  theAnswer
  print("fibonacci(20) = {fibonacci(20).toText()}")
  print(Ordering.less())
  print(true)
  print(false)
  print("1.equals(2): {1.equals(2).toText()}")

  let list = listOf(0, 1).insert(1, 2).replace(0, 3).removeAt(2)
  print("Length: {list.length().toText()}")
  print("[{list.get(0).toText()}, {list.get(1).toText()}, {list.get(2).toText()}]")

  print("orld!".endsWith("World!").toText().isEmpty())

  let foo = 123
  let addCaptured = (x: Int) { x.add(foo) }
  print("addCaptured(1) = {addCaptured(1).toText()}")

  repeat(3, () { print("Hello, World!") })

  print(listOf(1, 2, 3).map((x: Int) { x.multiply(2) }))

  0
}

# calculator
# 2048
# sudoku
