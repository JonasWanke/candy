# Types
struct Nothing {}
enum Never {}

struct MyStruct {
  name: Text,
  color: Int,
}
# struct UInt {
#   value: Int,
# } where value.isNonNegative()
# struct Date {
#   year: Int,
#   month: Int,
#   day: Int,
# } where {
#   needs(month.isBetween(1, 12))
#   needs(day.isBetween(1, 31))
# }

enum Bool { true, false }
let true: Bool = Bool.true
let false: Bool = Bool.false
fun boolToText(bool: Bool) Text {
  switch bool {
    true => "true",
    false => "false",
  }
}

enum Ordering { less, equal, greater }
fun orderingToText(ordering: Ordering) Text {
  switch ordering {
    less => "less",
    equal => "equal",
    greater => "greater",
  }
}

enum MyEnum {
  foo: Int,
  bar,
}

# array type: `Array[Int]`
# function type: `Fun[Int, Text, Int]`, later `Fun (Int, Text) Int`

# Expressions
let intExpression: Int = 42
let textExpression: Text = "Hello, World!"
# let textExpressionWithInterpolation = "The answer is {intExpression}!"
let identifierExpression: Int = intExpression
# let parenthesizedExpression = (intExpression)
let structExpression: MyStruct = MyStruct("Banana", 12345)
# let lambdaExpression = (x: Int) { x }

# Assignments
let valueWithExplicitType: Int = 42
# let someFunction(x: Int) -> Int = { x }

# Uniform Function Call Syntax
# Functions can also be overloaded
# fun add(aDate: Date, duration: Duration) Self {
#   needs(days.isNonNegative())
#   Date(
#     aDate.year,
#     aDate.month,
#     aDate.day.add(duration.days),
#   )
# }
# aDate.add(Duration(days: 1)) # is equivalent to `add(aDate, Duration(days: 1))`

fun isLessThan(a: Int, b: Int) Bool {
  switch intCompareTo(a, b) {
    less => true,
    equal => false,
    greater => false,
  }
}
fun fibonacci(n: Int) Int {
  switch isLessThan(n, 2) {
    true => n,
    false => intAdd(fibonacci(intSubtract(n, 1)), fibonacci(intSubtract(n, 2))),
  }
}

fun main() Int {
#  # (x: Int) { x }
#
#  let helloWorld = "Hello, World!"
#  printHello("World")
#
#  # let theAnswer = 40.add(2)
#  let theAnswer = 42
#  let theAnswerText = "42"
#  print("The answer is {theAnswerText}!")
#
#  theAnswer
  print("fibonacci(20) = {intToText(fibonacci(20))}")
  0
}

# fibonacci
# symbols, or types
# calculator
# 2048
# sudoku
