struct Nothing {}
enum Never {}

# struct List[T] {}
# impl[T: Equal] List[T]: Equal {
#   # fun equals(self: Self, other: Self) Bool {}
# }

trait ToText {
  fun toText(self: Self) Text
}

# Operators
trait OperatorPlus[T] {
  # TODO: add associated type for return type
  fun plus(self: Self, other: T) Self
}

trait Equal {
  fun equals(self: Self, other: Self) Bool
}

trait Compare {
  fun compareTo(self: Self, other: Self) Ordering
}
fun isLessThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => false,
    greater => false,
  }
}
fun isLessThanOrEqualTo[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => true,
    greater => false,
  }
}
fun isGreaterThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => false,
    greater => true,
  }
}
fun isGreaterThanOrEqualTo[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => true,
    greater => true,
  }
}
enum Ordering { less, equal, greater }
impl Ordering: ToText {
  fun toText(self: Ordering) Text {
    switch self {
      less => "less",
      equal => "equal",
      greater => "greater",
    }
  }
}
impl[T: Compare] T: Equal {
  fun equals(self: T, other: T) Bool {
    switch self.compareTo(other) {
      less => false,
      equal => true,
      greater => false,
    }
  }
}

trait Add {
  fun add(self: Self, other: Self) Self
}
trait Subtract {
  fun subtract(self: Self, other: Self) Self
}
# TODO: `impl[T: Add] T: OperatorPlus[T] {}`, etc.

struct Int = builtin
impl Int: ToText {
  fun toText(self: Int) Text {
    self.builtinIntToText()
  }
}
impl Int: Compare {
  fun compareTo(self: Int, other: Int) Ordering {
    self.builtinIntCompareTo(other)
  }
}
fun isPositive(self: Int) Bool {
  self.isGreaterThan(0)
}
fun isNonPositive(self: Int) Bool {
  self.isLessThanOrEqualTo(0)
}
fun isNegative(self: Int) Bool {
  self.isLessThan(0)
}
fun isNonNegative(self: Int) Bool {
  self.isGreaterThanOrEqualTo(0)
}
fun absolute(self: Int) Int {
  switch self.isNegative() {
    true => self.negate(),
    false => self,
  }
}
impl Int: Add {
  fun add(self: Int, other: Int) Int {
    self.builtinIntAdd(other)
  }
}
impl Int: Subtract {
  fun subtract(self: Int, other: Int) Int {
    self.builtinIntSubtract(other)
  }
}
fun negate(self: Int) Int {
  0.subtract(self)
}

trait HasLength {
  fun length(self: Self) Int
}
fun isEmpty[T: HasLength](t: T) Bool {
  t.length().equals(0)
}

struct Text = builtin
impl Text: HasLength {
  fun length(self: Text) Int {
    self.builtinTextLength()
  }
}
fun concat(self: Text, other: Text) Text {
  self.builtinTextConcat(other)
}
fun getRange(self: Text, startInclusive: Int, endExclusive: Int) Text {
  self.builtinTextGetRange(startInclusive, endExclusive)
}
fun characterAt(self: Text, index: Int) Maybe[Text] {
  switch index.isNonNegative().and(index.isLessThan(self.length())) {
    false => none[Text](),
    true => some(self.getRange(index, index.add(1))),
  }
}

fun startsWith(self: Text, prefix: Text) Bool {
  switch self.length().isGreaterThanOrEqualTo(prefix.length()) {
    false => false,
    true => self.getRange(0, prefix.length()).equals(prefix),
  }
}
fun endsWith(self: Text, suffix: Text) Bool {
  switch self.length().isGreaterThanOrEqualTo(suffix.length()) {
    false => false,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()).equals(suffix),
  }
}
fun removePrefix(self: Text, prefix: Text) Text {
  switch self.startsWith(prefix) {
    false => self,
    true => self.getRange(prefix.length(), self.length()),
  }
}
fun removeSuffix(self: Text, suffix: Text) Text {
  switch self.endsWith(suffix) {
    false => self,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()),
  }
}

fun indexOf(self: Text, other: Text) Maybe[Int] {
  self.builtinTextIndexOf(other)
}
fun contains(self: Text, other: Text) Bool {
  self.indexOf(other).isSome()
}
impl Text: ToText {
  fun toText(self: Text) Text {
    self
  }
}
impl Text: Compare {
  fun compareTo(self: Text, other: Text) Ordering {
    self.builtinTextCompareTo(other)
  }
}

struct Array[T] = builtin
fun arrayFilled[T](length: Int, item: T) Array[T] {
  builtinArrayFilled(length, item)
}
impl[T] Array[T]: HasLength {
  fun length(self: Array[T]) Int {
    builtinArrayLength(self)
  }
}

fun print[T: ToText](t: T) {
  builtinPrint(t.toText())
}

struct MyStruct {
  name: Text,
  color: Int,
}

enum Bool { true, false }
let true = Bool.true()
let false = Bool.false()
fun not(value: Bool) Bool {
  switch value {
    true => false,
    false => true,
  }
}
fun and(a: Bool, b: Bool) Bool {
  switch a {
    true => b,
    false => false,
  }
}
fun or(a: Bool, b: Bool) Bool {
  switch a {
    true => true,
    false => b,
  }
}
fun xor(a: Bool, b: Bool) Bool {
  a.equals(b).not()
}
fun implies(a: Bool, b: Bool) Bool {
  not(a).or(b)
}
impl Bool: Equal {
  fun equals(self: Bool, other: Bool) Bool {
    switch self {
      true => other,
      false => other.not(),
    }
  }
}
impl Bool: ToText {
  fun toText(self: Bool) Text {
    switch self {
      true => "true",
      false => "false",
    }
  }
}

enum Maybe[T] {
  some: T,
  none,
}
fun some[T](value: T) Maybe[T] {
  Maybe.some(value)
}
fun none[T]() Maybe[T] {
  Maybe.none[T]()
}
fun isSome[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => true,
    none => false,
  }
}
fun isNone[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => false,
    none => true,
  }
}
# impl[T] Maybe[T]: ToText {
#   fun toText(self: Maybe[T]) Text {
#     switch self {
#       some(value) => "some({value.toText()})",
#       none => "none()",
#     }
#   }
# }

enum MyEnum {
  foo: Int,
  bar,
}

# function type: `Fun[Int, Text, Int]`, later `Fun (Int, Text) Int`

# Expressions
let intExpression: Int = 42
let textExpression: Text = "Hello, World!"
# let textExpressionWithInterpolation = "The answer is {intExpression}!"
let identifierExpression: Int = intExpression
# let parenthesizedExpression = (intExpression)
let structExpression: MyStruct = MyStruct("Banana", 12345)
# let lambdaExpression = (x: Int) { x }

# Assignments
let valueWithExplicitType: Int = 42
let valueWithoutExplicitType = 42

# Uniform Function Call Syntax
# Functions can also be overloaded
# fun add(aDate: Date, duration: Duration) Self {
#   needs(days.isNonNegative())
#   Date(
#     aDate.year,
#     aDate.month,
#     aDate.day.add(duration.days),
#   )
# }
# aDate.add(Duration(days: 1)) # is equivalent to `add(aDate, Duration(days: 1))`

# fun twar() Int {
#  foo
#     bar
#       fds
#  % True: foo
#      fff
#    False: blub
#}

fun fibonacci(n: Int) Int {
  switch n.isLessThan(2) {
    true => n,
    false => fibonacci(n.subtract(1)).add(fibonacci(n.subtract(2))),
  }
}

fun identity[T](t: T) T {
  t
}

fun main() Int {
  identity(1)
  identity("foo")
#  # (x: Int) { x }
#
#  let helloWorld = "Hello, World!"
#  printHello("World")
#
#  # let theAnswer = 40.add(2)
#  let theAnswer = 42
#  let theAnswerText = "42"
#  print("The answer is {theAnswerText}!")
#
#  theAnswer
  print("fibonacci(20) = {fibonacci(20).toText()}")
  print(Ordering.less())
  print(true)
  print(false)
  print("1.equals(2): {1.equals(2).toText()}")
  print("orld!".endsWith("World!").toText().isEmpty())
  0
}

# calculator
# 2048
# sudoku
