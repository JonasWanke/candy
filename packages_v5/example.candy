struct Nothing {}
enum Never {}

# struct List[T] {}
# impl[T: Equal] List[T]: Equal {
#   # fun equals(self: Self, other: Self) Bool {}
# }

trait ToText {
  fun toText(self: Self) Text
}

# Operators
trait OperatorPlus[T] {
  # TODO: add associated type for return type
  fun plus(self: Self, other: T) Self
}

trait Equal {
  fun equals(self: Self, other: Self) Bool
}

trait Compare {
  fun compareTo(self: Self, other: Self) Ordering
}
fun isLessThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => false,
    greater => false,
  }
}
fun isLessThanOrEqualTo[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => true,
    equal => true,
    greater => false,
  }
}
fun isGreaterThan[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => false,
    greater => true,
  }
}
fun isGreaterThanOrEqualTo[T: Compare](left: T, right: T) Bool {
  switch left.compareTo(right) {
    less => false,
    equal => true,
    greater => true,
  }
}
enum Ordering { less, equal, greater }
impl Ordering: ToText {
  fun toText(self: Ordering) Text {
    switch self {
      less => "less",
      equal => "equal",
      greater => "greater",
    }
  }
}
impl[T: Compare] T: Equal {
  fun equals(self: T, other: T) Bool {
    switch self.compareTo(other) {
      less => false,
      equal => true,
      greater => false,
    }
  }
}

trait Add {
  fun add(self: Self, other: Self) Self
}
trait Subtract {
  fun subtract(self: Self, other: Self) Self
}
# TODO: `impl[T: Add] T: OperatorPlus[T] {}`, etc.

struct Int = builtin
impl Int: ToText {
  fun toText(self: Int) Text {
    self.builtinIntToText()
  }
}
impl Int: Compare {
  fun compareTo(self: Int, other: Int) Ordering {
    self.builtinIntCompareTo(other)
  }
}
fun isPositive(self: Int) Bool {
  self.isGreaterThan(0)
}
fun isNonPositive(self: Int) Bool {
  self.isLessThanOrEqualTo(0)
}
fun isNegative(self: Int) Bool {
  self.isLessThan(0)
}
fun isNonNegative(self: Int) Bool {
  self.isGreaterThanOrEqualTo(0)
}
fun absolute(self: Int) Int {
  switch self.isNegative() {
    true => self.negate(),
    false => self,
  }
}
impl Int: Add {
  fun add(self: Int, other: Int) Int {
    self.builtinIntAdd(other)
  }
}
impl Int: Subtract {
  fun subtract(self: Int, other: Int) Int {
    self.builtinIntSubtract(other)
  }
}
fun negate(self: Int) Int {
  0.subtract(self)
}
fun multiply(self: Int, other: Int) Int {
  self.builtinIntMultiply(other)
}
fun square(self: Int) Int {
  self.multiply(self)
}
fun divideTruncating(dividend: Int, divisor: Int) Int {
  needs(divisor.equals(0).not())

  dividend.builtinIntDivideTruncating(divisor)
}
fun remainder(dividend: Int, divisor: Int) Int {
  # Returns the remainder you get when dividing the `dividend` by the `divisor`.
  #
  # The result has the same sign as the `dividend`.
  #
  # | `dividend` | `divisor` | `dividend.remainder(divisor)` |
  # |-----------:|----------:|---------------------------:|
  # |          6 |         3 |                          0 |
  # |          5 |         3 |                          2 |
  # |         -5 |         3 |                         -2 |
  # |          5 |        -3 |                          2 |
  # |         -5 |        -3 |                         -2 |
  needs(divisor.equals(0).not())

  dividend.builtinIntRemainder(divisor)
}
fun modulo(dividend: Int, divisor: Int) Int {
  # Returns `dividend` % `divisor`.
  #
  # The result of a modulo operation is the smallest non-negative number $x$
  # such that there exists a $y$ with $dividend = y * divisor + x$.
  #
  # | `dividend` | `divisor` | `dividend.modulo(divisor)` |
  # |-----------:|----------:|---------------------------:|
  # |          6 |         3 |                          0 |
  # |          5 |         3 |                          2 |
  # |          5 |        -3 |                          2 |
  # |         -5 |         3 |                          1 |
  # |         -5 |        -3 |                          1 |
  needs(divisor.equals(0).not())

  let remainder = dividend.remainder(divisor)
  switch remainder.isNegative() {
    true => switch divisor.isNegative() {
      true => remainder.subtract(divisor),
      false => remainder.add(divisor),
    },
    false => remainder,
  }
}
fun shiftLeft(value: Int, amount: Int) Int {
  value.builtinIntShiftLeft(amount)
}
fun shiftRight(value: Int, amount: Int) Int {
  value.builtinIntShiftRight(amount)
}
fun bitwiseAnd(self: Int, other: Int) Int {
  self.builtinIntBitwiseAnd(other)
}
fun bitwiseOr(self: Int, other: Int) Int {
  self.builtinIntBitwiseOr(other)
}
fun bitwiseXor(self: Int, other: Int) Int {
  self.builtinIntBitwiseXor(other)
}
fun isEven(self: Int) Bool {
  self.remainder(2).equals(0)
}
fun isOdd(self: Int) Bool {
  self.remainder(2).equals(1)
}
fun lowestBits(value: Int, bitCount: Int) Int {
  needs(bitCount.isNonNegative())
  let mask = 1.shiftLeft(bitCount).subtract(1)
  value.bitwiseAnd(mask)
}
fun parseInt(text: Text) Result[Int, Text] {
  text.builtinIntParse()
}

trait HasLength {
  fun length(self: Self) Int
}
fun isEmpty[T: HasLength](t: T) Bool {
  t.length().equals(0)
}

struct Text = builtin
impl Text: HasLength {
  fun length(self: Text) Int {
    self.builtinTextLength()
  }
}
fun concat(self: Text, other: Text) Text {
  self.builtinTextConcat(other)
}
# TODO: Support ranges when we have them.
fun getRange(self: Text, startInclusive: Int, endExclusive: Int) Text {
  self.builtinTextGetRange(startInclusive, endExclusive)
}
fun characterAt(self: Text, index: Int) Maybe[Text] {
  switch index.isNonNegative().and(index.isLessThan(self.length())) {
    false => none[Text](),
    true => some(self.getRange(index, index.add(1))),
  }
}

fun startsWith(self: Text, prefix: Text) Bool {
  switch self.length().isGreaterThanOrEqualTo(prefix.length()) {
    false => false,
    true => self.getRange(0, prefix.length()).equals(prefix),
  }
}
fun endsWith(self: Text, suffix: Text) Bool {
  switch self.length().isGreaterThanOrEqualTo(suffix.length()) {
    false => false,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()).equals(suffix),
  }
}
fun removePrefix(self: Text, prefix: Text) Text {
  switch self.startsWith(prefix) {
    false => self,
    true => self.getRange(prefix.length(), self.length()),
  }
}
fun removeSuffix(self: Text, suffix: Text) Text {
  switch self.endsWith(suffix) {
    false => self,
    true => self.getRange(self.length().subtract(suffix.length()), self.length()),
  }
}

fun indexOf(self: Text, other: Text) Maybe[Int] {
  self.builtinTextIndexOf(other)
}
fun contains(self: Text, other: Text) Bool {
  self.indexOf(other).isSome()
}
impl Text: ToText {
  fun toText(self: Text) Text {
    self
  }
}
impl Text: Compare {
  fun compareTo(self: Text, other: Text) Ordering {
    self.builtinTextCompareTo(other)
  }
}

fun panic(message: Text) Never {
  builtinPanic(message)
}
# TODO: build this into the language; fuzzing
fun needs(condition: Bool) {
  switch condition {
    true => Nothing(),
    false => panic("Needs not fulfilled"),
  }
}
fun needs(condition: Bool, message: Text) {
  switch condition {
    true => Nothing(),
    false => panic("Needs not fulfilled: {message}"),
  }
}

fun loop(body: () Nothing) {
  body()
  loop(body)
}
fun repeat(times: Int, body: () Nothing) {
  needs(times.isNonNegative())
  switch times.isGreaterThan(0) {
    false => {},
    true => {
      body()
      repeat(times.subtract(1), body)
    },
  }
}

struct List[T] = builtin
fun listFilled[T](length: Int, item: T) List[T] {
  builtinListFilled(length, item)
}
fun listGenerate[T](length: Int, generator: (Int) T) List[T] {
  builtinListGenerate(length, generator)
}
fun listOf[T]() List[T] {
  builtinListOf[T]()
}
fun listOf[T](item0: T) List[T] {
  builtinListOf(item0)
}
fun listOf[T](item0: T, item1: T) List[T] {
  builtinListOf(item0, item1)
}
fun listOf[T](item0: T, item1: T, item2: T) List[T] {
  builtinListOf(item0, item1, item2)
}
fun listOf[T](item0: T, item1: T, item2: T, item3: T) List[T] {
  builtinListOf(item0, item1, item2, item3)
}
fun listOf[T](item0: T, item1: T, item2: T, item3: T, item4: T) List[T] {
  builtinListOf(item0, item1, item2, item3, item4)
}
impl[T] List[T]: HasLength {
  fun length(self: List[T]) Int {
    builtinListLength(self)
  }
}
fun lastIndex[T](list: List[T]) Maybe[Int] {
  switch list.isEmpty() {
    true => none[Int](),
    false => some(list.length().subtract(1)),
  }
}
fun get[T](list: List[T], index: Int) Maybe[T] {
  builtinListGet(list, index)
}
fun single[T](list: List[T]) Maybe[T] {
  switch list.length().equals(1) {
    true => list.get(0),
    false => none[T](),
  }
}
fun first[T](list: List[T]) Maybe[T] {
  list.get(0)
}
fun last[T](list: List[T]) Maybe[T] {
  list.get(list.length().subtract(1))
}
fun insert[T](list: List[T], index: Int, item: T) List[T] {
  builtinListInsert(list, index, item)
}
fun prepend[T](list: List[T], item: T) List[T] {
  insert(list, 0, item)
}
fun append[T](list: List[T], item: T) List[T] {
  insert(list, list.length(), item)
}
fun replace[T](list: List[T], index: Int, item: T) List[T] {
  builtinListReplace(list, index, item)
}
# TODO: list.update(…)
fun removeAt[T](list: List[T], index: Int) List[T] {
  builtinListRemoveAt(list, index)
}
fun getRange[T](list: List[T], startInclusive: Int, endExclusive: Int) List[T] {
  switch startInclusive.isNonNegative()
    .and(endExclusive.isNonNegative())
    .and(startInclusive.isLessThanOrEqualTo(endExclusive))
    .and(endExclusive.isLessThanOrEqualTo(list.length())) {
    false => panic("Invalid range"),
    true => listGenerate(
      endExclusive.subtract(startInclusive),
      (i: Int) { list.get(startInclusive.add(i)).unwrap() },
    ),
  }
}

# TODO: .concatenate(…), .firstIndexWhere(…), .firstWhere(…), .firstIndexOf(…), .lastIndexWhere(…), .lastWhere(…), .lastIndexOf(…)
fun print[T: ToText](t: T) {
  builtinPrint(t.toText())
}

fun fold[T, R](list: List[T], initial: R, combine: (R, T) R) R {
  list.foldHelper(0, initial, combine)
}
fun foldHelper[T, R](list: List[T], index: Int, current: R, combine: (R, T) R) R {
  switch index.isLessThan(list.length()) {
    true => list.foldHelper(index.add(1), combine(current, list.get(index).unwrap()), combine),
    false => current,
  }
}
fun reduce[T](list: List[T], combine: (T, T) T) Maybe[T] {
  switch list.isEmpty() {
    true => none[T](),
    false => some(list.reduceHelper(1, list.get(0).unwrap(), combine)),
  }
}
fun reduceHelper[T](list: List[T], index: Int, current: T, combine: (T, T) T) T {
  switch index.isLessThan(list.length()) {
    true => list.reduceHelper(index.add(1), combine(current, list.get(index).unwrap()), combine),
    false => current,
  }
}

fun map[T, R](list: List[T], transform: (T) R) List[R] {
  list.fold(listOf[R](), (result: List[R], item: T) {
    result.append(transform(item))
  })
}
impl[T: ToText] List[T]: ToText {
  fun toText(self: List[T]) Text {
    let items = self.map((item: T) { item.toText() })
      .reduce((result: Text, item: Text) { "{result}, {item}" })
      .unwrapOr("")
    "[{items}]"
  }
}

struct MyStruct {
  name: Text,
  color: Int,
}

enum Bool { true, false }
let true: Bool = Bool.true()
let false: Bool = Bool.false()
fun not(value: Bool) Bool {
  switch value {
    true => false,
    false => true,
  }
}
fun and(a: Bool, b: Bool) Bool {
  switch a {
    true => b,
    false => false,
  }
}
fun or(a: Bool, b: Bool) Bool {
  switch a {
    true => true,
    false => b,
  }
}
fun xor(a: Bool, b: Bool) Bool {
  a.equals(b).not()
}
fun implies(a: Bool, b: Bool) Bool {
  not(a).or(b)
}
impl Bool: Equal {
  fun equals(self: Bool, other: Bool) Bool {
    switch self {
      true => other,
      false => other.not(),
    }
  }
}
impl Bool: ToText {
  fun toText(self: Bool) Text {
    switch self {
      true => "true",
      false => "false",
    }
  }
}

enum Maybe[T] {
  some: T,
  none,
}
fun some[T](value: T) Maybe[T] {
  Maybe.some(value)
}
fun none[T]() Maybe[T] {
  Maybe.none[T]()
}
fun unwrap[T](self: Maybe[T]) T {
  # TODO: reuse `unwrapOrElse(…)` when `Never` gets unified with `T`
  # self.unwrapOrElse(() { panic("`unwrap()` called on `none()`") })
  switch self {
    some(value) => value,
    none => panic("`unwrap()` called on `none()`"),
  }
}
fun unwrapOr[T](self: Maybe[T], defaultValue: T) T {
  self.unwrapOrElse(() { defaultValue })
}
fun unwrapOrElse[T](self: Maybe[T], getDefaultValue: () T) T {
  switch self {
    some(value) => value,
    none => getDefaultValue(),
  }
}
fun isSome[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => true,
    none => false,
  }
}
fun isNone[T](self: Maybe[T]) Bool {
  switch self {
    some(value) => false,
    none => true,
  }
}
impl[T: ToText] Maybe[T]: ToText {
  fun toText(self: Maybe[T]) Text {
    switch self {
      some(value) => "some({value.toText()})",
      none => "none()",
    }
  }
}

enum Result[T, E] {
  ok: T,
  error: E,
}
fun ok[T, E](value: T) Result[T, E] {
  Result.ok[T, E](value)
}
fun error[T, E](value: E) Result[T, E] {
  Result.error[T, E](value)
}
fun unwrap[T, E](self: Result[T, E]) T {
  # TODO: reuse `unwrapOrElse(…)` when `Never` gets unified with `T`
  # self.unwrapOrElse((error: E) { panic("`unwrap()` called on `error()`") })
  switch self {
    ok(value) => value,
    error(error) => panic("`unwrap()` called on `error()`"),
  }
}
fun unwrapOr[T, E](self: Result[T, E], defaultValue: T) T {
  self.unwrapOrElse((error: E) { defaultValue })
}
fun unwrapOrElse[T, E](self: Result[T, E], getDefaultValue: (E) T) T {
  switch self {
    ok(value) => value,
    error(error) => getDefaultValue(error),
  }
}
fun isOk[T, E](self: Result[T, E]) Bool {
  switch self {
    ok(value) => true,
    error(value) => false,
  }
}
fun isError[T, E](self: Result[T, E]) Bool {
  switch self {
    ok(value) => false,
    error(value) => true,
  }
}
# impl[T: ToText, E: ToText] Result[T, E]: ToText {
#   fun toText(self: Result[T, E]) Text {
#     switch self {
#       ok(value) => "ok({value.toText()})",
#       error(error) => "error({error.toText()})",
#     }
#   }
# }
impl[T: ToText] Result[T, Text]: ToText {
  fun toText(self: Result[T, Text]) Text {
    switch self {
      ok(value) => "ok({value.toText()})",
      error(error) => "error({error})",
    }
  }
}

# function type: `Fun[Int, Text, Int]`, later `Fun (Int, Text) Int`

# Uniform Function Call Syntax
# Functions can also be overloaded
# fun add(aDate: Date, duration: Duration) Self {
#   needs(days.isNonNegative())
#   Date(
#     aDate.year,
#     aDate.month,
#     aDate.day.add(duration.days),
#   )
# }
# aDate.add(Duration(days: 1)) # is equivalent to `add(aDate, Duration(days: 1))`

fun fibonacci(n: Int) Int {
  switch n.isLessThan(2) {
    true => n,
    false => fibonacci(n.subtract(1)).add(fibonacci(n.subtract(2))),
  }
}

fun identity[T](t: T) T {
  t
}

fun main() Int {
  identity(1)
  identity("foo")
#  # (x: Int) { x }
#
#  let helloWorld = "Hello, World!"
#  printHello("World")
#
#  # let theAnswer = 40.add(2)
#  let theAnswer = 42
#  let theAnswerText = "42"
#  print("The answer is {theAnswerText}!")
#
#  theAnswer
  print("fibonacci(20) = {fibonacci(20).toText()}")
  print(Ordering.less())
  print(true)
  print(false)
  print("1.equals(2): {1.equals(2).toText()}")

  let list = listOf(0, 1).insert(1, 2).replace(0, 3).removeAt(2)
  print("Length: {list.length().toText()}")
  print("[{list.get(0).toText()}, {list.get(1).toText()}, {list.get(2).toText()}]")

  print("orld!".endsWith("World!").toText().isEmpty())

  let foo = 123
  let addCaptured = (x: Int) { x.add(foo) }
  print("addCaptured(1) = {addCaptured(1).toText()}")

  repeat(3, () { print("Hello, World!") })

  print(listOf(1, 2, 3).map((x: Int) { x.multiply(2) }))

  0
}

# calculator
# 2048
# sudoku
