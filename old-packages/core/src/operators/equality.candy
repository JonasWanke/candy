use ...bool
use ...primitives

// trait BinaryEquals<Other, Result> {
//   fun equalsOperator(other: Other): Result
// }
// trait BinaryNotEquals<Other, Result> {
//   fun notEqualsOperator(other: Other): Result
// }

trait Equals /* : BinaryEquals<This, Bool> & BinaryNotEquals<This, Bool> */ {
  fun equals(other: This): Bool
  builtin fun equalsAny(other: Any): Bool

  fun notEquals(other: This): Bool { !equals(other) }
  fun notEqualsAny(other: Any): Bool { !equalsAny(other) }
}
// impl<Other> Equals<Other>: BinaryEquals<Other, Bool> & BinaryNotEquals<Other, Bool> {
//   fun equalsOperator(other: Other): Bool { /* this === other || */ equals(other) }
//   fun notEqualsOperator(other: Other): Bool { equalsOperator(other).not() }
// }
