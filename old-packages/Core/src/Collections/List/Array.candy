use ....Int
use ....Panic
use ...Iterate
use ...LinkedList
use ..

impl[Item] Array[Item] {
  public static fun filled(length: Int /* UInt */, item: Item): Array[Item] {
    # Creates a new `Array` of the given `length`, where every slot is filled with the same `item`.

    This.generate(length, { item })
  }

  public static builtin fun generate(length: Int, generator: (Int) -> Item): Array[Item]
  # Creates a new `Array` of the given `length` where the `generator` is invoked with indices to
  # generate items to fill the slots.
}

impl[Item] Array[Item]: List[Item]
impl[Item] Array[Item]: Iterate[Item] {
  fun iterate(): Maybe[(Item, Iterate[Item])] { ArrayIterate[Item](this, 0).iterate() }
}
type ArrayIterate[Item] = (array: Array[Item], cursor: Int = 0)
impl[Item] ArrayIterate[Item]: Iterate[Item] {
  fun iterate(): Maybe[(Item, Iterate[Item])] {
    if(this.cursor == this.array.length(), {
      Maybe[(Item, Iterate[Item])].None()
    }).else({
      Maybe[(Item, Iterate[Item])].Some((
        this.array.get(this.cursor),
        ArrayIterate[Item](this.array, this.cursor + 1),
      ))
    })
  }
}


impl List[Item] {
  public static fun build(builder: (ListBuilder[Item]) -> Nothing): List[Item] {
    # An easy way to construct more complex `List[Item]`s from multiple elements.
    #
    # Example:
    #
    # ```
    # let myList = List[Int].build({
    #   it.add(4)
    #   if(someBool, { it.add(10) })
    #   5.times({ it.add(5) })
    # })
    # ```

    let theBuilder = ListBuilder[Item](Mutable[LinkedList[Item]](LinkedList[Item].empty()))
    builder(theBuilder)
    theBuilder.build()
  }
}
public type ListBuilder[Item] = Mutable[LinkedList[Item]]
impl ListBuilder[Item] {
  public fun add(item: List[Item]) {
    this.value.set(this.value.get().prepend(item))
  }
  public fun addAll(items: Iterate[Item]) { items.do({ this.add(it) }) }

  public fun build(): List[Item] { this.value.get().reverse().toArray() }
}
