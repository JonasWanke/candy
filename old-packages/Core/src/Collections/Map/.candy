use ...Bool
use ...Hash
use ...Maybe
use ...Int
use ...Operators
use ..Iterate
public use .BucketMap
public use .LinkedHashMap

## TODO(later, marcelgarus): Create type alias `MapKey` for `Equals & Hash`.

public trait Map[Key: Equals & Hash, Value] {
  static fun empty(): Map[Key, Value] { BucketMap[Key, Value].empty() }

  fun length(): Int
  fun isEmpty(): Bool { this.length() == 0 }
  fun isNotEmpty(): Bool { this.isEmpty().not() }

  fun get(key: Key): Maybe[Value]

  fun set(key: Key, value: Value): Map[Key, Value]
  fun setAll(map: Map[Key, Value]): Map[Key, Value] {
    map.entries().foldLeft(this, { result, item -> result.set(item.first, item.second) })
  }

  fun putIfAbsent(key: Key, ifAbsent: () -> Value): Map[Key, Value] {
    if(this.containsKey(key), { this }).else({ this.set(key, ifAbsent()) })
  }

  fun update(key: Key, updater: (Value) -> Value): Map[Key, Value] {
    let value = this.get(key)
      .map[Map[Key, Value]]({ this.set(key, updater(it)) })
      .else({ this })
  }
  fun updateAll(updater: (Value) -> Value) {
    this.keys().foldLeft[Map[Key, Value]](this, { result, item -> result.update(item, updater) })
  }

  fun remove(key: Key): (Map[Key, Value], Maybe[Value])
  fun removeWhere(selector: (Key, Value) -> Bool): Map[Key, Value] {
    this.entries()
      .where({ selector(it.first, it.second) })
      .foldLeft[Map[Key, Value]](this, { result, item -> result.remove(item.first) })
  }

  fun entries(): Iterate[(Key, Value)]
  fun keys(): Iterate[Key] { this.entries().map[Key]({ it.first }) }
  fun values(): Iterate[Value] { this.entries().map[Value]({ it.second }) }
}

impl[Key: Equals & Hash, Value: Equals] Map[Key, Value]: Equals {
  fun equals(other: This): Bool {
    this.keys().toSet() == other.keys().toSet()
      & this.keys.all({ this.get(it) == other.get(it) })
  }
}
impl[Key: Equals & Hash, Value: Hash] Map[Key, Value]: Hash {
  fun hash(hasher: Hasher) {
    H.combineUnordered(this.entries().map({
      H.combine(List[H].of(it.first.hash[H](), it.second.hash[H]()))
    }))
  }
}

impl[Key: Equals & Hash, Value] Iterate[(Key, Value)] {
  fun toMap(): Map[Key, Value] {
    # Collects all items into a map.

    this.foldLeft[Map[Key, Value]](Map[Key, Value].empty(), { result, item ->
      result.set(item.first, item.second)
    })
  }
}
