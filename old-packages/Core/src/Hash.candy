use ..Collections
use ..Int

public trait Hash {
  # A type that can be hashed.

  fun hash[H: Hasher](): H
  # Uses `H`'s static functions to hash primitive bytes into `H`s and combine multiple `H`s into one
  # single `H`.
  #
  # The `H` can be used to customize how good and fast the hash is. For example, for simple
  # microcontroller programs, you might want to hash into a `UInt16` efficiently, but for a big book
  # library server, you might want a strong hash with a few hundred bits of entropy.

  fun hashCode(): Int { this.hash[IntHasher]().finish() }
  # Hashes `this` into an `Int` using the default `IntHasher`.
}

public trait Hasher {
  # A trait for hashing arbitrary bytes.

  static fun primitive(value: Int): This
  # Creates a new hash value based on a `Int`.
  ## TODO(later, marcelgarus): Make this accept a UInt8.

  static fun combine(values: Iterate[This]): This { this.combineUnordered(values) }
  # Combines multiple values of this type into a single one.

  static fun combineUnordered(values: Iterate[This]): This
  # Combines multiple values of this type into a single one in such a way that the order doesn't
  # matter.
}

type IntHasher = Int
impl IntHasher: Hasher {
  static fun primitive(value: Int): This { IntHasher(value) }
  static fun combineUnordered(values: Iterate[This]): This { values.sumBy({ it.value }) }
  fun finish(): Int { this.value }
}
