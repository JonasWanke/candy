use ..Panic

public type Result[Success, ErrorType] =
  # The result of an operation that might fail.
  #
  # The following cases exist:
  # * In the success case, a `Result Ok` is returned, containing the returned value.
  # * In the error case, a `Result Error` is returned, containing an error describing what went wrong.
  | Ok Success
    # The result of an operation that succeeded.
  | Error ErrorType
    # The result of an operation that failed.

impl[Success, ErrorType] Result[Success, ErrorType] {
  public fun unwrap(): Success {
    this.match[Success](
      ok = { it },
      error = { panic("Unwrapped `Result Error`: {it}.")},
    )
  }
}

impl[Success: Equals, ErrorType: Equals] Result[Success, ErrorType]: Equals {
  fun equals(other: This): Bool {
    this.match[Bool](
      ok = { thisSuccess -> other.match[Bool](ok = { thisSuccess == it }, error = { false() }) },
      error = { thisError -> other.match[Bool](ok = { false() }, error = { thisError == it }) },
    )
  }
}
impl[Success: Hash, ErrorType: Hash] Result[Success, ErrorType]: Hash {
  fun hash[H: Hasher](): H {
    this.match[H](
      ok = { H.combine(List[H].of(H.primitive(0), it.hash[H]())) },
      error = { H.combine(List[H].of(H.primitive(1), it.hash[H]())) },
    )
  }
}
