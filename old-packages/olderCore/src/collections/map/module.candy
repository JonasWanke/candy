use ...bool
use ...hash
use ...maybe
use ...numbers
use ...operators
use ...todo
use ..iterable
use .bucket_map
use .linked_hash_map

// TODO(never, marcelgarus): Create type alias `MapKey` for `Equals & Hash`.

public trait Map<Key: Equals & Hash, Value>: Equals & Hash {
  static fun empty<Key: Equals & Hash, Value>(): Map<Key, Value> {
    MutableMap.empty<Key, Value>()
  }

  static fun of1<Key: Equals & Hash, Value>(single: (Key, Value)): Map<Key, Value> {
    MutableMap.of1<Key, Value>(single)
  }

  static fun of2<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
  ): Map<Key, Value> {
    MutableMap.of2<Key, Value>(first, second)
  }

  static fun of3<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
  ): Map<Key, Value> {
    MutableMap.of3<Key, Value>(first, second, third)
  }

  static fun of4<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
    fourth: (Key, Value),
  ): Map<Key, Value> {
    MutableMap.of4<Key, Value>(first, second, third, fourth)
  }

  static fun of5<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
    fourth: (Key, Value),
    fifth: (Key, Value),
  ): Map<Key, Value> {
    MutableMap.of5<Key, Value>(first, second, third, fourth, fifth)
  }

  fun length(): Int
  fun isEmpty(): Bool { length() == 0 }
  fun isNotEmpty(): Bool { !isEmpty() }

  fun get(key: Key): Maybe<Value>
  fun containsKey(key: Key): Bool { get(key) is Some<Value> }

  fun entries(): Iterable<(Key, Value)>
  fun keys(): Iterable<Key> { entries().map<Key>({ it.first }) }
  fun values(): Iterable<Value> { entries().map<Value>({ it.second }) }

  fun map<NewKey, NewValue>(mapper: (Key, Value) => (NewKey, NewValue)): Map<NewKey, NewValue> {
    let map = MutableMap.empty<NewKey, NewValue>()
    for entry in entries() {
      let new = mapper(entry.first, entry.second)
      map.set(new.first, new.second)
    }
    map
  }

  fun toMutable(): MutableMap<Key, Value> {
    let map = MutableMap.empty<Key, Value>()
    for entry in entries() {
      map.set(entry.first, entry.second)
    }
    map
  }

  fun equals(other: This): Bool {
    (keys().toSet() as Equals) == (other.keys().toSet() as Equals)
      && keys().all({ (get(it) as Equals) == (other.get(it) as Equals) })
  }
  fun hash<T>(hasher: Hasher<T>) {
    for entry in entries() {
      (entry.first as Hash).hash<T>(hasher)
      (entry.second as Hash).hash<T>(hasher)
    }
  }

  fun copyAndSet(key: Key, value: Value): Map<Key, Value> {
    let map = this.toMutable()
    map.set(key, value)
    map
  }
}

// TODO(never, marcelgarus): impl Map<Key, Value>: GetOperator<Key, Maybe<Value>>

public trait MutableMap<Key: Equals & Hash, Value>: Map<Key, Value> {
  static fun empty<Key: Equals & Hash, Value>(): MutableMap<Key, Value> {
    BucketMap.empty<Key, Value>()
  }

  static fun of1<Key: Equals & Hash, Value>(single: (Key, Value)): MutableMap<Key, Value> {
    let map = BucketMap.empty<Key, Value>()
    map.set(single.first, single.second)
    map
  }

  static fun of2<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
  ): MutableMap<Key, Value> {
    let map = BucketMap.empty<Key, Value>()
    map.set(first.first, first.second)
    map.set(second.first, second.second)
    map
  }

  static fun of3<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
  ): MutableMap<Key, Value> {
    let map = BucketMap.empty<Key, Value>()
    map.set(first.first, first.second)
    map.set(second.first, second.second)
    map.set(third.first, third.second)
    map
  }

  static fun of4<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
    fourth: (Key, Value),
  ): MutableMap<Key, Value> {
    let map = BucketMap.empty<Key, Value>()
    map.set(first.first, first.second)
    map.set(second.first, second.second)
    map.set(third.first, third.second)
    map.set(fourth.first, fourth.second)
    map
  }

  static fun of5<Key: Equals & Hash, Value>(
    first: (Key, Value),
    second: (Key, Value),
    third: (Key, Value),
    fourth: (Key, Value),
    fifth: (Key, Value),
  ): MutableMap<Key, Value> {
    let map = BucketMap.empty<Key, Value>()
    map.set(first.first, first.second)
    map.set(second.first, second.second)
    map.set(third.first, third.second)
    map.set(fourth.first, fourth.second)
    map.set(fifth.first, fifth.second)
    map
  }

  fun set(key: Key, value: Value)
  fun setAll(map: Map<Key, Value>) {
    for entry in map.entries() {
      set(entry.first, entry.second)
    }
  }

  fun putIfAbsent(key: Key, ifAbsent: () => Value): Value {
    let safeGet = get as ((Key) => Maybe<Value>)
    let value = safeGet(key)
    if value is Some<Value> {
      value.unwrap()
    } else {
      let value = ifAbsent()
      set(key, value)
      value
    }
  }

  fun update(key: Key, updater: (Value) => Value) {
    let safeGet = get as ((Key) => Maybe<Value>)
    let value = safeGet(key)
    if value is Some {
      let newValue = updater(value.unwrap())
      set(key, newValue)
    }
  }

  fun updateAll(updater: (Value) => Value) {
    for key in keys() {
      update(key as Key, updater)
    }
  }

  fun remove(key: Key): Maybe<Value>
  fun removeWhere(selector: (Key, Value) => Bool) {
    let entries = (this as Map<Key, Value>).entries().toList().copy()
    for entry in entries {
      if selector(entry.first, entry.second) { remove(entry.first) }
    }
  }

  fun clear() {
    for key in keys() {
      remove(key as Key)
    }
  }

  fun cast<NewKey, NewValue>(): Map<NewKey, NewValue> {
    todo("never, Implement MutableMap.cast")
  }
}
