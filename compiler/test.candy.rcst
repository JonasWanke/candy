[
    Comment {
        octothorpe: Octothorpe,
        comment: " This is the Candy core library.",
    },
    Newline(
        "\n",
    ),
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "typeOf",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinTypeOf",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "value",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "equals",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "b",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinEquals",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "a",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Identifier(
                            "b",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "panic",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "message",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinPanic",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "message",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isInt",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "equals",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "typeOf",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Symbol(
                        "Int",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isText",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "equals",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "typeOf",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Symbol(
                        "Text",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isSymbol",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "equals",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "typeOf",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Symbol(
                            "Symbol",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isBool",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "isTrue",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Call {
                        name: TrailingWhitespace {
                            child: Identifier(
                                "equals",
                            ),
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        arguments: [
                            TrailingWhitespace {
                                child: Identifier(
                                    "value",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            Symbol(
                                "True",
                            ),
                        ],
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "isFalse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Call {
                        name: TrailingWhitespace {
                            child: Identifier(
                                "equals",
                            ),
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        arguments: [
                            TrailingWhitespace {
                                child: Identifier(
                                    "value",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            Symbol(
                                "False",
                            ),
                        ],
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "isTrue",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Symbol(
                                        "True",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Identifier(
                                        "isFalse",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "needs",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "condition",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isBool",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "condition",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: OpeningCurlyBrace,
                            parameters_and_arrow: None,
                            body: [],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: None,
                        body: [
                            Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "panic",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    TrailingWhitespace {
                                        child: Text {
                                            opening_quote: DoubleQuote,
                                            parts: [
                                                TextPart(
                                                    "`needs` was called with the wrong arguments.",
                                                ),
                                            ],
                                            closing_quote: DoubleQuote,
                                        },
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Newline(
                            "\n",
                        ),
                        Whitespace(
                            "    ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "condition",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                            Whitespace(
                                "    ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: OpeningCurlyBrace,
                            parameters_and_arrow: None,
                            body: [],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                            Whitespace(
                                "    ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                Call {
                                    name: TrailingWhitespace {
                                        child: Identifier(
                                            "panic",
                                        ),
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                    arguments: [
                                        TrailingWhitespace {
                                            child: Text {
                                                opening_quote: DoubleQuote,
                                                parts: [
                                                    TextPart(
                                                        "A function was called with the wrong arguments.",
                                                    ),
                                                ],
                                                closing_quote: DoubleQuote,
                                            },
                                            whitespace: [
                                                Whitespace(
                                                    " ",
                                                ),
                                            ],
                                        },
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "not",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "a",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "a",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Symbol(
                                        "False",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: None,
                        body: [
                            TrailingWhitespace {
                                child: Symbol(
                                    "True",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "and",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "b",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "a",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "b",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "a",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Identifier(
                                        "b",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: None,
                        body: [
                            TrailingWhitespace {
                                child: Symbol(
                                    "False",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "or",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "b",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "a",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "b",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "a",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Symbol(
                                        "True",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                TrailingWhitespace {
                                    child: Identifier(
                                        "b",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "check",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "condition",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "condition",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Newline(
                            "\n",
                        ),
                        Whitespace(
                            "    ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "condition",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                            Whitespace(
                                "    ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: OpeningCurlyBrace,
                            parameters_and_arrow: None,
                            body: [],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                            Whitespace(
                                "    ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: TrailingWhitespace {
                                child: OpeningCurlyBrace,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            parameters_and_arrow: None,
                            body: [
                                Call {
                                    name: TrailingWhitespace {
                                        child: Identifier(
                                            "panic",
                                        ),
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                    arguments: [
                                        TrailingWhitespace {
                                            child: Text {
                                                opening_quote: DoubleQuote,
                                                parts: [
                                                    TextPart(
                                                        "A check didn't succeed",
                                                    ),
                                                ],
                                                closing_quote: DoubleQuote,
                                            },
                                            whitespace: [
                                                Whitespace(
                                                    " ",
                                                ),
                                            ],
                                        },
                                    ],
                                },
                            ],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "equals",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "typeOf",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Symbol(
                        "Function",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "getArgumentCount",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "function",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isFunction",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "function",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinGetArgumentCount",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Identifier(
                        "function",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction0",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "equals",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Parenthesized {
                                        opening_parenthesis: OpeningParenthesis,
                                        inner: Call {
                                            name: TrailingWhitespace {
                                                child: Identifier(
                                                    "getArgumentCount",
                                                ),
                                                whitespace: [
                                                    Whitespace(
                                                        " ",
                                                    ),
                                                ],
                                            },
                                            arguments: [
                                                Identifier(
                                                    "value",
                                                ),
                                            ],
                                        },
                                        closing_parenthesis: ClosingParenthesis,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                Int {
                                    value: 0,
                                    string: "0",
                                },
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction1",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "equals",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Parenthesized {
                                        opening_parenthesis: OpeningParenthesis,
                                        inner: Call {
                                            name: TrailingWhitespace {
                                                child: Identifier(
                                                    "getArgumentCount",
                                                ),
                                                whitespace: [
                                                    Whitespace(
                                                        " ",
                                                    ),
                                                ],
                                            },
                                            arguments: [
                                                Identifier(
                                                    "value",
                                                ),
                                            ],
                                        },
                                        closing_parenthesis: ClosingParenthesis,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                Int {
                                    value: 1,
                                    string: "1",
                                },
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction2",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "equals",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Parenthesized {
                                        opening_parenthesis: OpeningParenthesis,
                                        inner: Call {
                                            name: TrailingWhitespace {
                                                child: Identifier(
                                                    "getArgumentCount",
                                                ),
                                                whitespace: [
                                                    Whitespace(
                                                        " ",
                                                    ),
                                                ],
                                            },
                                            arguments: [
                                                Identifier(
                                                    "value",
                                                ),
                                            ],
                                        },
                                        closing_parenthesis: ClosingParenthesis,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                Int {
                                    value: 2,
                                    string: "2",
                                },
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction3",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "equals",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Parenthesized {
                                        opening_parenthesis: OpeningParenthesis,
                                        inner: Call {
                                            name: TrailingWhitespace {
                                                child: Identifier(
                                                    "getArgumentCount",
                                                ),
                                                whitespace: [
                                                    Whitespace(
                                                        " ",
                                                    ),
                                                ],
                                            },
                                            arguments: [
                                                Identifier(
                                                    "value",
                                                ),
                                            ],
                                        },
                                        closing_parenthesis: ClosingParenthesis,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                Int {
                                    value: 3,
                                    string: "3",
                                },
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction4",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "equals",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Parenthesized {
                                        opening_parenthesis: OpeningParenthesis,
                                        inner: Call {
                                            name: TrailingWhitespace {
                                                child: Identifier(
                                                    "getArgumentCount",
                                                ),
                                                whitespace: [
                                                    Whitespace(
                                                        " ",
                                                    ),
                                                ],
                                            },
                                            arguments: [
                                                Identifier(
                                                    "value",
                                                ),
                                            ],
                                        },
                                        closing_parenthesis: ClosingParenthesis,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                Int {
                                    value: 4,
                                    string: "4",
                                },
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "isFunction5",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "value",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "and",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "isFunction",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    Identifier(
                                        "value",
                                    ),
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Parenthesized {
                            opening_parenthesis: OpeningParenthesis,
                            inner: Call {
                                name: TrailingWhitespace {
                                    child: Identifier(
                                        "equals",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                arguments: [
                                    TrailingWhitespace {
                                        child: Parenthesized {
                                            opening_parenthesis: OpeningParenthesis,
                                            inner: Call {
                                                name: TrailingWhitespace {
                                                    child: Identifier(
                                                        "getArgumentCount",
                                                    ),
                                                    whitespace: [
                                                        Whitespace(
                                                            " ",
                                                        ),
                                                    ],
                                                },
                                                arguments: [
                                                    Identifier(
                                                        "value",
                                                    ),
                                                ],
                                            },
                                            closing_parenthesis: ClosingParenthesis,
                                        },
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                    Int {
                                        value: 5,
                                        string: "5",
                                    },
                                ],
                            },
                            closing_parenthesis: ClosingParenthesis,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "ifElse",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "condition",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "then",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "else",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "condition",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isFunction0",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "then",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isFunction0",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "else",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinIfElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "condition",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Identifier(
                            "then",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    Identifier(
                        "else",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "if",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "condition",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "then",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isBool",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "condition",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Parenthesized {
                        opening_parenthesis: OpeningParenthesis,
                        inner: Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "isFunction0",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                Identifier(
                                    "then",
                                ),
                            ],
                        },
                        closing_parenthesis: ClosingParenthesis,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "ifElse",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "condition",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Identifier(
                            "then",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Lambda {
                            opening_curly_brace: OpeningCurlyBrace,
                            parameters_and_arrow: None,
                            body: [],
                            closing_curly_brace: ClosingCurlyBrace,
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "add",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "b",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "aIsInt",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Call {
                        name: TrailingWhitespace {
                            child: Identifier(
                                "isInt",
                            ),
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        arguments: [
                            Identifier(
                                "a",
                            ),
                        ],
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Identifier(
                        "aIsInt",
                    ),
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "bIsInt",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Call {
                        name: TrailingWhitespace {
                            child: Identifier(
                                "isInt",
                            ),
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        arguments: [
                            Identifier(
                                "b",
                            ),
                        ],
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "needs",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Identifier(
                        "bIsInt",
                    ),
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "builtinAdd",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Identifier(
                            "a",
                        ),
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Identifier(
                            "b",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "bar",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "add",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    TrailingWhitespace {
                        child: Int {
                            value: 2,
                            string: "2",
                        },
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    TrailingWhitespace {
                        child: Int {
                            value: 2,
                            string: "2",
                        },
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "print",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "text",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: EqualsSign,
        body: [],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "readLine",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: EqualsSign,
        body: [],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "add",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "a",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "b",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: EqualsSign,
        body: [],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "map",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "iterable",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Identifier(
                    "mapper",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: EqualsSign,
        body: [],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "myIterable",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: EqualsSign,
        body: [],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "blub",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Symbol(
                "Blub",
            ),
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "call",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "lambda",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
            ],
        },
        body: [],
    },
    Newline(
        "\n",
    ),
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "main",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "foo",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Int {
                        value: 3,
                        string: "3",
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "bar",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: Some(
                            (
                                [
                                    TrailingWhitespace {
                                        child: Identifier(
                                            "n",
                                        ),
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                ],
                                TrailingWhitespace {
                                    child: Arrow,
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        body: [
                            TrailingWhitespace {
                                child: Int {
                                    value: 5,
                                    string: "5",
                                },
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "baz",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Newline(
                            "\n",
                        ),
                        Whitespace(
                            "    ",
                        ),
                    ],
                },
                body: [
                    Call {
                        name: TrailingWhitespace {
                            child: Identifier(
                                "print",
                            ),
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        arguments: [
                            Text {
                                opening_quote: DoubleQuote,
                                parts: [
                                    TextPart(
                                        "abc",
                                    ),
                                ],
                                closing_quote: DoubleQuote,
                            },
                        ],
                    },
                    Newline(
                        "\n",
                    ),
                    Whitespace(
                        "    ",
                    ),
                    Int {
                        value: 123,
                        string: "123",
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Call {
                name: TrailingWhitespace {
                    child: Identifier(
                        "bar",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                arguments: [
                    Int {
                        value: 5,
                        string: "5",
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Identifier(
                "foo",
            ),
            Newline(
                "\n",
            ),
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "main",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "foo",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Int {
                        value: 1,
                        string: "1",
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "bar",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: Some(
                            (
                                [
                                    TrailingWhitespace {
                                        child: Identifier(
                                            "n",
                                        ),
                                        whitespace: [
                                            Whitespace(
                                                " ",
                                            ),
                                        ],
                                    },
                                ],
                                TrailingWhitespace {
                                    child: Arrow,
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        body: [
                            TrailingWhitespace {
                                child: Int {
                                    value: 5,
                                    string: "5",
                                },
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "a",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Identifier(
                        "readLine",
                    ),
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Identifier(
                "a",
            ),
            Newline(
                "\n",
            ),
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "main",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Lambda {
                opening_curly_brace: TrailingWhitespace {
                    child: OpeningCurlyBrace,
                    whitespace: [
                        Newline(
                            "\n",
                        ),
                        Newline(
                            "\n",
                        ),
                    ],
                },
                parameters_and_arrow: None,
                body: [],
                closing_curly_brace: ClosingCurlyBrace,
            },
        ],
    },
    Newline(
        "\n",
    ),
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "foo",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Identifier(
                "add",
            ),
        ],
    },
    Newline(
        "\n",
    ),
    Call {
        name: TrailingWhitespace {
            child: Identifier(
                "add",
            ),
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        arguments: [
            TrailingWhitespace {
                child: Int {
                    value: 8646461,
                    string: "8646461",
                },
                whitespace: [
                    Newline(
                        "\n",
                    ),
                    Whitespace(
                        "  ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Text {
                    opening_quote: DoubleQuote,
                    parts: [
                        TextPart(
                            "Hi",
                        ),
                    ],
                    closing_quote: DoubleQuote,
                },
                whitespace: [
                    Newline(
                        "\n",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Call {
        name: TrailingWhitespace {
            child: Identifier(
                "map",
            ),
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        arguments: [
            TrailingWhitespace {
                child: Identifier(
                    "myIterable",
                ),
                whitespace: [
                    Newline(
                        "\n",
                    ),
                    Whitespace(
                        "  ",
                    ),
                ],
            },
            TrailingWhitespace {
                child: Lambda {
                    opening_curly_brace: TrailingWhitespace {
                        child: OpeningCurlyBrace,
                        whitespace: [
                            Whitespace(
                                " ",
                            ),
                        ],
                    },
                    parameters_and_arrow: Some(
                        (
                            [
                                TrailingWhitespace {
                                    child: Identifier(
                                        "a",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                                TrailingWhitespace {
                                    child: Identifier(
                                        "b",
                                    ),
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                            TrailingWhitespace {
                                child: Arrow,
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ),
                    ),
                    body: [
                        Call {
                            name: TrailingWhitespace {
                                child: Identifier(
                                    "print",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                            arguments: [
                                TrailingWhitespace {
                                    child: Text {
                                        opening_quote: DoubleQuote,
                                        parts: [
                                            TextPart(
                                                "the item on io",
                                            ),
                                        ],
                                        closing_quote: DoubleQuote,
                                    },
                                    whitespace: [
                                        Whitespace(
                                            " ",
                                        ),
                                    ],
                                },
                            ],
                        },
                    ],
                    closing_curly_brace: ClosingCurlyBrace,
                },
                whitespace: [
                    Newline(
                        "\n",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "fibonacci",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [
            TrailingWhitespace {
                child: Identifier(
                    "n",
                ),
                whitespace: [
                    Whitespace(
                        " ",
                    ),
                ],
            },
        ],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Identifier(
                "foo",
            ),
        ],
    },
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "fibonacci",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        body: [
            Lambda {
                opening_curly_brace: TrailingWhitespace {
                    child: OpeningCurlyBrace,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters_and_arrow: Some(
                    (
                        [
                            TrailingWhitespace {
                                child: Identifier(
                                    "n",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        TrailingWhitespace {
                            child: Arrow,
                            whitespace: [
                                Newline(
                                    "\n",
                                ),
                                Whitespace(
                                    "  ",
                                ),
                            ],
                        },
                    ),
                ),
                body: [
                    TrailingWhitespace {
                        child: Identifier(
                            "blub",
                        ),
                        whitespace: [
                            Newline(
                                "\n",
                            ),
                        ],
                    },
                ],
                closing_curly_brace: ClosingCurlyBrace,
            },
        ],
    },
    Newline(
        "\n",
    ),
    Identifier(
        "bar",
    ),
    Newline(
        "\n",
    ),
    Newline(
        "\n",
    ),
    Assignment {
        name: TrailingWhitespace {
            child: Identifier(
                "lambda",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        parameters: [],
        equals_sign: TrailingWhitespace {
            child: EqualsSign,
            whitespace: [
                Newline(
                    "\n",
                ),
                Whitespace(
                    "  ",
                ),
            ],
        },
        body: [
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "foo",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Int {
                        value: 1,
                        string: "1",
                    },
                ],
            },
            Newline(
                "\n",
            ),
            Whitespace(
                "  ",
            ),
            Assignment {
                name: TrailingWhitespace {
                    child: Identifier(
                        "bar",
                    ),
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                parameters: [],
                equals_sign: TrailingWhitespace {
                    child: EqualsSign,
                    whitespace: [
                        Whitespace(
                            " ",
                        ),
                    ],
                },
                body: [
                    Lambda {
                        opening_curly_brace: TrailingWhitespace {
                            child: OpeningCurlyBrace,
                            whitespace: [
                                Whitespace(
                                    " ",
                                ),
                            ],
                        },
                        parameters_and_arrow: None,
                        body: [
                            TrailingWhitespace {
                                child: Identifier(
                                    "foo",
                                ),
                                whitespace: [
                                    Whitespace(
                                        " ",
                                    ),
                                ],
                            },
                        ],
                        closing_curly_brace: ClosingCurlyBrace,
                    },
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Call {
        name: TrailingWhitespace {
            child: Identifier(
                "call",
            ),
            whitespace: [
                Whitespace(
                    " ",
                ),
            ],
        },
        arguments: [
            TrailingWhitespace {
                child: Identifier(
                    "lambda",
                ),
                whitespace: [
                    Newline(
                        "\n",
                    ),
                ],
            },
        ],
    },
    Newline(
        "\n",
    ),
    Symbol(
        "True",
    ),
    Newline(
        "\n",
    ),
]
