use ...Bool
use ...Hash
use ...Int
use ...Operators
use ..Iterate
use .MapBasedSet

public trait Set[Item: Equals & Hash]: InfixPlus[Item, Set[Item]] {
  static fun empty(): Set[Item] { MapBasedSet[Item].empty() }

  static fun of(single: Item): Set[Item] { Set[Item].empty() + single }
  static fun of(first: Item, second: Item): Set[Item] { Set[Item].of(first) + second }
  static fun of(first: Item, second: Item, third: Item): Set[Item] {
    Set[Item].of(first, second) + third
  }
  static fun of(first: Item, second: Item, third: Item, fourth: Item): Set[Item] {
    Set[Item].of(first, second, third) + fourth
  }
  static fun of(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): Set[Item] {
    Set[Item].of(first, second, third, fourth) + fifth
  }

  fun length(): Int
  fun isEmpty(): Bool { this.length() == 0 }
  fun isNotEmpty(): Bool { this.isEmpty().not() }

  fun contains(item: Item): Bool

  fun items(): Iterate[Item]
}

impl[Item: Equals & Hash] Set[Item]: InfixPlus[Iterate[Item], Set[Item]] {
  fun infixPlus(other: Iterate[Item]): Set[Item] {
    other.foldLeft[Set[Item]](this, { result, item -> result + item })
  }
}
impl[Item: Equals & Hash] Set[Item]: InfixMinus[Item, Set[Item]] {
  fun infixMinus(other: Item): Set[Item] { this.items().whereNot({ it == other}).toSet() }
}

impl[Item: Equals & Hash] Set[Item]: InfixAmpersand[Iterate[Item], Set[Item]] {
  fun infixAmpersand(other: Iterate[Item]): Set[Item] {
    # Returns the intersection of `this` and `other`.

    this.items().where({ other.contains(it) }).toSet()
  }
}
impl[Item: Equals & Hash] Set[Item]: InfixBar[Iterate[Item], Set[Item]] {
  fun infixBar(other: Iterate[Item]): Set[Item] {
    # Returns the union of `this` and `other`.

    this + other.items()
  }
}

impl[Item: Equals & Hash] Set[Item]: Equals {
  fun equals(other: Set[Item]): Bool {
    let length = this.length()
    length == other.length() & (this | other).length() == length
  }
}
impl[Item: Equals & Hash] Set[Item]: Hash {
  fun hash[Result](hasher: Hasher[Result]): Hasher[Result] {
    this.items().foldLeft[Hasher[Result]](hasher, { result, item -> result.write(item) })
  }
}


impl[Item: Equals & Hash] Iterate[Item] {
  fun toSet(): Set[Item] { Set[Item].empty().addAll(this) }
}
