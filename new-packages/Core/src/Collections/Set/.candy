use ...Bool
use ...Hash
use ...Int
use ...Operators
use ..Iterate
use .MapBasedSet

public trait Set[Item: Equals & Hash] {
  static fun empty(): Set[Item] { MapBasedSet[Item].empty() }

  static fun of(single: Item): Set[Item] { Set[Item].empty().add(single) }
  static fun of(first: Item, second: Item): Set[Item] { Set[Item].of(first).add(second) }
  static fun of(first: Item, second: Item, third: Item): Set[Item] {
    Set[Item].of(first, second).add(third)
  }
  static fun of(first: Item, second: Item, third: Item, fourth: Item): Set[Item] {
    Set[Item].of(first, second, third).add(fourth)
  }
  static fun of(first: Item, second: Item, third: Item, fourth: Item, fifth: Item): Set[Item] {
    Set[Item].of(first, second, third, fourth).add(fifth)
  }

  fun length(): Int
  fun isEmpty(): Bool { this.length() == 0 }
  fun isNotEmpty(): Bool { this.isEmpty().not() }

  fun contains(item: Item): Bool

  fun items(): Iterate[Item]

  fun add(item: Item): Set[Item]
  fun addAll(items: Iterate[Item]): Set[Item] {
    items.foldLeft[Set[Item]](this, { result, item -> result.add(item) })
  }
  fun remove(item: Item): Set[Item] { this.items().whereNot({ it == other}).toSet() }
  fun removeAll(items: Iterate[Item]): Set[Item] { this - items.toSet() }
}

impl[Item: Equals & Hash] Set[Item]: InfixMinus[Set[Item], Set[Item]] {
  fun infixMinus(other: Set[Item]): Set[Item] {
    this.items().whereNot({ other.contains(it) }).toSet()
  }
}

impl[Item: Equals & Hash] Set[Item]: InfixAmpersand[Iterate[Item], Set[Item]] {
  fun infixAmpersand(other: Iterate[Item]): Set[Item] {
    # Returns the intersection of `this` and `other`.

    this.items().where({ other.contains(it) }).toSet()
  }
}
impl[Item: Equals & Hash] Set[Item]: InfixBar[Iterate[Item], Set[Item]] {
  fun infixBar(other: Iterate[Item]): Set[Item] {
    # Returns the union of `this` and `other`.

    this.addAll(other.items())
  }
}

impl[Item: Equals & Hash] Set[Item]: Equals {
  fun equals(other: Set[Item]): Bool {
    let length = this.length()
    length == other.length() & (this | other).length() == length
  }
}
impl[Item: Equals & Hash] Set[Item]: Hash {
  fun hash[Result](hasher: Hasher[Result]): Hasher[Result] {
    this.items().foldLeft[Hasher[Result]](hasher, { result, item -> result.write(item) })
  }
}


impl[Item: Equals & Hash] Iterate[Item] {
  fun toSet(): Set[Item] { Set[Item].empty().addAll(this) }
}
impl[Item: Equals & Hash] Iterate[Set[Item]] {
  public fun intersect(): Set[Item] {
    this.foldLeft[Set[Item]](Set[Item].empty(), { result, item -> result & item })
  }
  public fun union(): Set[Item] {
    this.foldLeft[Set[Item]](Set[Item].empty(), { result, item -> result | item })
  }
}
