use ..Equality

trait Comparable: Equals
  & BinaryLess[This, Bool]
  & BinaryLessEqual[This, Bool]
  & BinaryGreater[This, Bool]
  & BinaryGreaterEqual[This, Bool] {
  ## TODO(marcelgarus): Make this generic over an `Other` type.

  fun compareTo(other: This): Less | Equal | Greater

  fun less(other: This): Bool { compareTo(other) is Less }
  fun lessEqual(other: This): Bool { compareTo(other) is Less | Equal }
  fun greater(other: This): Bool { compareTo(other) is Greater }
  fun greaterEqual(other: This): Bool { compareTo(other) is Greater | Equal }
}

## TODO(marcelgarus): Maybe make these methods on `Iterable`?
public fun min[T: Comparable](first: T, second: T): T {
  if first <= second { first } else { second }
}
public fun max[T: Comparable](first: T, second: T): T {
  if first >= second { first } else { second }
}
