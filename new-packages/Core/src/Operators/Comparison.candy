use ...Bool
use ..Equality
use ..Raw

public trait Comparable {
  fun compareTo(other: This): Less | Equal | Greater
}
impl Comparable: InfixLess[This, Bool] {
  fun infixLess(other: This): Bool {
    this.compareTo(other).match[Bool](less = { true() }, equal = { false() }, greater = { false() })
  }
}
impl Comparable: InfixLessEqual[This, Bool] {
  fun infixLessEqual(other: This): Bool {
    this.compareTo(other).match[Bool](less = { true() }, equal = { true() }, greater = { false() })
  }
}
impl Comparable: Equals {
  fun equals(other: This): Bool {
    this.compareTo(other).match[Bool](less = { false() }, equal = { true() }, greater = { false() })
  }
}
impl Comparable: InfixGreaterEqual[This, Bool] {
  fun infixGreaterEqual(other: This): Bool {
    this.compareTo(other).match[Bool](less = { false() }, equal = { true() }, greater = { true() })
  }
}
impl Comparable: InfixGreater[This, Bool] {
  fun infixGreater(other: This): Bool {
    this.compareTo(other).match[Bool](less = { false() }, equal = { false() }, greater = { true() })
  }
}

## TODO(marcelgarus): Maybe put these methods on `Iterable`?
public fun min[T: Comparable](first: T, second: T): T {
  if[T](first <= second, { first }).else({ second })
}
public fun max[T: Comparable](first: T, second: T): T {
  if[T](first >= second, { first }).else({ second })
}
