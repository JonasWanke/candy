use ..Bool
use ..Collections
use ..Hash
use ..Int
use ..Mutable
use ..Operators

public builtin type String
# A valid Unicode string.

impl String {
  public builtin fun characters(): Iterate[String]
  public builtin fun substring(offset: Int, length: Int): String

  public builtin fun isEmpty(): Bool
  public builtin fun isNotEmpty(): Bool
  public builtin fun length(): Int

  public builtin fun split(pattern: String): List[String]
  public builtin fun trim(): String
}

impl String: Compare {
  builtin fun compareTo(other: String): Less | Equal | Greater
}
impl String: Hash {
  builtin fun hash[H: Hasher](): H
}

impl String: InfixPlus[This, This] {
  builtin fun infixPlus(other: This): This
}


impl String {
  public static fun build(builder: (StringBuilder) -> Nothing): String {
    # An easy way to construct more complex `String`s from multiple parts.
    #
    # Example:
    #
    # ```
    # let myString = String.build({
    #   it.add("foo")
    #   if(someBool, { it.add("bar") })
    #   5.times({ it.add("baz") })
    # })
    # ```
    let theBuilder = StringBuilder(Mutable[String](""))
    builder(theBuilder)
    theBuilder.build()
  }
}
public type StringBuilder = Mutable[String]
impl StringBuilder {
  public fun add(value: String) {
    this.value.set(this.value.get() + value)
  }
  public fun build(): String { this.value.get() }
}
